2000-11-11  Jason Merrill  <jason@redhat.com>

	* decl.c (maybe_commonize_var): Set DECL_UNINLINABLE for statics
	in inlines.

--- gcc/cp/decl.c.jj	Fri Jan 19 00:17:13 2001
+++ gcc/cp/decl.c	Wed Jan 24 19:31:08 2001
@@ -7629,6 +7629,7 @@ maybe_commonize_var (decl)
 	 inlining of such functions.  */
       current_function_cannot_inline
 	= "function with static variable cannot be inline";
+      DECL_UNINLINABLE (current_function_decl) = 1;
 
       /* If flag_weak, we don't need to mess with this, as we can just
 	 make the function weak, and let it refer to its unique local
--- gcc/testsuite/g++.old-deja/g++.other/comdat1-aux.cc.jj	Wed Jan 24 19:31:08 2001
+++ gcc/testsuite/g++.old-deja/g++.other/comdat1-aux.cc	Wed Jan 24 19:31:08 2001
@@ -0,0 +1,10 @@
+inline int f ()
+{
+  static int k;
+  return ++k;
+}
+
+int g ()
+{
+  return f();
+}
--- gcc/testsuite/g++.old-deja/g++.other/comdat1.C.jj	Wed Jan 24 19:31:08 2001
+++ gcc/testsuite/g++.old-deja/g++.other/comdat1.C	Wed Jan 24 19:31:08 2001
@@ -0,0 +1,24 @@
+// Test that statics in inline functions are unified between
+// translation units.  Currently we handle this by just suppressing
+// inling and relying on unification of the function itself.
+
+// Special g++ Options: -O
+
+// Additional sources: comdat1-aux.cc
+
+inline int f ()
+{
+  static int i;
+  return ++i;
+}
+
+int g ();
+
+int main ()
+{
+  if (f() != 1
+      || g() != 2
+      || f() != 3)
+    return 1;
+  return 0;
+}
