2001-03-29  Jakub Jelinek  <jakub@redhat.com>

	* ifcvt.c (noce_emit_move_insn): New.
	(noce_try_store_flag, noce_try_store_flag_constants,
	noce_try_store_flag_inc, noce_try_store_flag_mask,
	noce_try_cmove, noce_try_cmove_arith): Use it.
	(noce_process_if_block): Likewise.
	For STRICT_LOW_PART, take mode from its SUBREG.

	* gcc.c-torture/compile/20010329-1.c: New test.

--- gcc/ifcvt.c.jj	Fri Jun 16 13:10:29 2000
+++ gcc/ifcvt.c	Thu Mar 29 19:23:33 2001
@@ -94,6 +94,7 @@ static int find_if_case_2		PARAMS ((basi
 static int find_memory			PARAMS ((rtx *, void *));
 static int dead_or_predicable		PARAMS ((basic_block, basic_block,
 						 basic_block, rtx, int));
+static void noce_emit_move_insn		PARAMS ((rtx, rtx));
 
 /* Abuse the basic_block AUX field to store the original block index,
    as well as a flag indicating that the block should be rescaned for
@@ -533,6 +534,31 @@ noce_emit_store_flag (if_info, x, revers
 			   || code == GEU || code == GTU), normalize);
 }
 
+/* Emit instruction to move a rtx into STRICT_LOW_PART.  */
+static void
+noce_emit_move_insn (x, y)
+     rtx x, y;
+{
+  enum machine_mode outmode, inmode;
+  rtx outer, inner;
+  int bitpos;
+
+  if (GET_CODE (x) != STRICT_LOW_PART)
+    {
+      emit_move_insn (x, y);
+      return;
+    }
+
+  outer = XEXP (x, 0);
+  inner = XEXP (outer, 0);
+  outmode = GET_MODE (outer);
+  inmode = GET_MODE (inner);
+  bitpos = SUBREG_BYTE (outer) * BITS_PER_UNIT;
+  store_bit_field (inner, GET_MODE_BITSIZE (outmode),
+		   bitpos, outmode, y, GET_MODE_BITSIZE (inmode),
+		   GET_MODE_BITSIZE (inmode));
+}
+
 /* Convert "if (test) x = 1; else x = 0".
 
    Only try 0 and STORE_FLAG_VALUE here.  Other combinations will be
@@ -564,7 +590,7 @@ noce_try_store_flag (if_info)
   if (target)
     {
       if (target != if_info->x)
-	emit_move_insn (if_info->x, target);
+	noce_emit_move_insn (if_info->x, target);
 
       seq = get_insns ();
       end_sequence ();
@@ -686,7 +712,7 @@ noce_try_store_flag_constants (if_info)
 	}
 
       if (target != if_info->x)
-	emit_move_insn (if_info->x, target);
+	noce_emit_move_insn (if_info->x, target);
 
       seq = get_insns ();
       end_sequence ();
@@ -744,7 +770,7 @@ noce_try_store_flag_inc (if_info)
       if (target)
 	{
 	  if (target != if_info->x)
-	    emit_move_insn (if_info->x, target);
+	    noce_emit_move_insn (if_info->x, target);
 
 	  seq = get_insns ();
 	  end_sequence ();
@@ -795,7 +821,7 @@ noce_try_store_flag_mask (if_info)
       if (target)
 	{
 	  if (target != if_info->x)
-	    emit_move_insn (if_info->x, target);
+	    noce_emit_move_insn (if_info->x, target);
 
 	  seq = get_insns ();
 	  end_sequence ();
@@ -894,7 +920,7 @@ noce_try_cmove (if_info)
       if (target)
 	{
 	  if (target != if_info->x)
-	    emit_move_insn (if_info->x, target);
+	    noce_emit_move_insn (if_info->x, target);
 
 	  seq = get_insns ();
 	  end_sequence ();
@@ -1051,10 +1077,10 @@ noce_try_cmove_arith (if_info)
       if (MEM_ALIAS_SET (if_info->a) == MEM_ALIAS_SET (if_info->b))
 	MEM_ALIAS_SET (tmp) = MEM_ALIAS_SET (if_info->a);
 
-      emit_move_insn (if_info->x, tmp);
+      noce_emit_move_insn (if_info->x, tmp);
     }
   else if (target != x)
-    emit_move_insn (x, target);
+    noce_emit_move_insn (x, target);
 
   tmp = get_insns ();
   end_sequence ();
@@ -1210,7 +1236,8 @@ noce_process_if_block (test_bb, then_bb,
     {
       if (no_new_pseudos)
 	return FALSE;
-      x = gen_reg_rtx (GET_MODE (x));
+      x = gen_reg_rtx (GET_MODE (GET_CODE (x) == STRICT_LOW_PART
+				 ? XEXP (x, 0) : x));
     }
 
   /* Don't operate on sources that may trap or are volatile.  */
@@ -1300,7 +1327,7 @@ noce_process_if_block (test_bb, then_bb,
   if (orig_x != x)
     {
       start_sequence ();
-      emit_move_insn (orig_x, x);
+      noce_emit_move_insn (orig_x, x);
       insn_b = gen_sequence ();
       end_sequence ();
 
--- gcc/testsuite/gcc.c-torture/compile/20010329-1.c.jj	Thu Mar 29 19:19:45 2001
+++ gcc/testsuite/gcc.c-torture/compile/20010329-1.c	Thu Mar 29 19:19:45 2001
@@ -0,0 +1,17 @@
+union u {
+  unsigned char a;
+  double b;
+};
+
+int a;
+
+union u foo (void)
+{
+  union u b;
+
+  if (a)
+    b.a = 1;
+  else
+    b.a = 0;
+  return b;
+}
