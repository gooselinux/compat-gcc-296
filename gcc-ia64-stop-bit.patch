2001-04-05  Bernd Schmidt  <bernds@redhat.com>

	* config/ia64/ia64.c (rtx_needs_barrier): A PARALLEL can contain
	ASM_OPERAND.

2001-03-28  Bernd Schmidt  <bernds@redhat.com>

	* config/ia64/ia64.c (update_set_flags): New function, broken out of
	rtx_needs_barrier.
	(set_src_needs_barrier): Likewise.
	(rtx_needs_barrier): For SET case, use these two functions.  Rework
	PARALLEL case to handle all inputs before all outputs.

2001-06-05  Jakub Jelinek  <jakub@redhat.com>

	* gcc.c-torture/compile/20010605-1.c: New test.

--- gcc/config/ia64/ia64.c.jj	Fri Jun  1 09:38:32 2001
+++ gcc/config/ia64/ia64.c	Tue Jun  5 08:14:46 2001
@@ -3586,6 +3586,8 @@ static void rws_update PARAMS ((struct r
 				struct reg_flags, int));
 static int rws_access_regno PARAMS ((int, struct reg_flags, int));
 static int rws_access_reg PARAMS ((rtx, struct reg_flags, int));
+static void update_set_flags PARAMS ((rtx, struct reg_flags *, int *, rtx *));
+static int set_src_needs_barrier PARAMS ((rtx, struct reg_flags, int, rtx));
 static int rtx_needs_barrier PARAMS ((rtx, struct reg_flags, int));
 
 /* Update *RWS for REGNO, which is being written by the current instruction,
@@ -3729,6 +3731,124 @@ rws_access_reg (reg, flags, pred)
     }
 }
 
+/* Examine X, which is a SET rtx, and update the flags, the predicate, and
+   the condition, stored in *PFLAGS, *PPRED and *PCOND.  */
+
+static void
+update_set_flags (x, pflags, ppred, pcond)
+     rtx x;
+     struct reg_flags *pflags;
+     int *ppred;
+     rtx *pcond;
+{
+  rtx src = SET_SRC (x);
+
+  *pcond = 0;
+
+  switch (GET_CODE (src))
+    {
+    case CALL:
+      return;
+
+    case IF_THEN_ELSE:
+      if (SET_DEST (x) == pc_rtx)
+	/* X is a conditional branch.  */
+	return;	
+      else
+	{
+	  int is_complemented = 0;
+
+	  /* X is a conditional move.  */
+	  rtx cond = XEXP (src, 0);
+	  if (GET_CODE (cond) == EQ)
+	    is_complemented = 1;
+	  cond = XEXP (cond, 0);
+	  if (GET_CODE (cond) != REG
+	      && REGNO_REG_CLASS (REGNO (cond)) != PR_REGS)
+	    abort ();
+	  *pcond = cond;
+	  if (XEXP (src, 1) == SET_DEST (x)
+	      || XEXP (src, 2) == SET_DEST (x))
+	    {
+	      /* X is a conditional move that conditionally writes the
+		 destination.  */
+
+	      /* We need another complement in this case.  */
+	      if (XEXP (src, 1) == SET_DEST (x))
+		is_complemented = ! is_complemented;
+
+	      *ppred = REGNO (cond);
+	      if (is_complemented)
+		++*ppred;
+	    }
+
+	  /* ??? If this is a conditional write to the dest, then this
+	     instruction does not actually read one source.  This probably
+	     doesn't matter, because that source is also the dest.  */
+	  /* ??? Multiple writes to predicate registers are allowed
+	     if they are all AND type compares, or if they are all OR
+	     type compares.  We do not generate such instructions
+	     currently.  */
+	}
+      /* ... fall through ... */
+
+    default:
+      if (GET_RTX_CLASS (GET_CODE (src)) == '<'
+	  && GET_MODE_CLASS (GET_MODE (XEXP (src, 0))) == MODE_FLOAT)
+	/* Set pflags->is_fp to 1 so that we know we're dealing
+	   with a floating point comparison when processing the
+	   destination of the SET.  */
+	pflags->is_fp = 1;
+
+      break;
+    }
+}
+
+/* Subroutine of rtx_needs_barrier; this function determines whether the
+   source of a given SET rtx found in X needs a barrier.  FLAGS and PRED
+   are as in rtx_needs_barrier.  COND is an rtx that holds the condition
+   for this insn.  */
+   
+static int
+set_src_needs_barrier (x, flags, pred, cond)
+     rtx x;
+     struct reg_flags flags;
+     int pred;
+     rtx cond;
+{
+  int need_barrier = 0;
+  rtx dst;
+  rtx src = SET_SRC (x);
+
+  if (GET_CODE (src) == CALL)
+    /* We don't need to worry about the result registers that
+       get written by subroutine call.  */
+    return rtx_needs_barrier (src, flags, pred);
+  else if (SET_DEST (x) == pc_rtx)
+    {
+      /* X is a conditional branch.  */
+      /* ??? This seems redundant, as the caller sets this bit for
+	 all JUMP_INSNs.  */
+      flags.is_branch = 1;
+      return rtx_needs_barrier (src, flags, pred);
+    }
+
+  need_barrier = rtx_needs_barrier (src, flags, pred);
+
+  /* This instruction unconditionally uses a predicate register.  */
+  if (cond)
+    need_barrier |= rws_access_reg (cond, flags, 0);
+
+  dst = SET_DEST (x);
+  if (GET_CODE (dst) == ZERO_EXTRACT)
+    {
+      need_barrier |= rtx_needs_barrier (XEXP (dst, 1), flags, pred);
+      need_barrier |= rtx_needs_barrier (XEXP (dst, 2), flags, pred);
+      dst = XEXP (dst, 0);
+    }
+  return need_barrier;
+}
+
 /* Handle an access to rtx X of type FLAGS using predicate register PRED.
    Return 1 is this access creates a dependency with an earlier instruction
    in the same group.  */
@@ -3744,7 +3864,6 @@ rtx_needs_barrier (x, flags, pred)
   int need_barrier = 0;
   const char *format_ptr;
   struct reg_flags new_flags;
-  rtx src, dst;
   rtx cond = 0;
 
   if (! x)
@@ -3754,86 +3873,14 @@ rtx_needs_barrier (x, flags, pred)
 
   switch (GET_CODE (x))
     {
-    case SET:
-      src = SET_SRC (x);
-      switch (GET_CODE (src))
-	{
-	case CALL:
-	  /* We don't need to worry about the result registers that
-             get written by subroutine call.  */
-	  need_barrier = rtx_needs_barrier (src, flags, pred);
-	  return need_barrier;
-
-	case IF_THEN_ELSE:
-	  if (SET_DEST (x) == pc_rtx)
-	    {
-	      /* X is a conditional branch.  */
-	      /* ??? This seems redundant, as the caller sets this bit for
-		 all JUMP_INSNs.  */
-	      new_flags.is_branch = 1;
-	      need_barrier = rtx_needs_barrier (src, new_flags, pred);
-	      return need_barrier;
-	    }
-	  else
-	    {
-	      /* X is a conditional move.  */
-	      cond = XEXP (src, 0);
-	      if (GET_CODE (cond) == EQ)
-		is_complemented = 1;
-	      cond = XEXP (cond, 0);
-	      if (GET_CODE (cond) != REG
-		  && REGNO_REG_CLASS (REGNO (cond)) != PR_REGS)
-		abort ();
-
-	      if (XEXP (src, 1) == SET_DEST (x)
-		  || XEXP (src, 2) == SET_DEST (x))
-		{
-		  /* X is a conditional move that conditionally writes the
-		     destination.  */
-
-		  /* We need another complement in this case.  */
-		  if (XEXP (src, 1) == SET_DEST (x))
-		    is_complemented = ! is_complemented;
-
-		  pred = REGNO (cond);
-		  if (is_complemented)
-		    ++pred;
-		}
-
-	      /* ??? If this is a conditional write to the dest, then this
-		 instruction does not actually read one source.  This probably
-		 doesn't matter, because that source is also the dest.  */
-	      /* ??? Multiple writes to predicate registers are allowed
-		 if they are all AND type compares, or if they are all OR
-		 type compares.  We do not generate such instructions
-		 currently.  */
-	    }
-	  /* ... fall through ... */
-
-	default:
-	  if (GET_RTX_CLASS (GET_CODE (src)) == '<'
-	       && GET_MODE_CLASS (GET_MODE (XEXP (src, 0))) == MODE_FLOAT)
-	    /* Set new_flags.is_fp to 1 so that we know we're dealing
-	       with a floating point comparison when processing the
-	       destination of the SET.  */
-	    new_flags.is_fp = 1;
-	  break;
-	}
-      need_barrier = rtx_needs_barrier (src, flags, pred);
-
-      /* This instruction unconditionally uses a predicate register.  */
-      if (cond)
-	need_barrier |= rws_access_reg (cond, flags, 0);
-
-      dst = SET_DEST (x);
-      if (GET_CODE (dst) == ZERO_EXTRACT)
+    case SET:      
+      update_set_flags (x, &new_flags, &pred, &cond);
+      need_barrier = set_src_needs_barrier (x, new_flags, pred, cond);
+      if (GET_CODE (SET_SRC (x)) != CALL)
 	{
-	  need_barrier |= rtx_needs_barrier (XEXP (dst, 1), flags, pred);
-	  need_barrier |= rtx_needs_barrier (XEXP (dst, 2), flags, pred);
-	  dst = XEXP (dst, 0);
+	  new_flags.is_write = 1;
+	  need_barrier |= rtx_needs_barrier (SET_DEST (x), new_flags, pred);
 	}
-      new_flags.is_write = 1;
-      need_barrier |= rtx_needs_barrier (dst, new_flags, pred);
       break;
 
     case CALL:
@@ -3913,8 +3960,36 @@ rtx_needs_barrier (x, flags, pred)
 
     case PARALLEL:
       for (i = XVECLEN (x, 0) - 1; i >= 0; --i)
-	if (rtx_needs_barrier (XVECEXP (x, 0, i), flags, pred))
-	  need_barrier = 1;
+	{
+	  rtx pat = XVECEXP (x, 0, i);
+	  if (GET_CODE (pat) == SET)
+	    {
+	      update_set_flags (pat, &new_flags, &pred, &cond);
+	      need_barrier |= set_src_needs_barrier (pat, new_flags, pred, cond);
+	    }
+	  else if (GET_CODE (pat) == USE
+		   || GET_CODE (pat) == CALL
+		   || GET_CODE (pat) == ASM_OPERANDS
+		   || GET_CODE (pat) == UNSPEC_VOLATILE)
+	    need_barrier |= rtx_needs_barrier (pat, flags, pred);
+	  else if (GET_CODE (pat) != CLOBBER && GET_CODE (pat) != RETURN)
+	    abort ();
+	}
+      for (i = XVECLEN (x, 0) - 1; i >= 0; --i)
+	{
+	  rtx pat = XVECEXP (x, 0, i);
+	  if (GET_CODE (pat) == SET)
+	    {
+	      if (GET_CODE (SET_SRC (pat)) != CALL)
+		{
+		  new_flags.is_write = 1;
+		  need_barrier |= rtx_needs_barrier (SET_DEST (pat), new_flags,
+						     pred);
+		}
+	    }
+	  else if (GET_CODE (pat) == CLOBBER)
+	    need_barrier |= rtx_needs_barrier (pat, flags, pred);
+	}
       break;
 
     case SUBREG:
--- gcc/testsuite/gcc.c-torture/compile/20010605-1.c.jj	Sat Mar 24 04:35:12 2001
+++ gcc/testsuite/gcc.c-torture/compile/20010605-1.c	Tue Jun  5 05:04:35 2001
@@ -0,0 +1,20 @@
+struct A { unsigned long buf[100]; };
+int foo(unsigned int *x)
+{
+  unsigned int a;
+
+  if (!x)
+    return -22;
+
+#ifdef __ia64__
+  if (({
+    register long b asm ("r8") = 0;
+    register long c asm ("r9") = 0;
+    asm ("" : "=r"(c), "=r"(b) : "m"(*(struct A *)x), "1"(b));
+    a = (unsigned int) c;
+    b; }))
+    return -14;
+#endif
+
+  return 0;
+}
