2001-05-05  Jakub Jelinek  <jakub@redhat.com

	* gcc.c (cpp_options): Define __NO_INLINE__ unless we are honoring
	"inline" keyword.
	* cpp.texi (__NO_INLINE): Document it.

diff -up gcc/cpp.texi.__NO_INLINE__ gcc/cpp.texi
--- gcc/cpp.texi.__NO_INLINE__	2008-07-15 11:27:05.000000000 -0400
+++ gcc/cpp.texi	2008-07-15 11:50:40.000000000 -0400
@@ -1173,6 +1173,16 @@ library functions.  You should not refer
 this macro unless you make very sure that programs will execute with the
 same effect regardless.
 
+@item __NO_INLINE__
+@findex __NO_INLINE__
+GNU CC defines this macro if it will not attempt to inline functions
+with @samp{inline} keyword (either when not optimizing or when inlining
+has been explicitely forbidden through @samp{-fno-inline}).  It causes
+certain GNU header files to define alternative macro definitions for some
+system library functions.  You should not refer to or test the definition
+of this macro unless you make very sure that programs will execute with
+the same effect regardless.
+
 @item __CHAR_UNSIGNED__
 @findex __CHAR_UNSIGNED__
 GNU C defines this macro if and only if the data type @code{char} is
diff -up gcc/gcc.c.__NO_INLINE__ gcc/gcc.c
--- gcc/gcc.c.__NO_INLINE__	2008-07-15 11:27:09.000000000 -0400
+++ gcc/gcc.c	2008-07-15 11:49:42.000000000 -0400
@@ -564,7 +564,7 @@ static const char *cpp_options =
  %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\
  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\
  %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\
- %{ffast-math:-D__FAST_MATH__}\
+ %{fno-inline|O0|!O*:-D__NO_INLINE__} %{ffast-math:-D__FAST_MATH__}\
  %{fshort-wchar:-U__WCHAR_TYPE__ -D__WCHAR_TYPE__=short\\ unsigned\\ int}\
  %{fshow-column} %{fno-show-column}\
  %{fleading-underscore} %{fno-leading-underscore}\
