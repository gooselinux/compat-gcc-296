2002-03-15  Jakub Jelinek  <jakub@redhat.com>

	* varasm.c (UNALIGNED_SHORT_ASM_OP, UNALIGNED_INT_ASM_OP,
	UNALIGNED_DOUBLE_INT_ASM_OP): Copied from dwarf2out.c.
	(assemble_ua_integer): New.
	* c-typeck.c, except.c, objc/objc-act.c: Update all
	output_constant callers.

	* gcc.c-torture/execute/20020315-1.c: New test.

2001-08-17  Richard Henderson  <rth@redhat.com>

	* varasm.c (min_align): New.
	(output_constant, output_constructor): Add align parameter.
	* output.h: Update decls.
	* varasm.c: Update all callers.

--- gcc/varasm.c.jj	Wed Mar 13 22:53:40 2002
+++ gcc/varasm.c	Fri Mar 15 17:30:06 2002
@@ -60,6 +60,18 @@ Boston, MA 02111-1307, USA.  */
 #define ASM_STABS_OP ".stabs"
 #endif
 
+#ifdef OBJECT_FORMAT_ELF
+#ifndef UNALIGNED_SHORT_ASM_OP
+#define UNALIGNED_SHORT_ASM_OP  ".2byte"
+#endif
+#ifndef UNALIGNED_INT_ASM_OP
+#define UNALIGNED_INT_ASM_OP    ".4byte"
+#endif
+#ifndef UNALIGNED_DOUBLE_INT_ASM_OP
+#define UNALIGNED_DOUBLE_INT_ASM_OP     ".8byte"
+#endif
+#endif /* OBJECT_FORMAT_ELF */
+
 /* Define the prefix to use when check_memory_usage_flag is enable.  */
 #ifdef NO_DOLLAR_IN_LABEL
 #ifdef NO_DOT_IN_LABEL
@@ -173,7 +185,8 @@ static void mark_constant_pool		PARAMS (
 static void mark_constants		PARAMS ((rtx));
 static int output_addressed_constants	PARAMS ((tree));
 static void output_after_function_constants PARAMS ((void));
-static void output_constructor		PARAMS ((tree, int));
+static unsigned min_align		PARAMS ((unsigned, unsigned));
+static void output_constructor		PARAMS ((tree, int, unsigned));
 #ifdef ASM_WEAKEN_LABEL
 static void remove_from_pending_weak_list	PARAMS ((char *));
 #endif
@@ -860,6 +873,16 @@ make_var_volatile (var)
   MEM_VOLATILE_P (DECL_RTL (var)) = 1;
 }
 
+/* A and B are either alignments or offsets.  Return the minimum alignment
+   that may be assumed after adding the two together.  */
+   
+static inline unsigned
+min_align (a, b)
+     unsigned int a, b;
+{
+  return (a | b) & -(a | b);
+}
+
 /* Output alignment directive to align for constant expression EXP.  */
 
 void
@@ -1642,7 +1665,7 @@ assemble_variable (decl, top_level, at_e
       if (DECL_INITIAL (decl))
 	/* Output the actual data.  */
 	output_constant (DECL_INITIAL (decl),
-			 tree_low_cst (DECL_SIZE_UNIT (decl), 1));
+			 tree_low_cst (DECL_SIZE_UNIT (decl), 1), align);
       else
 	/* Leave space for it.  */
 	assemble_zeros (tree_low_cst (DECL_SIZE_UNIT (decl), 1));
@@ -1969,6 +1992,96 @@ assemble_integer (x, size, force)
 
   return 0;
 }
+
+int
+assemble_ua_integer (x, size, align, force)
+     rtx x;
+     int size;
+     unsigned align;
+     int force;
+{
+  /* First try to use the standard 1, 2, 4, 8, and 16 byte
+     ASM_OUTPUT... macros.  */
+
+  if (align >= (unsigned) size * BITS_PER_UNIT)
+    return assemble_integer (x, size, force);
+
+  switch (size)
+    {
+#ifdef ASM_OUTPUT_CHAR
+    case 1:
+      ASM_OUTPUT_CHAR (asm_out_file, x);
+      return 1;
+#endif
+
+#ifdef UNALIGNED_SHORT_ASM_OP
+    case 2:
+      fprintf (asm_out_file, "\t%s\t", UNALIGNED_SHORT_ASM_OP);
+      output_addr_const (asm_out_file, x);
+      fprintf (asm_out_file, "\n");
+      return 1;
+#endif
+
+#ifdef UNALIGNED_INT_ASM_OP
+    case 4:
+      fprintf (asm_out_file, "\t%s\t", UNALIGNED_INT_ASM_OP);
+      output_addr_const (asm_out_file, x);
+      fprintf (asm_out_file, "\n");
+      return 1;
+#endif
+
+#ifdef UNALIGNED_DOUBLE_INT_ASM_OP
+    case 8:
+      fprintf (asm_out_file, "\t%s\t", UNALIGNED_DOUBLE_INT_ASM_OP);
+      output_addr_const (asm_out_file, x);
+      fprintf (asm_out_file, "\n");
+      return 1;
+#endif
+    }
+
+  /* If we couldn't do it that way, there are two other possibilities: First,
+     if the machine can output an explicit byte and this is a 1 byte constant,
+     we can use ASM_OUTPUT_BYTE.  */
+
+#ifdef ASM_OUTPUT_BYTE
+  if (size == 1 && GET_CODE (x) == CONST_INT)
+    {
+      ASM_OUTPUT_BYTE (asm_out_file, INTVAL (x));
+      return 1;
+    }
+#endif
+
+  /* Finally, if SIZE is larger than a single word, try to output the constant
+     one word at a time.  */
+
+  if (size > UNITS_PER_WORD)
+    {
+      int i;
+      enum machine_mode mode
+	= mode_for_size (size * BITS_PER_UNIT, MODE_INT, 0);
+      rtx word;
+
+      for (i = 0; i < size / UNITS_PER_WORD; i++)
+	{
+	  word = operand_subword (x, i, 0, mode);
+
+	  if (word == 0)
+	    break;
+
+	  if (! assemble_ua_integer (word, UNITS_PER_WORD, align, 0))
+	    break;
+	}
+
+      if (i == size / UNITS_PER_WORD)
+	return 1;
+      /* If we output at least one word and then could not finish,
+	 there is no valid way to continue.  */
+      if (i > 0)
+	abort ();
+    }
+
+  return assemble_integer (x, size, force);
+}
 
 /* Assemble the floating-point constant D into an object of size MODE.  */
 
@@ -3220,7 +3336,7 @@ output_constant_def_contents (exp, reloc
   output_constant (exp,
 		   (TREE_CODE (exp) == STRING_CST
 		    ? TREE_STRING_LENGTH (exp)
-		    : int_size_in_bytes (TREE_TYPE (exp))));
+		    : int_size_in_bytes (TREE_TYPE (exp))), align);
 
 }
 
@@ -4236,9 +4352,10 @@ initializer_constant_valid_p (value, end
    But such constructors will never be generated for any possible input.  */
 
 void
-output_constant (exp, size)
+output_constant (exp, size, align)
      register tree exp;
      register int size;
+     register unsigned align;
 {
   register enum tree_code code = TREE_CODE (TREE_TYPE (exp));
 
@@ -4288,9 +4405,9 @@ output_constant (exp, size)
 	     || TREE_CODE (exp) == NON_LVALUE_EXPR)
 	exp = TREE_OPERAND (exp, 0);
 
-      if (! assemble_integer (expand_expr (exp, NULL_RTX, VOIDmode,
-					   EXPAND_INITIALIZER),
-			      size, 0))
+      if (! assemble_ua_integer (expand_expr (exp, NULL_RTX, VOIDmode,
+					      EXPAND_INITIALIZER),
+				 size, align, 0))
 	error ("initializer for integer value is too complicated");
       size = 0;
       break;
@@ -4305,15 +4422,16 @@ output_constant (exp, size)
       break;
 
     case COMPLEX_TYPE:
-      output_constant (TREE_REALPART (exp), size / 2);
-      output_constant (TREE_IMAGPART (exp), size / 2);
+      output_constant (TREE_REALPART (exp), size / 2, align);
+      output_constant (TREE_IMAGPART (exp), size / 2,
+		       min_align (align, BITS_PER_UNIT * (size / 2)));
       size -= (size / 2) * 2;
       break;
 
     case ARRAY_TYPE:
       if (TREE_CODE (exp) == CONSTRUCTOR)
 	{
-	  output_constructor (exp, size);
+	  output_constructor (exp, size, align);
 	  return;
 	}
       else if (TREE_CODE (exp) == STRING_CST)
@@ -4336,16 +4454,16 @@ output_constant (exp, size)
     case RECORD_TYPE:
     case UNION_TYPE:
       if (TREE_CODE (exp) == CONSTRUCTOR)
-	output_constructor (exp, size);
+	output_constructor (exp, size, align);
       else
 	abort ();
       return;
 
     case SET_TYPE:
       if (TREE_CODE (exp) == INTEGER_CST)
-	assemble_integer (expand_expr (exp, NULL_RTX,
-				       VOIDmode, EXPAND_INITIALIZER),
-			  size, 1);
+	assemble_ua_integer (expand_expr (exp, NULL_RTX,
+					  VOIDmode, EXPAND_INITIALIZER),
+			     size, align, 1);
       else if (TREE_CODE (exp) == CONSTRUCTOR)
 	{
 	  unsigned char *buffer = (unsigned char *) alloca (size);
@@ -4371,9 +4489,10 @@ output_constant (exp, size)
    Generate at least SIZE bytes, padding if necessary.  */
 
 static void
-output_constructor (exp, size)
+output_constructor (exp, size, align)
      tree exp;
      int size;
+     unsigned align;
 {
   register tree link, field = 0;
   HOST_WIDE_INT min_index = 0;
@@ -4436,13 +4555,14 @@ output_constructor (exp, size)
 	  HOST_WIDE_INT lo_index = TREE_INT_CST_LOW (TREE_OPERAND (index, 0));
 	  HOST_WIDE_INT hi_index = TREE_INT_CST_LOW (TREE_OPERAND (index, 1));
 	  HOST_WIDE_INT index;
+	  unsigned int align2 = min_align (align, fieldsize * BITS_PER_UNIT);
 	  for (index = lo_index; index <= hi_index; index++)
 	    {
 	      /* Output the element's initial value.  */
 	      if (val == 0)
 		assemble_zeros (fieldsize);
 	      else
-		output_constant (val, fieldsize);
+		output_constant (val, fieldsize, align2);
 
 	      /* Count its size.  */
 	      total_bytes += fieldsize;
@@ -4456,6 +4576,7 @@ output_constructor (exp, size)
 	  /* Since this structure is static,
 	     we know the positions are constant.  */
 	  HOST_WIDE_INT bitpos = field ? int_byte_position (field) : 0;
+	  unsigned int align2;
 
 	  if (index != 0)
 	    bitpos
@@ -4479,6 +4600,9 @@ output_constructor (exp, size)
 	      total_bytes = bitpos;
 	    }
 
+	  /* Find the alignment of this element.  */
+	  align2 = min_align (align, BITS_PER_UNIT * bitpos);
+
 	  /* Determine size this element should occupy.  */
 	  if (field)
 	    {
@@ -4494,7 +4618,7 @@ output_constructor (exp, size)
 	  if (val == 0)
 	    assemble_zeros (fieldsize);
 	  else
-	    output_constant (val, fieldsize);
+	    output_constant (val, fieldsize, align2);
 
 	  /* Count its size.  */
 	  total_bytes += fieldsize;
--- gcc/output.h.jj	Wed Mar 13 22:53:39 2002
+++ gcc/output.h	Wed Mar 13 22:53:39 2002
@@ -325,6 +325,7 @@ extern void assemble_name		PARAMS ((FILE
    Return 1 if we were able to output the constant, otherwise 0.  If FORCE is
    non-zero, abort if we can't output the constant.  */
 extern int assemble_integer		PARAMS ((rtx, int, int));
+extern int assemble_ua_integer		PARAMS ((rtx, int, unsigned, int));
 extern int assemble_eh_integer		PARAMS ((rtx, int, int));
 
 #ifdef EMUSHORT
@@ -374,7 +375,7 @@ extern tree initializer_constant_valid_p
 
    Generate exactly SIZE bytes of assembler data, padding at the end
    with zeros if necessary.  SIZE must always be specified.  */
-extern void output_constant		PARAMS ((tree, int));
+extern void output_constant		PARAMS ((tree, int, unsigned));
 #endif
 
 /* When outputting assembler code, indicates which alternative
--- gcc/c-typeck.c.jj	Wed Mar 13 22:53:39 2002
+++ gcc/c-typeck.c	Fri Mar 15 17:17:56 2002
@@ -5432,7 +5432,7 @@ pop_init_level (implicit)
 	      size = int_size_in_bytes (constructor_type);
 	    }
 
-	  output_constant (constructor, size);
+	  output_constant (constructor, size, TYPE_ALIGN (constructor_type));
 	}
     }
   else if (constructor_type == 0)
@@ -6005,7 +6005,8 @@ output_init_element (value, type, field,
 	      output_constant (digest_init (type, value,
 					    require_constant_value,
 					    require_constant_elements),
-			       int_size_in_bytes (type));
+			       int_size_in_bytes (type),
+			       TYPE_ALIGN (type));
 
 	      /* For a record or union,
 		 keep track of end position of last field.  */
--- gcc/except.c.jj	Wed Mar 13 22:53:13 2002
+++ gcc/except.c	Fri Mar 15 17:19:00 2002
@@ -2265,7 +2265,8 @@ output_exception_table_entry (file, n)
                                              POINTER_SIZE / BITS_PER_UNIT, 1);
             else
               output_constant ((tree)(handler->type_info), 
-                                                POINTER_SIZE / BITS_PER_UNIT);
+                                                POINTER_SIZE / BITS_PER_UNIT,
+						POINTER_SIZE);
         }
       putc ('\n', file);		/* blank line */
       /* We only output the first label under the old scheme */
--- gcc/objc/objc-act.c.jj	Wed Mar 13 22:53:37 2002
+++ gcc/objc/objc-act.c	Fri Mar 15 17:19:56 2002
@@ -8414,7 +8414,8 @@ handle_class_ref (chain)
       assemble_external (decl);
 
       /* Output a constant to reference this address.  */
-      output_constant (exp, int_size_in_bytes (string_type_node));
+      output_constant (exp, int_size_in_bytes (string_type_node),
+		       TYPE_ALIGN (string_type_node));
     }
   else
     {
--- gcc/testsuite/gcc.c-torture/execute/20020315-1.c.jj	Fri Mar 15 17:50:31 2002
+++ gcc/testsuite/gcc.c-torture/execute/20020315-1.c	Fri Mar 15 17:50:25 2002
@@ -0,0 +1,33 @@
+/* PR c/5973 */
+
+typedef struct {
+  unsigned int a;
+  unsigned short b, c;
+  unsigned char d, e, f[6];
+} __attribute__ ((packed)) A;
+
+extern void abort (void);
+extern void exit (int);
+
+const char x[39] = { 124 };
+char y[39] = { 124 };
+
+void
+foo (A *g, const char *p)
+{
+  *g = (A) { 0xEBD0A0A2, 0xB9E5, 0x4433, 0x87, 0xC0,
+             { 0x68, 0xB6, 0xB7, 0x26, 0x99, 0xC7 }};
+}
+
+int
+main (void)
+{
+  A g;
+
+  foo (&g, x);
+  if (g.a != 0xEBD0A0A2 || g.b != 0xB9E5 || g.c != 0x4433
+      || g.d != 0x87 || g.e != 0xC0 || g.f[0] != 0x68 || g.f[1] != 0xB6
+      || g.f[2] != 0xB7 || g.f[3] != 0x26 || g.f[4] != 0x99 || g.f[5] != 0xC7)
+    abort ();
+  exit (0);
+}
