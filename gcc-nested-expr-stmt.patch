2000-09-16  Mark Mitchell  <mark@codesourcery.com>

	* stmt.c (expand_expr_stmt): Avoid clobberring of last_expr_type.

2001-05-09  Jakub Jelinek  <jakub@redhat.com>

	* g++.old-deja/g++.other/exprstmt1.C: New test.

--- gcc/stmt.c	Thu May  3 16:12:24 2001	1.166
+++ gcc/stmt.c	Wed May  9 17:15:58 2001	1.167
@@ -1872,11 +1872,14 @@ expand_expr_stmt (exp)
   if (expr_stmts_for_value && TREE_CODE (TREE_TYPE (exp)) == FUNCTION_TYPE)
     exp = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (exp)), exp);
 
-  last_expr_type = TREE_TYPE (exp);
+  /* The call to `expand_expr' could cause last_expr_type and
+     last_expr_value to get reset.  Therefore, we set last_expr_value
+     and last_expr_type *after* calling expand_expr.  */
   last_expr_value = expand_expr (exp,
 				 (expr_stmts_for_value
 				  ? NULL_RTX : const0_rtx),
 				 VOIDmode, 0);
+  last_expr_type = TREE_TYPE (exp);
 
   /* If all we do is reference a volatile value in memory,
      copy it to a register to be sure it is actually touched.  */
--- gcc/testsuite/g++.old-deja/g++.other/exprstmt1.C.jj	Wed May  9 17:17:16 2001
+++ gcc/testsuite/g++.old-deja/g++.other/exprstmt1.C	Wed May  9 17:14:06 2001
@@ -0,0 +1,23 @@
+// Special g++ Options: -O
+
+int main()
+{
+  unsigned int x = 1381237248;
+
+  if (sizeof (x) != 4)
+    return 0;
+
+  x =
+    ({
+      unsigned int y = x;
+      ({
+        unsigned int z = y;
+        (unsigned int)
+          ((((unsigned int)z & (unsigned int)0x000000ffUL) << 24)
+           | (((unsigned int)z & (unsigned int)0x0000ff00UL) << 8)
+           | (((unsigned int)z & (unsigned int)0x00ff0000UL) >> 8)
+           | (((unsigned int)z & (unsigned int)0xff000000UL) >> 24));
+       });
+     });
+  return x != 152658;
+}
