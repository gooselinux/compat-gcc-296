2001-06-08  Nathan Sidwell  <nathan@codesourcery.com>

	PR c++/2929
	* friend.c (do_friend): Use push_decl_namespace for classes at
	namespace scope.

	* g++.old-deja/g++.pt/friend49.C: New test.

--- gcc/cp/friend.c.jj	Thu Jun  1 11:56:55 2000
+++ gcc/cp/friend.c	Fri Jun  8 15:59:06 2001
@@ -381,18 +381,31 @@ do_friend (ctype, declarator, decl, parm
 
       if (! DECL_USE_TEMPLATE (decl))
 	{
-	  /* We can call pushdecl here, because the TREE_CHAIN of this
-	     FUNCTION_DECL is not needed for other purposes.  Don't do
-	     this for a template instantiation.  However, we don't
-	     call pushdecl() for a friend function of a template
-	     class, since in general, such a declaration depends on
-	     template parameters.  Instead, we call pushdecl when the
-	     class is instantiated.  */
-	  if (!is_friend_template
-	      && template_class_depth (current_class_type) == 0)
+	  if (is_friend_template
+	      || template_class_depth (current_class_type) != 0)
+	    /* We can't call pushdecl for a template class, since in
+	       general, such a declaration depends on template
+	       parameters.  Instead, we call pushdecl when the class
+	       is instantiated.  */
+	    decl = push_template_decl_real (decl, /*is_friend=*/1);
+	  else if (current_function_decl)
+	    /* This must be a local class, so pushdecl will be ok, and
+	       insert an unqualified friend into the local scope
+	       (rather than the containing namespace scope, which the
+	       next choice will do). */
 	    decl = pushdecl (decl);
-	  else 
-	    decl = push_template_decl_real (decl, /*is_friend=*/1); 
+	  else
+	    {
+	      /* We can't use pushdecl, as we might be in a template
+		 class specialization, and pushdecl will insert an
+		 unqualified friend decl into the template parameter
+		 scope, rather than the namespace containing it. */
+	      tree ns = decl_namespace_context (decl);
+ 
+	      push_nested_namespace (ns);
+	      decl = pushdecl_namespace_level (decl);
+	      pop_nested_namespace (ns);
+	    }
 
 	  if (warn_nontemplate_friend
 	      && ! funcdef_flag && ! is_friend_template
--- gcc/testsuite/g++.old-deja/g++.pt/friend49.C.jj	Fri Jun  8 15:47:31 2001
+++ gcc/testsuite/g++.old-deja/g++.pt/friend49.C	Fri Jun  8 15:47:31 2001
@@ -0,0 +1,26 @@
+// Build don't link:
+
+// Copyright (C) 2001 Free Software Foundation, Inc.
+// Contributed by Nathan Sidwell 5 Jun 2001 <nathan@codesourcery.com>
+
+// Bug 2929. We were forgetting about template parm scope when
+// injecting a friend decl into a class template specialization's
+// containing scope.
+
+template <class Type> class Vec;
+
+template <> class Vec<double>
+{
+public:
+  Vec ();
+  Vec<double> & Fn (double);
+  friend Vec<double> Fn (const Vec<double> &, double);
+}; // pop_binding ICE
+
+template <class _Tp> class Alloc
+{
+  template <class _Tp1> struct Rebind
+  {
+    typedef Alloc<_Tp1> other;
+  };
+};
