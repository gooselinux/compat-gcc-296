2001-06-01  Jakub Jelinek  <jakub@redhat.com>

	* method.c (mangle_expression): Update last ugly workaround.

	* g++.old-deja/g++.other/mangle10.C: New test.

--- gcc/cp/method.c.jj	Wed May  9 20:56:57 2001
+++ gcc/cp/method.c	Fri Jun  1 14:22:44 2001
@@ -567,8 +567,9 @@ mangle_expression (value)
 		     
 	       template <class T> void f(A<sizeof(T)>);  */
 	    build_mangled_name_for_type (operand);
-	  else if (TREE_TYPE (operand) == 0
-		   && TREE_CODE (operand) == NEGATE_EXPR)
+	  else if (TREE_TYPE (operand) == NULL_TREE
+		   && (TREE_CODE_CLASS (tc) == '1'
+		       || TREE_CODE_CLASS (tc) == '2'))
 	    build_overload_value (TREE_TYPE (TREE_OPERAND (operand, 0)),
 				  operand,
 				  mf_maybe_uninstantiated);
--- gcc/testsuite/g++.old-deja/g++.other/mangle10.C.jj	Fri Feb 16 21:16:31 2001
+++ gcc/testsuite/g++.old-deja/g++.other/mangle10.C	Fri Jun  1 14:28:52 2001
@@ -0,0 +1,26 @@
+// Build don't link:
+
+template<int T>
+struct A {
+  char *a;
+  A (const char* x)
+  {
+    a = (char*) x;
+  }
+};
+
+template<int U, int V, class T>
+struct B {
+  T a[V-U+1];
+  friend A<V-U+1> f (B const &x)
+  {
+    return A<V-U+1> ((char*) x.a);
+  }
+};
+
+const int a = 8;
+
+typedef B<1,a,int> C;
+struct D {
+  C x;
+};
