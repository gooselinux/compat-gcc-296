--- gcc/cp/parse.c.jj	Thu Jul 27 15:46:08 2000
+++ gcc/cp/parse.c	Tue Aug  5 15:58:05 2003
@@ -791,53 +791,53 @@ static const short yyrline[] = { 0,
   1869,  1872,  1877,  1882,  1890,  1892,  1905,  1909,  1912,  1915,
   1920,  1923,  1931,  1934,  1936,  1938,  1941,  1944,  1959,  1978,
   1981,  1983,  1986,  1988,  1992,  1994,  1998,  2000,  2004,  2007,
-  2011,  2016,  2017,  2030,  2037,  2038,  2044,  2049,  2054,  2060,
-  2061,  2068,  2071,  2075,  2078,  2082,  2087,  2090,  2094,  2097,
-  2099,  2101,  2103,  2110,  2112,  2113,  2114,  2118,  2121,  2125,
-  2128,  2134,  2136,  2139,  2142,  2145,  2151,  2154,  2157,  2159,
-  2161,  2165,  2171,  2177,  2182,  2188,  2190,  2195,  2198,  2201,
-  2203,  2205,  2209,  2213,  2218,  2221,  2226,  2229,  2232,  2238,
-  2240,  2252,  2256,  2261,  2287,  2289,  2292,  2294,  2299,  2301,
-  2303,  2305,  2307,  2309,  2313,  2321,  2324,  2326,  2330,  2337,
-  2343,  2349,  2355,  2365,  2371,  2375,  2382,  2410,  2420,  2426,
-  2429,  2432,  2434,  2438,  2440,  2444,  2447,  2451,  2459,  2462,
-  2464,  2468,  2479,  2493,  2494,  2495,  2496,  2499,  2508,  2513,
-  2519,  2521,  2526,  2528,  2530,  2532,  2534,  2536,  2539,  2549,
-  2556,  2581,  2587,  2590,  2593,  2595,  2606,  2611,  2614,  2619,
-  2622,  2629,  2639,  2642,  2649,  2659,  2661,  2664,  2666,  2669,
-  2673,  2678,  2682,  2685,  2688,  2693,  2696,  2700,  2703,  2705,
-  2709,  2711,  2718,  2720,  2723,  2726,  2731,  2735,  2740,  2750,
-  2753,  2757,  2761,  2770,  2773,  2775,  2777,  2783,  2785,  2794,
-  2797,  2799,  2801,  2803,  2807,  2810,  2813,  2815,  2817,  2819,
-  2823,  2826,  2837,  2847,  2849,  2850,  2854,  2862,  2864,  2872,
-  2875,  2877,  2879,  2881,  2885,  2888,  2891,  2893,  2895,  2897,
-  2901,  2904,  2907,  2909,  2911,  2913,  2915,  2917,  2921,  2928,
-  2932,  2937,  2941,  2946,  2948,  2952,  2955,  2957,  2961,  2963,
-  2964,  2967,  2969,  2971,  2978,  2989,  2995,  3001,  3015,  3017,
-  3021,  3035,  3037,  3039,  3043,  3049,  3062,  3065,  3070,  3083,
-  3089,  3091,  3092,  3093,  3101,  3106,  3115,  3116,  3120,  3123,
-  3129,  3135,  3138,  3140,  3142,  3144,  3148,  3152,  3156,  3159,
-  3163,  3165,  3174,  3177,  3179,  3181,  3183,  3185,  3187,  3189,
-  3191,  3195,  3199,  3203,  3207,  3209,  3211,  3213,  3215,  3217,
-  3219,  3221,  3223,  3231,  3233,  3234,  3235,  3238,  3244,  3246,
-  3251,  3253,  3256,  3269,  3272,  3275,  3279,  3282,  3289,  3291,
-  3294,  3296,  3298,  3301,  3304,  3307,  3310,  3312,  3315,  3319,
-  3321,  3327,  3329,  3330,  3332,  3337,  3339,  3341,  3343,  3345,
-  3348,  3349,  3351,  3354,  3355,  3358,  3358,  3361,  3361,  3364,
-  3364,  3366,  3368,  3370,  3372,  3378,  3384,  3386,  3389,  3392,
-  3395,  3398,  3404,  3406,  3407,  3410,  3412,  3413,  3414,  3416,
-  3419,  3422,  3425,  3431,  3435,  3437,  3440,  3442,  3445,  3449,
-  3451,  3454,  3456,  3459,  3476,  3484,  3487,  3489,  3491,  3495,
-  3498,  3499,  3507,  3510,  3513,  3516,  3517,  3523,  3526,  3529,
-  3531,  3535,  3540,  3543,  3553,  3558,  3559,  3566,  3569,  3572,
-  3574,  3577,  3579,  3589,  3603,  3607,  3610,  3612,  3616,  3620,
-  3623,  3626,  3628,  3632,  3634,  3641,  3648,  3651,  3655,  3659,
-  3663,  3669,  3673,  3678,  3680,  3683,  3688,  3694,  3705,  3708,
-  3710,  3714,  3722,  3725,  3729,  3732,  3734,  3736,  3742,  3747,
-  3750,  3752,  3754,  3756,  3758,  3760,  3762,  3764,  3766,  3768,
-  3770,  3772,  3774,  3776,  3778,  3780,  3782,  3784,  3786,  3788,
-  3790,  3792,  3794,  3796,  3798,  3800,  3802,  3804,  3806,  3808,
-  3810,  3812,  3815,  3817
+  2011,  2016,  2017,  2030,  2037,  2038,  2044,  2049,  2054,  2062,
+  2063,  2070,  2073,  2077,  2080,  2084,  2089,  2092,  2096,  2099,
+  2101,  2103,  2105,  2112,  2114,  2115,  2116,  2120,  2123,  2127,
+  2130,  2136,  2138,  2141,  2144,  2147,  2153,  2156,  2159,  2161,
+  2163,  2167,  2173,  2179,  2184,  2190,  2192,  2197,  2200,  2203,
+  2205,  2207,  2211,  2215,  2220,  2223,  2228,  2231,  2234,  2240,
+  2242,  2254,  2258,  2263,  2289,  2291,  2294,  2296,  2301,  2303,
+  2305,  2307,  2309,  2311,  2315,  2323,  2326,  2328,  2332,  2339,
+  2345,  2351,  2357,  2367,  2373,  2377,  2384,  2412,  2422,  2428,
+  2431,  2434,  2436,  2440,  2442,  2446,  2449,  2453,  2461,  2464,
+  2466,  2470,  2481,  2495,  2496,  2497,  2498,  2501,  2510,  2515,
+  2521,  2523,  2528,  2530,  2532,  2534,  2536,  2538,  2541,  2551,
+  2558,  2583,  2589,  2592,  2595,  2597,  2608,  2613,  2616,  2621,
+  2624,  2631,  2641,  2644,  2651,  2661,  2663,  2666,  2668,  2671,
+  2675,  2680,  2684,  2687,  2690,  2695,  2698,  2702,  2705,  2707,
+  2711,  2713,  2720,  2722,  2725,  2728,  2733,  2737,  2742,  2752,
+  2755,  2759,  2763,  2772,  2775,  2777,  2779,  2785,  2787,  2796,
+  2799,  2801,  2803,  2805,  2809,  2812,  2815,  2817,  2819,  2821,
+  2825,  2828,  2839,  2849,  2851,  2852,  2856,  2864,  2866,  2874,
+  2877,  2879,  2881,  2883,  2887,  2890,  2893,  2895,  2897,  2899,
+  2903,  2906,  2909,  2911,  2913,  2915,  2917,  2919,  2923,  2930,
+  2934,  2939,  2943,  2948,  2950,  2954,  2957,  2959,  2963,  2965,
+  2966,  2969,  2971,  2973,  2980,  2991,  2997,  3003,  3017,  3019,
+  3023,  3037,  3039,  3041,  3045,  3051,  3064,  3067,  3072,  3085,
+  3091,  3093,  3094,  3095,  3103,  3108,  3117,  3118,  3122,  3125,
+  3131,  3137,  3140,  3142,  3144,  3146,  3150,  3154,  3158,  3161,
+  3165,  3167,  3176,  3179,  3181,  3183,  3185,  3187,  3189,  3191,
+  3193,  3197,  3201,  3205,  3209,  3211,  3213,  3215,  3217,  3219,
+  3221,  3223,  3225,  3233,  3235,  3236,  3237,  3240,  3246,  3248,
+  3253,  3255,  3258,  3271,  3274,  3277,  3281,  3284,  3291,  3293,
+  3296,  3298,  3300,  3303,  3306,  3309,  3312,  3314,  3317,  3321,
+  3323,  3329,  3331,  3332,  3334,  3339,  3341,  3343,  3345,  3347,
+  3350,  3351,  3353,  3356,  3357,  3360,  3360,  3363,  3363,  3366,
+  3366,  3368,  3370,  3372,  3374,  3380,  3386,  3388,  3391,  3394,
+  3397,  3400,  3406,  3408,  3409,  3412,  3414,  3415,  3416,  3418,
+  3421,  3424,  3427,  3433,  3437,  3439,  3442,  3444,  3447,  3451,
+  3453,  3456,  3458,  3461,  3478,  3486,  3489,  3491,  3493,  3497,
+  3500,  3501,  3509,  3512,  3515,  3518,  3519,  3525,  3528,  3531,
+  3533,  3537,  3542,  3545,  3555,  3560,  3561,  3568,  3571,  3574,
+  3576,  3579,  3581,  3591,  3605,  3609,  3612,  3614,  3618,  3622,
+  3625,  3628,  3630,  3634,  3636,  3643,  3650,  3653,  3657,  3661,
+  3665,  3671,  3675,  3680,  3682,  3685,  3690,  3696,  3707,  3710,
+  3712,  3716,  3724,  3727,  3731,  3734,  3736,  3738,  3744,  3749,
+  3752,  3754,  3756,  3758,  3760,  3762,  3764,  3766,  3768,  3770,
+  3772,  3774,  3776,  3778,  3780,  3782,  3784,  3786,  3788,  3790,
+  3792,  3794,  3796,  3798,  3800,  3802,  3804,  3806,  3808,  3810,
+  3812,  3814,  3817,  3819
 };
 #endif
 
@@ -6532,210 +6532,212 @@ case 448:
 case 449:
 #line 2056 "parse.y"
 { /* Set things up as initdcl0_innards expects.  */
+	      yyvsp[1].ttype = yyvsp[0].ttype;
 	      yyvsp[0].ttype = yyvsp[-1].ttype; 
-              yyvsp[-1].ttype = NULL_TREE; ;
+              yyvsp[-1].ftype.t = NULL_TREE;
+	      yyvsp[-1].ftype.lookups = NULL_TREE; ;
     break;}
 case 450:
-#line 2060 "parse.y"
+#line 2062 "parse.y"
 {;
     break;}
 case 451:
-#line 2062 "parse.y"
+#line 2064 "parse.y"
 { tree d = parse_decl0 (yyvsp[-2].ttype, NULL_TREE, NULL_TREE, yyvsp[0].ttype, 0);
 		  parse_end_decl (d, NULL_TREE, yyvsp[-1].ttype); ;
     break;}
 case 452:
-#line 2070 "parse.y"
+#line 2072 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 453:
-#line 2072 "parse.y"
+#line 2074 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 454:
-#line 2077 "parse.y"
+#line 2079 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 455:
-#line 2079 "parse.y"
+#line 2081 "parse.y"
 { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 456:
-#line 2084 "parse.y"
+#line 2086 "parse.y"
 { yyval.ttype = yyvsp[-2].ttype; ;
     break;}
 case 457:
-#line 2089 "parse.y"
+#line 2091 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 458:
-#line 2091 "parse.y"
+#line 2093 "parse.y"
 { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;
     break;}
 case 459:
-#line 2096 "parse.y"
+#line 2098 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 460:
-#line 2098 "parse.y"
+#line 2100 "parse.y"
 { yyval.ttype = build_tree_list (yyvsp[0].ttype, NULL_TREE); ;
     break;}
 case 461:
-#line 2100 "parse.y"
+#line 2102 "parse.y"
 { yyval.ttype = build_tree_list (yyvsp[-3].ttype, build_tree_list (NULL_TREE, yyvsp[-1].ttype)); ;
     break;}
 case 462:
-#line 2102 "parse.y"
+#line 2104 "parse.y"
 { yyval.ttype = build_tree_list (yyvsp[-5].ttype, tree_cons (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype)); ;
     break;}
 case 463:
-#line 2104 "parse.y"
+#line 2106 "parse.y"
 { yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
     break;}
 case 468:
-#line 2120 "parse.y"
+#line 2122 "parse.y"
 { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
     break;}
 case 469:
-#line 2122 "parse.y"
+#line 2124 "parse.y"
 { yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
     break;}
 case 470:
-#line 2127 "parse.y"
+#line 2129 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 471:
-#line 2129 "parse.y"
+#line 2131 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 473:
-#line 2137 "parse.y"
+#line 2139 "parse.y"
 { yyval.ttype = build_nt (CONSTRUCTOR, NULL_TREE, NULL_TREE);
 		  TREE_HAS_CONSTRUCTOR (yyval.ttype) = 1; ;
     break;}
 case 474:
-#line 2140 "parse.y"
+#line 2142 "parse.y"
 { yyval.ttype = build_nt (CONSTRUCTOR, NULL_TREE, nreverse (yyvsp[-1].ttype));
 		  TREE_HAS_CONSTRUCTOR (yyval.ttype) = 1; ;
     break;}
 case 475:
-#line 2143 "parse.y"
+#line 2145 "parse.y"
 { yyval.ttype = build_nt (CONSTRUCTOR, NULL_TREE, nreverse (yyvsp[-2].ttype));
 		  TREE_HAS_CONSTRUCTOR (yyval.ttype) = 1; ;
     break;}
 case 476:
-#line 2146 "parse.y"
+#line 2148 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 477:
-#line 2153 "parse.y"
+#line 2155 "parse.y"
 { yyval.ttype = build_tree_list (NULL_TREE, yyval.ttype); ;
     break;}
 case 478:
-#line 2155 "parse.y"
+#line 2157 "parse.y"
 { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;
     break;}
 case 479:
-#line 2158 "parse.y"
+#line 2160 "parse.y"
 { yyval.ttype = build_tree_list (yyvsp[-2].ttype, yyvsp[0].ttype); ;
     break;}
 case 480:
-#line 2160 "parse.y"
+#line 2162 "parse.y"
 { yyval.ttype = build_tree_list (yyval.ttype, yyvsp[0].ttype); ;
     break;}
 case 481:
-#line 2162 "parse.y"
+#line 2164 "parse.y"
 { yyval.ttype = tree_cons (yyvsp[-2].ttype, yyvsp[0].ttype, yyval.ttype); ;
     break;}
 case 482:
-#line 2167 "parse.y"
+#line 2169 "parse.y"
 { start_function (NULL_TREE, yyvsp[0].pi->fndecl, NULL_TREE, 
 				  (SF_DEFAULT | SF_PRE_PARSED 
 				   | SF_INCLASS_INLINE)); ;
     break;}
 case 483:
-#line 2173 "parse.y"
+#line 2175 "parse.y"
 {
 		  expand_body (finish_function ((int)yyvsp[-1].itype | 2));
 		  process_next_inline (yyvsp[-3].pi);
 		;
     break;}
 case 484:
-#line 2178 "parse.y"
+#line 2180 "parse.y"
 { 
 		  expand_body (finish_function ((int)yyvsp[0].itype | 2)); 
                   process_next_inline (yyvsp[-2].pi);
 		;
     break;}
 case 485:
-#line 2183 "parse.y"
+#line 2185 "parse.y"
 { 
 		  finish_function (2); 
 		  process_next_inline (yyvsp[-2].pi); ;
     break;}
 case 488:
-#line 2197 "parse.y"
+#line 2199 "parse.y"
 { replace_defarg (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
     break;}
 case 489:
-#line 2199 "parse.y"
+#line 2201 "parse.y"
 { replace_defarg (yyvsp[-2].ttype, error_mark_node); ;
     break;}
 case 491:
-#line 2204 "parse.y"
+#line 2206 "parse.y"
 { do_pending_defargs (); ;
     break;}
 case 492:
-#line 2206 "parse.y"
+#line 2208 "parse.y"
 { do_pending_defargs (); ;
     break;}
 case 493:
-#line 2211 "parse.y"
+#line 2213 "parse.y"
 { yyval.ttype = current_enum_type;
 		  current_enum_type = start_enum (yyvsp[-1].ttype); ;
     break;}
 case 494:
-#line 2214 "parse.y"
+#line 2216 "parse.y"
 { yyval.ftype.t = finish_enum (current_enum_type);
 		  yyval.ftype.new_type_flag = 1;
 		  current_enum_type = yyvsp[-2].ttype;
 		  check_for_missing_semicolon (yyval.ftype.t); ;
     break;}
 case 495:
-#line 2219 "parse.y"
+#line 2221 "parse.y"
 { yyval.ttype = current_enum_type;
 		  current_enum_type = start_enum (make_anon_name ()); ;
     break;}
 case 496:
-#line 2222 "parse.y"
+#line 2224 "parse.y"
 { yyval.ftype.t = finish_enum (current_enum_type);
 		  yyval.ftype.new_type_flag = 1;
 		  current_enum_type = yyvsp[-2].ttype;
 		  check_for_missing_semicolon (yyval.ftype.t); ;
     break;}
 case 497:
-#line 2227 "parse.y"
+#line 2229 "parse.y"
 { yyval.ftype.t = xref_tag (enum_type_node, yyvsp[0].ttype, 1); 
 		  yyval.ftype.new_type_flag = 0; ;
     break;}
 case 498:
-#line 2230 "parse.y"
+#line 2232 "parse.y"
 { yyval.ftype.t = xref_tag (enum_type_node, yyvsp[0].ttype, 1); 
 		  yyval.ftype.new_type_flag = 0; ;
     break;}
 case 499:
-#line 2233 "parse.y"
+#line 2235 "parse.y"
 { yyval.ftype.t = yyvsp[0].ttype;
 		  yyval.ftype.new_type_flag = 0; 
 		  if (!processing_template_decl)
 		    cp_pedwarn ("using `typename' outside of template"); ;
     break;}
 case 500:
-#line 2239 "parse.y"
+#line 2241 "parse.y"
 { yyvsp[-1].ftype.t = begin_class_definition (yyvsp[-1].ftype.t); ;
     break;}
 case 501:
-#line 2241 "parse.y"
+#line 2243 "parse.y"
 { 
 		  int semi;
 
@@ -6748,13 +6750,13 @@ case 501:
 		;
     break;}
 case 502:
-#line 2252 "parse.y"
+#line 2254 "parse.y"
 {
 		  begin_inline_definitions ();
 		;
     break;}
 case 503:
-#line 2256 "parse.y"
+#line 2258 "parse.y"
 {
 		  finish_inline_definitions ();
 		  yyval.ftype.t = yyvsp[-3].ttype;
@@ -6762,7 +6764,7 @@ case 503:
 		;
     break;}
 case 504:
-#line 2262 "parse.y"
+#line 2264 "parse.y"
 {
 		  if (yyvsp[0].ftype.new_type_flag && yyvsp[0].ftype.t != error_mark_node)
 		    pop_scope (CP_DECL_CONTEXT (TYPE_MAIN_DECL (yyvsp[0].ftype.t)));
@@ -6788,51 +6790,51 @@ case 504:
 		;
     break;}
 case 508:
-#line 2295 "parse.y"
+#line 2297 "parse.y"
 { if (pedantic && !in_system_header)
 		    pedwarn ("comma at end of enumerator list"); ;
     break;}
 case 510:
-#line 2302 "parse.y"
+#line 2304 "parse.y"
 { error ("storage class specifier `%s' not allowed after struct or class", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;
     break;}
 case 511:
-#line 2304 "parse.y"
+#line 2306 "parse.y"
 { error ("type specifier `%s' not allowed after struct or class", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;
     break;}
 case 512:
-#line 2306 "parse.y"
+#line 2308 "parse.y"
 { error ("type qualifier `%s' not allowed after struct or class", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;
     break;}
 case 513:
-#line 2308 "parse.y"
+#line 2310 "parse.y"
 { error ("no body nor ';' separates two class, struct or union declarations"); ;
     break;}
 case 514:
-#line 2310 "parse.y"
+#line 2312 "parse.y"
 { yyval.ttype = build_decl_list (yyvsp[0].ttype, yyvsp[-1].ttype); ;
     break;}
 case 515:
-#line 2315 "parse.y"
+#line 2317 "parse.y"
 { 
 		  current_aggr = yyvsp[-1].ttype; 
 		  yyval.ttype = yyvsp[0].ttype; 
 		;
     break;}
 case 516:
-#line 2323 "parse.y"
+#line 2325 "parse.y"
 { current_aggr = yyval.ttype; yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 517:
-#line 2325 "parse.y"
+#line 2327 "parse.y"
 { yyungetc ('{', 1); ;
     break;}
 case 518:
-#line 2327 "parse.y"
+#line 2329 "parse.y"
 { yyungetc (':', 1); ;
     break;}
 case 519:
-#line 2332 "parse.y"
+#line 2334 "parse.y"
 {
 		  current_aggr = yyvsp[-2].ttype;
 		  yyval.ftype.t = handle_class_head (yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype);
@@ -6840,7 +6842,7 @@ case 519:
 		;
     break;}
 case 520:
-#line 2338 "parse.y"
+#line 2340 "parse.y"
 {
 		  current_aggr = yyvsp[-3].ttype;
 		  yyval.ftype.t = handle_class_head (yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype);
@@ -6848,7 +6850,7 @@ case 520:
 		;
     break;}
 case 521:
-#line 2344 "parse.y"
+#line 2346 "parse.y"
 {
 		  current_aggr = yyvsp[-2].ttype;
 		  yyval.ftype.t = handle_class_head (yyvsp[-2].ttype, NULL_TREE, yyvsp[0].ttype);
@@ -6856,7 +6858,7 @@ case 521:
 		;
     break;}
 case 522:
-#line 2350 "parse.y"
+#line 2352 "parse.y"
 { 
 		  current_aggr = yyvsp[-1].ttype; 
 		  yyval.ftype.t = yyvsp[0].ttype;
@@ -6864,7 +6866,7 @@ case 522:
 		;
     break;}
 case 523:
-#line 2356 "parse.y"
+#line 2358 "parse.y"
 { 
 		  current_aggr = yyvsp[-2].ttype; 
 		  yyval.ftype.t = yyvsp[0].ttype;
@@ -6874,18 +6876,18 @@ case 523:
 		;
     break;}
 case 524:
-#line 2367 "parse.y"
+#line 2369 "parse.y"
 { 
 		  yyval.ftype.t = xref_tag (current_aggr, yyvsp[0].ttype, 1); 
 		  yyval.ftype.new_type_flag = 0;
 		;
     break;}
 case 525:
-#line 2372 "parse.y"
+#line 2374 "parse.y"
 { yyval.ttype = xref_tag (current_aggr, yyvsp[0].ttype, 0); ;
     break;}
 case 526:
-#line 2376 "parse.y"
+#line 2378 "parse.y"
 { 
 		  yyval.ftype.t = yyvsp[-1].ttype;
 		  yyval.ftype.new_type_flag = 0;
@@ -6894,7 +6896,7 @@ case 526:
 		;
     break;}
 case 527:
-#line 2384 "parse.y"
+#line 2386 "parse.y"
 { 
 		  if (yyvsp[-1].ftype.t != error_mark_node)
 		    {
@@ -6921,43 +6923,43 @@ case 527:
 		;
     break;}
 case 528:
-#line 2412 "parse.y"
+#line 2414 "parse.y"
 { yyval.ttype = xref_tag (yyval.ttype, make_anon_name (), 0);
 		  yyungetc ('{', 1); ;
     break;}
 case 529:
-#line 2422 "parse.y"
+#line 2424 "parse.y"
 {
 		  yyval.ftype.t = yyvsp[0].ttype;
 		  yyval.ftype.new_type_flag = 0;
 		;
     break;}
 case 531:
-#line 2431 "parse.y"
+#line 2433 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 532:
-#line 2433 "parse.y"
+#line 2435 "parse.y"
 { yyungetc(':', 1); yyval.ttype = NULL_TREE; ;
     break;}
 case 533:
-#line 2435 "parse.y"
+#line 2437 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 535:
-#line 2441 "parse.y"
+#line 2443 "parse.y"
 { yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;
     break;}
 case 536:
-#line 2446 "parse.y"
+#line 2448 "parse.y"
 { yyval.ttype = finish_base_specifier (access_default_node, yyvsp[0].ttype); ;
     break;}
 case 537:
-#line 2448 "parse.y"
+#line 2450 "parse.y"
 { yyval.ttype = finish_base_specifier (yyvsp[-2].ttype, yyvsp[0].ttype); ;
     break;}
 case 538:
-#line 2453 "parse.y"
+#line 2455 "parse.y"
 { if (yyval.ttype == error_mark_node)
 		    ;
                   else if (!TYPE_P (yyval.ttype))
@@ -6966,13 +6968,13 @@ case 538:
 		    yyval.ttype = TYPE_MAIN_DECL (yyvsp[0].ttype); ;
     break;}
 case 541:
-#line 2465 "parse.y"
+#line 2467 "parse.y"
 { if (yyvsp[-1].ttype != ridpointers[(int)RID_VIRTUAL])
 		    cp_error ("`%D' access", yyvsp[-1].ttype);
 		  yyval.ttype = access_default_virtual_node; ;
     break;}
 case 542:
-#line 2469 "parse.y"
+#line 2471 "parse.y"
 {
 		  if (yyvsp[-2].ttype != access_default_virtual_node)
 		    error ("multiple access specifiers");
@@ -6985,7 +6987,7 @@ case 542:
 		;
     break;}
 case 543:
-#line 2480 "parse.y"
+#line 2482 "parse.y"
 { if (yyvsp[-1].ttype != ridpointers[(int)RID_VIRTUAL])
 		    cp_error ("`%D' access", yyvsp[-1].ttype);
 		  else if (yyval.ttype == access_public_node)
@@ -6999,55 +7001,55 @@ case 543:
 		;
     break;}
 case 548:
-#line 2501 "parse.y"
+#line 2503 "parse.y"
 {
 		  current_access_specifier = yyvsp[-1].ttype;
                 ;
     break;}
 case 549:
-#line 2510 "parse.y"
+#line 2512 "parse.y"
 { 
 		  finish_member_declaration (yyvsp[0].ttype);
 		;
     break;}
 case 550:
-#line 2514 "parse.y"
+#line 2516 "parse.y"
 { 
 		  finish_member_declaration (yyvsp[0].ttype);
 		;
     break;}
 case 552:
-#line 2522 "parse.y"
+#line 2524 "parse.y"
 { error ("missing ';' before right brace");
 		  yyungetc ('}', 0); ;
     break;}
 case 553:
-#line 2527 "parse.y"
+#line 2529 "parse.y"
 { yyval.ttype = finish_method (yyval.ttype); ;
     break;}
 case 554:
-#line 2529 "parse.y"
+#line 2531 "parse.y"
 { yyval.ttype = finish_method (yyval.ttype); ;
     break;}
 case 555:
-#line 2531 "parse.y"
+#line 2533 "parse.y"
 { yyval.ttype = finish_method (yyval.ttype); ;
     break;}
 case 556:
-#line 2533 "parse.y"
+#line 2535 "parse.y"
 { yyval.ttype = finish_method (yyval.ttype); ;
     break;}
 case 557:
-#line 2535 "parse.y"
+#line 2537 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 558:
-#line 2537 "parse.y"
+#line 2539 "parse.y"
 { yyval.ttype = yyvsp[0].ttype;
 		  pedantic = yyvsp[-1].itype; ;
     break;}
 case 559:
-#line 2540 "parse.y"
+#line 2542 "parse.y"
 {  
 		  if (yyvsp[0].ttype)
 		    yyval.ttype = finish_member_template_decl (yyvsp[0].ttype);
@@ -7059,14 +7061,14 @@ case 559:
 		;
     break;}
 case 560:
-#line 2550 "parse.y"
+#line 2552 "parse.y"
 { 
 		  yyval.ttype = finish_member_class_template (yyvsp[-1].ftype.t); 
 		  finish_template_decl (yyvsp[-2].ttype);
 		;
     break;}
 case 561:
-#line 2561 "parse.y"
+#line 2563 "parse.y"
 {
 		  /* Most of the productions for component_decl only
 		     allow the creation of one new member, so we call
@@ -7089,7 +7091,7 @@ case 561:
 		;
     break;}
 case 562:
-#line 2582 "parse.y"
+#line 2584 "parse.y"
 { 
 		  if (!yyvsp[0].itype)
 		    grok_x_components (yyvsp[-1].ftype.t);
@@ -7097,45 +7099,45 @@ case 562:
 		;
     break;}
 case 563:
-#line 2588 "parse.y"
+#line 2590 "parse.y"
 { yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,
 				  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;
     break;}
 case 564:
-#line 2591 "parse.y"
+#line 2593 "parse.y"
 { yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,
 				  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;
     break;}
 case 565:
-#line 2594 "parse.y"
+#line 2596 "parse.y"
 { yyval.ttype = grokbitfield (NULL_TREE, NULL_TREE, yyvsp[0].ttype); ;
     break;}
 case 566:
-#line 2596 "parse.y"
+#line 2598 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 567:
-#line 2607 "parse.y"
+#line 2609 "parse.y"
 { tree specs, attrs;
 		  split_specs_attrs (yyvsp[-4].ftype.t, &specs, &attrs);
 		  yyval.ttype = grokfield (yyvsp[-3].ttype, specs, yyvsp[0].ttype, yyvsp[-2].ttype,
 				  build_tree_list (yyvsp[-1].ttype, attrs)); ;
     break;}
 case 568:
-#line 2612 "parse.y"
+#line 2614 "parse.y"
 { yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,
 				  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;
     break;}
 case 569:
-#line 2615 "parse.y"
+#line 2617 "parse.y"
 { yyval.ttype = do_class_using_decl (yyvsp[0].ttype); ;
     break;}
 case 570:
-#line 2621 "parse.y"
+#line 2623 "parse.y"
 { yyval.itype = 0; ;
     break;}
 case 571:
-#line 2623 "parse.y"
+#line 2625 "parse.y"
 { 
 		  if (PROCESSING_REAL_TEMPLATE_DECL_P ())
 		    yyvsp[0].ttype = finish_member_template_decl (yyvsp[0].ttype);
@@ -7144,7 +7146,7 @@ case 571:
 		;
     break;}
 case 572:
-#line 2630 "parse.y"
+#line 2632 "parse.y"
 { 
 		  check_multiple_declarators ();
 		  if (PROCESSING_REAL_TEMPLATE_DECL_P ())
@@ -7154,11 +7156,11 @@ case 572:
 		;
     break;}
 case 573:
-#line 2641 "parse.y"
+#line 2643 "parse.y"
 { yyval.itype = 0; ;
     break;}
 case 574:
-#line 2643 "parse.y"
+#line 2645 "parse.y"
 { 
 		  if (PROCESSING_REAL_TEMPLATE_DECL_P ())
 		    yyvsp[0].ttype = finish_member_template_decl (yyvsp[0].ttype);
@@ -7167,7 +7169,7 @@ case 574:
 		;
     break;}
 case 575:
-#line 2650 "parse.y"
+#line 2652 "parse.y"
 { 
 		  check_multiple_declarators ();
 		  if (PROCESSING_REAL_TEMPLATE_DECL_P ())
@@ -7177,75 +7179,75 @@ case 575:
 		;
     break;}
 case 580:
-#line 2671 "parse.y"
+#line 2673 "parse.y"
 { yyval.ttype = parse_field0 (yyvsp[-3].ttype, yyvsp[-4].ftype.t, yyvsp[-4].ftype.lookups,
 				     yyvsp[-1].ttype, yyvsp[-2].ttype, yyvsp[0].ttype); ;
     break;}
 case 581:
-#line 2674 "parse.y"
+#line 2676 "parse.y"
 { yyval.ttype = parse_bitfield0 (yyvsp[-3].ttype, yyvsp[-4].ftype.t, yyvsp[-4].ftype.lookups,
 					yyvsp[0].ttype, yyvsp[-1].ttype); ;
     break;}
 case 582:
-#line 2680 "parse.y"
+#line 2682 "parse.y"
 { yyval.ttype = parse_field0 (yyvsp[-3].ttype, yyvsp[-4].ftype.t, yyvsp[-4].ftype.lookups,
 				     yyvsp[-1].ttype, yyvsp[-2].ttype, yyvsp[0].ttype); ;
     break;}
 case 583:
-#line 2683 "parse.y"
+#line 2685 "parse.y"
 { yyval.ttype = parse_field0 (yyvsp[-3].ttype, yyvsp[-4].ftype.t, yyvsp[-4].ftype.lookups,
 				     yyvsp[-1].ttype, yyvsp[-2].ttype, yyvsp[0].ttype); ;
     break;}
 case 584:
-#line 2686 "parse.y"
+#line 2688 "parse.y"
 { yyval.ttype = parse_bitfield0 (yyvsp[-3].ttype, yyvsp[-4].ftype.t, yyvsp[-4].ftype.lookups,
 					yyvsp[0].ttype, yyvsp[-1].ttype); ;
     break;}
 case 585:
-#line 2689 "parse.y"
+#line 2691 "parse.y"
 { yyval.ttype = parse_bitfield0 (NULL_TREE, yyvsp[-3].ftype.t,
 					yyvsp[-3].ftype.lookups, yyvsp[0].ttype, yyvsp[-1].ttype); ;
     break;}
 case 586:
-#line 2695 "parse.y"
+#line 2697 "parse.y"
 { yyval.ttype = parse_field (yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[-2].ttype, yyvsp[0].ttype); ;
     break;}
 case 587:
-#line 2697 "parse.y"
+#line 2699 "parse.y"
 { yyval.ttype = parse_bitfield (yyvsp[-3].ttype, yyvsp[0].ttype, yyvsp[-1].ttype); ;
     break;}
 case 588:
-#line 2702 "parse.y"
+#line 2704 "parse.y"
 { yyval.ttype = parse_field (yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[-2].ttype, yyvsp[0].ttype); ;
     break;}
 case 589:
-#line 2704 "parse.y"
+#line 2706 "parse.y"
 { yyval.ttype = parse_bitfield (yyvsp[-3].ttype, yyvsp[0].ttype, yyvsp[-1].ttype); ;
     break;}
 case 590:
-#line 2706 "parse.y"
+#line 2708 "parse.y"
 { yyval.ttype = parse_bitfield (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
     break;}
 case 595:
-#line 2725 "parse.y"
+#line 2727 "parse.y"
 { build_enumerator (yyvsp[0].ttype, NULL_TREE, current_enum_type); ;
     break;}
 case 596:
-#line 2727 "parse.y"
+#line 2729 "parse.y"
 { build_enumerator (yyvsp[-2].ttype, yyvsp[0].ttype, current_enum_type); ;
     break;}
 case 597:
-#line 2733 "parse.y"
+#line 2735 "parse.y"
 { yyval.ftype.t = build_decl_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); 
 		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
     break;}
 case 598:
-#line 2736 "parse.y"
+#line 2738 "parse.y"
 { yyval.ftype.t = build_decl_list (yyvsp[0].ftype.t, NULL_TREE); 
 		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;
     break;}
 case 599:
-#line 2741 "parse.y"
+#line 2743 "parse.y"
 {
 		  if (pedantic)
 		    pedwarn ("ISO C++ forbids array dimensions with parenthesized type in new");
@@ -7255,41 +7257,41 @@ case 599:
 		;
     break;}
 case 600:
-#line 2752 "parse.y"
+#line 2754 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 601:
-#line 2754 "parse.y"
+#line 2756 "parse.y"
 { yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;
     break;}
 case 602:
-#line 2759 "parse.y"
+#line 2761 "parse.y"
 { yyval.ftype.t = hash_tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
 		  yyval.ftype.new_type_flag = 0; ;
     break;}
 case 603:
-#line 2762 "parse.y"
+#line 2764 "parse.y"
 { yyval.ftype.t = hash_tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ftype.t); 
 		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
     break;}
 case 604:
-#line 2772 "parse.y"
+#line 2774 "parse.y"
 { yyval.ttype = yyvsp[-1].ttype; ;
     break;}
 case 605:
-#line 2774 "parse.y"
+#line 2776 "parse.y"
 { yyval.ttype = yyvsp[-1].ttype; ;
     break;}
 case 606:
-#line 2776 "parse.y"
+#line 2778 "parse.y"
 { yyval.ttype = empty_parms (); ;
     break;}
 case 607:
-#line 2778 "parse.y"
+#line 2780 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 609:
-#line 2786 "parse.y"
+#line 2788 "parse.y"
 {
 		  /* Provide support for '(' attributes '*' declarator ')'
 		     etc */
@@ -7297,51 +7299,51 @@ case 609:
 		;
     break;}
 case 610:
-#line 2796 "parse.y"
+#line 2798 "parse.y"
 { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
     break;}
 case 611:
-#line 2798 "parse.y"
+#line 2800 "parse.y"
 { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
     break;}
 case 612:
-#line 2800 "parse.y"
+#line 2802 "parse.y"
 { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;
     break;}
 case 613:
-#line 2802 "parse.y"
+#line 2804 "parse.y"
 { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;
     break;}
 case 614:
-#line 2804 "parse.y"
+#line 2806 "parse.y"
 { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
 		;
     break;}
 case 616:
-#line 2812 "parse.y"
+#line 2814 "parse.y"
 { yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 617:
-#line 2814 "parse.y"
+#line 2816 "parse.y"
 { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;
     break;}
 case 618:
-#line 2816 "parse.y"
+#line 2818 "parse.y"
 { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;
     break;}
 case 619:
-#line 2818 "parse.y"
+#line 2820 "parse.y"
 { yyval.ttype = yyvsp[-1].ttype; ;
     break;}
 case 620:
-#line 2820 "parse.y"
+#line 2822 "parse.y"
 { push_nested_class (yyvsp[-1].ttype, 3);
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype);
 		  TREE_COMPLEXITY (yyval.ttype) = current_class_depth; ;
     break;}
 case 622:
-#line 2828 "parse.y"
+#line 2830 "parse.y"
 {
 		  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
 		    {
@@ -7353,7 +7355,7 @@ case 622:
 		;
     break;}
 case 623:
-#line 2838 "parse.y"
+#line 2840 "parse.y"
 {
 		  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
 		    yyval.ttype = IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype);
@@ -7363,15 +7365,15 @@ case 623:
 		;
     break;}
 case 626:
-#line 2851 "parse.y"
+#line 2853 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 627:
-#line 2856 "parse.y"
+#line 2858 "parse.y"
 { yyval.ttype = get_type_decl (yyvsp[0].ttype); ;
     break;}
 case 629:
-#line 2865 "parse.y"
+#line 2867 "parse.y"
 {
 		  /* Provide support for '(' attributes '*' declarator ')'
 		     etc */
@@ -7379,133 +7381,133 @@ case 629:
 		;
     break;}
 case 630:
-#line 2874 "parse.y"
+#line 2876 "parse.y"
 { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
     break;}
 case 631:
-#line 2876 "parse.y"
+#line 2878 "parse.y"
 { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
     break;}
 case 632:
-#line 2878 "parse.y"
+#line 2880 "parse.y"
 { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;
     break;}
 case 633:
-#line 2880 "parse.y"
+#line 2882 "parse.y"
 { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;
     break;}
 case 634:
-#line 2882 "parse.y"
+#line 2884 "parse.y"
 { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
 		;
     break;}
 case 636:
-#line 2890 "parse.y"
+#line 2892 "parse.y"
 { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
     break;}
 case 637:
-#line 2892 "parse.y"
+#line 2894 "parse.y"
 { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
     break;}
 case 638:
-#line 2894 "parse.y"
+#line 2896 "parse.y"
 { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;
     break;}
 case 639:
-#line 2896 "parse.y"
+#line 2898 "parse.y"
 { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;
     break;}
 case 640:
-#line 2898 "parse.y"
+#line 2900 "parse.y"
 { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
 		;
     break;}
 case 642:
-#line 2906 "parse.y"
+#line 2908 "parse.y"
 { yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 643:
-#line 2908 "parse.y"
+#line 2910 "parse.y"
 { yyval.ttype = yyvsp[-1].ttype; ;
     break;}
 case 644:
-#line 2910 "parse.y"
+#line 2912 "parse.y"
 { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;
     break;}
 case 645:
-#line 2912 "parse.y"
+#line 2914 "parse.y"
 { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;
     break;}
 case 646:
-#line 2914 "parse.y"
+#line 2916 "parse.y"
 { enter_scope_of (yyvsp[0].ttype); ;
     break;}
 case 647:
-#line 2916 "parse.y"
+#line 2918 "parse.y"
 { enter_scope_of (yyvsp[0].ttype); yyval.ttype = yyvsp[0].ttype;;
     break;}
 case 648:
-#line 2918 "parse.y"
+#line 2920 "parse.y"
 { yyval.ttype = build_parse_node (SCOPE_REF, global_namespace, yyvsp[0].ttype);
 		  enter_scope_of (yyval.ttype); 
 		;
     break;}
 case 649:
-#line 2922 "parse.y"
+#line 2924 "parse.y"
 { got_scope = NULL_TREE;
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype);
 		  enter_scope_of (yyval.ttype);
 		;
     break;}
 case 650:
-#line 2930 "parse.y"
+#line 2932 "parse.y"
 { got_scope = NULL_TREE;
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype); ;
     break;}
 case 651:
-#line 2933 "parse.y"
+#line 2935 "parse.y"
 { got_scope = NULL_TREE;
  		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 652:
-#line 2939 "parse.y"
+#line 2941 "parse.y"
 { got_scope = NULL_TREE;
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype); ;
     break;}
 case 653:
-#line 2942 "parse.y"
+#line 2944 "parse.y"
 { got_scope = NULL_TREE;
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 655:
-#line 2949 "parse.y"
+#line 2951 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 656:
-#line 2954 "parse.y"
+#line 2956 "parse.y"
 { yyval.ttype = build_functional_cast (yyvsp[-3].ftype.t, yyvsp[-1].ttype); ;
     break;}
 case 657:
-#line 2956 "parse.y"
+#line 2958 "parse.y"
 { yyval.ttype = reparse_decl_as_expr (yyvsp[-3].ftype.t, yyvsp[-1].ttype); ;
     break;}
 case 658:
-#line 2958 "parse.y"
+#line 2960 "parse.y"
 { yyval.ttype = reparse_absdcl_as_expr (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
     break;}
 case 663:
-#line 2970 "parse.y"
+#line 2972 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 664:
-#line 2972 "parse.y"
+#line 2974 "parse.y"
 { got_scope = yyval.ttype 
 		    = make_typename_type (yyvsp[-3].ttype, yyvsp[-1].ttype, /*complain=*/1); ;
     break;}
 case 665:
-#line 2980 "parse.y"
+#line 2982 "parse.y"
 {
 		  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE)
 		    {
@@ -7517,7 +7519,7 @@ case 665:
 		;
     break;}
 case 666:
-#line 2990 "parse.y"
+#line 2992 "parse.y"
 {
 		  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE)
 		    yyval.ttype = lastiddecl;
@@ -7525,7 +7527,7 @@ case 666:
 		;
     break;}
 case 667:
-#line 2996 "parse.y"
+#line 2998 "parse.y"
 {
 		  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)
 		    yyval.ttype = lastiddecl;
@@ -7533,15 +7535,15 @@ case 667:
 		;
     break;}
 case 668:
-#line 3002 "parse.y"
+#line 3004 "parse.y"
 { got_scope = yyval.ttype = complete_type (TREE_TYPE (yyvsp[-1].ttype)); ;
     break;}
 case 670:
-#line 3018 "parse.y"
+#line 3020 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 671:
-#line 3023 "parse.y"
+#line 3025 "parse.y"
 {
 		  if (TYPE_P (yyvsp[-1].ttype))
 		    yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype, /*complain=*/1);
@@ -7556,26 +7558,26 @@ case 671:
 		;
     break;}
 case 672:
-#line 3036 "parse.y"
+#line 3038 "parse.y"
 { yyval.ttype = TREE_TYPE (yyvsp[0].ttype); ;
     break;}
 case 673:
-#line 3038 "parse.y"
+#line 3040 "parse.y"
 { yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype, /*complain=*/1); ;
     break;}
 case 674:
-#line 3040 "parse.y"
+#line 3042 "parse.y"
 { yyval.ttype = make_typename_type (yyvsp[-2].ttype, yyvsp[0].ttype, /*complain=*/1); ;
     break;}
 case 675:
-#line 3045 "parse.y"
+#line 3047 "parse.y"
 {
 		  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
 		    cp_error ("`%T' is not a class or namespace", yyvsp[0].ttype);
 		;
     break;}
 case 676:
-#line 3050 "parse.y"
+#line 3052 "parse.y"
 {
 		  if (TYPE_P (yyvsp[-1].ttype))
 		    yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype, /*complain=*/1);
@@ -7590,17 +7592,17 @@ case 676:
 		;
     break;}
 case 677:
-#line 3063 "parse.y"
+#line 3065 "parse.y"
 { got_scope = yyval.ttype 
 		    = make_typename_type (yyvsp[-2].ttype, yyvsp[-1].ttype, /*complain=*/1); ;
     break;}
 case 678:
-#line 3066 "parse.y"
+#line 3068 "parse.y"
 { got_scope = yyval.ttype 
 		    = make_typename_type (yyvsp[-3].ttype, yyvsp[-1].ttype, /*complain=*/1); ;
     break;}
 case 679:
-#line 3072 "parse.y"
+#line 3074 "parse.y"
 {
 		  if (TREE_CODE (yyvsp[-1].ttype) != IDENTIFIER_NODE)
 		    yyvsp[-1].ttype = lastiddecl;
@@ -7614,7 +7616,7 @@ case 679:
 		;
     break;}
 case 680:
-#line 3084 "parse.y"
+#line 3086 "parse.y"
 {
 		  if (TREE_CODE (yyvsp[-1].ttype) != IDENTIFIER_NODE)
 		    yyval.ttype = lastiddecl;
@@ -7622,11 +7624,11 @@ case 680:
 		;
     break;}
 case 681:
-#line 3090 "parse.y"
+#line 3092 "parse.y"
 { got_scope = yyval.ttype = complete_type (TREE_TYPE (yyval.ttype)); ;
     break;}
 case 684:
-#line 3094 "parse.y"
+#line 3096 "parse.y"
 {
 		  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)
 		    yyval.ttype = lastiddecl;
@@ -7634,11 +7636,11 @@ case 684:
 		;
     break;}
 case 685:
-#line 3103 "parse.y"
+#line 3105 "parse.y"
 { yyval.ttype = build_min_nt (TEMPLATE_ID_EXPR, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
     break;}
 case 686:
-#line 3108 "parse.y"
+#line 3110 "parse.y"
 {
 		  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
 		    yyval.ttype = IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype);
@@ -7648,59 +7650,59 @@ case 686:
 		;
     break;}
 case 688:
-#line 3117 "parse.y"
+#line 3119 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 689:
-#line 3122 "parse.y"
+#line 3124 "parse.y"
 { got_scope = NULL_TREE; ;
     break;}
 case 690:
-#line 3124 "parse.y"
+#line 3126 "parse.y"
 { yyval.ttype = yyvsp[-1].ttype; got_scope = NULL_TREE; ;
     break;}
 case 691:
-#line 3131 "parse.y"
+#line 3133 "parse.y"
 { got_scope = void_type_node; ;
     break;}
 case 692:
-#line 3137 "parse.y"
+#line 3139 "parse.y"
 { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 693:
-#line 3139 "parse.y"
+#line 3141 "parse.y"
 { yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;
     break;}
 case 694:
-#line 3141 "parse.y"
+#line 3143 "parse.y"
 { yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 695:
-#line 3143 "parse.y"
+#line 3145 "parse.y"
 { yyval.ttype = make_reference_declarator (yyvsp[0].ttype, NULL_TREE); ;
     break;}
 case 696:
-#line 3145 "parse.y"
+#line 3147 "parse.y"
 { tree arg = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE);
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, arg);
 		;
     break;}
 case 697:
-#line 3149 "parse.y"
+#line 3151 "parse.y"
 { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
 		;
     break;}
 case 699:
-#line 3158 "parse.y"
+#line 3160 "parse.y"
 { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;
     break;}
 case 700:
-#line 3160 "parse.y"
+#line 3162 "parse.y"
 { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;
     break;}
 case 702:
-#line 3166 "parse.y"
+#line 3168 "parse.y"
 {
 		  /* Provide support for '(' attributes '*' declarator ')'
 		     etc */
@@ -7708,96 +7710,96 @@ case 702:
 		;
     break;}
 case 703:
-#line 3176 "parse.y"
+#line 3178 "parse.y"
 { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
     break;}
 case 704:
-#line 3178 "parse.y"
+#line 3180 "parse.y"
 { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;
     break;}
 case 705:
-#line 3180 "parse.y"
+#line 3182 "parse.y"
 { yyval.ttype = make_pointer_declarator (yyvsp[0].ftype.t, NULL_TREE); ;
     break;}
 case 706:
-#line 3182 "parse.y"
+#line 3184 "parse.y"
 { yyval.ttype = make_pointer_declarator (NULL_TREE, NULL_TREE); ;
     break;}
 case 707:
-#line 3184 "parse.y"
+#line 3186 "parse.y"
 { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
     break;}
 case 708:
-#line 3186 "parse.y"
+#line 3188 "parse.y"
 { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;
     break;}
 case 709:
-#line 3188 "parse.y"
+#line 3190 "parse.y"
 { yyval.ttype = make_reference_declarator (yyvsp[0].ftype.t, NULL_TREE); ;
     break;}
 case 710:
-#line 3190 "parse.y"
+#line 3192 "parse.y"
 { yyval.ttype = make_reference_declarator (NULL_TREE, NULL_TREE); ;
     break;}
 case 711:
-#line 3192 "parse.y"
+#line 3194 "parse.y"
 { tree arg = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE);
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, arg);
 		;
     break;}
 case 712:
-#line 3196 "parse.y"
+#line 3198 "parse.y"
 { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
 		;
     break;}
 case 714:
-#line 3205 "parse.y"
+#line 3207 "parse.y"
 { yyval.ttype = yyvsp[-1].ttype; ;
     break;}
 case 715:
-#line 3208 "parse.y"
+#line 3210 "parse.y"
 { yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 716:
-#line 3210 "parse.y"
+#line 3212 "parse.y"
 { yyval.ttype = make_call_declarator (yyval.ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 717:
-#line 3212 "parse.y"
+#line 3214 "parse.y"
 { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;
     break;}
 case 718:
-#line 3214 "parse.y"
+#line 3216 "parse.y"
 { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;
     break;}
 case 719:
-#line 3216 "parse.y"
+#line 3218 "parse.y"
 { yyval.ttype = make_call_declarator (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 720:
-#line 3218 "parse.y"
+#line 3220 "parse.y"
 { set_quals_and_spec (yyval.ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 721:
-#line 3220 "parse.y"
+#line 3222 "parse.y"
 { set_quals_and_spec (yyval.ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 722:
-#line 3222 "parse.y"
+#line 3224 "parse.y"
 { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;
     break;}
 case 723:
-#line 3224 "parse.y"
+#line 3226 "parse.y"
 { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, NULL_TREE); ;
     break;}
 case 730:
-#line 3247 "parse.y"
+#line 3249 "parse.y"
 { if (pedantic)
 		    pedwarn ("ISO C++ forbids label declarations"); ;
     break;}
 case 733:
-#line 3258 "parse.y"
+#line 3260 "parse.y"
 { 
 		  while (yyvsp[-1].ttype)
 		    {
@@ -7807,193 +7809,193 @@ case 733:
 		;
     break;}
 case 734:
-#line 3271 "parse.y"
+#line 3273 "parse.y"
 {;
     break;}
 case 736:
-#line 3277 "parse.y"
+#line 3279 "parse.y"
 { yyval.ttype = begin_compound_stmt (0); ;
     break;}
 case 737:
-#line 3279 "parse.y"
+#line 3281 "parse.y"
 { yyval.ttype = finish_compound_stmt (0, yyvsp[-1].ttype); ;
     break;}
 case 738:
-#line 3284 "parse.y"
+#line 3286 "parse.y"
 {
 		  yyval.ttype = begin_if_stmt ();
 		  cond_stmt_keyword = "if";
 		;
     break;}
 case 739:
-#line 3289 "parse.y"
+#line 3291 "parse.y"
 { finish_if_stmt_cond (yyvsp[0].ttype, yyvsp[-1].ttype); ;
     break;}
 case 740:
-#line 3291 "parse.y"
+#line 3293 "parse.y"
 { yyval.ttype = finish_then_clause (yyvsp[-3].ttype); ;
     break;}
 case 742:
-#line 3296 "parse.y"
+#line 3298 "parse.y"
 { yyval.ttype = begin_compound_stmt (0); ;
     break;}
 case 743:
-#line 3298 "parse.y"
+#line 3300 "parse.y"
 { yyval.ttype = finish_compound_stmt (0, yyvsp[-1].ttype); ;
     break;}
 case 744:
-#line 3303 "parse.y"
+#line 3305 "parse.y"
 {;
     break;}
 case 746:
-#line 3309 "parse.y"
+#line 3311 "parse.y"
 { finish_stmt (); ;
     break;}
 case 747:
-#line 3311 "parse.y"
+#line 3313 "parse.y"
 { finish_expr_stmt (yyvsp[-1].ttype); ;
     break;}
 case 748:
-#line 3313 "parse.y"
+#line 3315 "parse.y"
 { begin_else_clause (); ;
     break;}
 case 749:
-#line 3315 "parse.y"
+#line 3317 "parse.y"
 { 
 		  finish_else_clause (yyvsp[-3].ttype); 
 		  finish_if_stmt ();
 		;
     break;}
 case 750:
-#line 3320 "parse.y"
+#line 3322 "parse.y"
 { finish_if_stmt (); ;
     break;}
 case 751:
-#line 3322 "parse.y"
+#line 3324 "parse.y"
 {
 		  yyval.ttype = begin_while_stmt ();
 		  cond_stmt_keyword = "while";
 		;
     break;}
 case 752:
-#line 3327 "parse.y"
+#line 3329 "parse.y"
 { finish_while_stmt_cond (yyvsp[0].ttype, yyvsp[-1].ttype); ;
     break;}
 case 753:
-#line 3329 "parse.y"
+#line 3331 "parse.y"
 { finish_while_stmt (yyvsp[-3].ttype); ;
     break;}
 case 754:
-#line 3331 "parse.y"
+#line 3333 "parse.y"
 { yyval.ttype = begin_do_stmt (); ;
     break;}
 case 755:
-#line 3333 "parse.y"
+#line 3335 "parse.y"
 {
 		  finish_do_body (yyvsp[-2].ttype);
 		  cond_stmt_keyword = "do";
 		;
     break;}
 case 756:
-#line 3338 "parse.y"
+#line 3340 "parse.y"
 { finish_do_stmt (yyvsp[-1].ttype, yyvsp[-5].ttype); ;
     break;}
 case 757:
-#line 3340 "parse.y"
+#line 3342 "parse.y"
 { yyval.ttype = begin_for_stmt (); ;
     break;}
 case 758:
-#line 3342 "parse.y"
+#line 3344 "parse.y"
 { finish_for_init_stmt (yyvsp[-2].ttype); ;
     break;}
 case 759:
-#line 3344 "parse.y"
+#line 3346 "parse.y"
 { finish_for_cond (yyvsp[-1].ttype, yyvsp[-5].ttype); ;
     break;}
 case 760:
-#line 3346 "parse.y"
+#line 3348 "parse.y"
 { finish_for_expr (yyvsp[-1].ttype, yyvsp[-8].ttype); ;
     break;}
 case 761:
-#line 3348 "parse.y"
+#line 3350 "parse.y"
 { finish_for_stmt (yyvsp[-10].ttype); ;
     break;}
 case 762:
-#line 3350 "parse.y"
+#line 3352 "parse.y"
 { yyval.ttype = begin_switch_stmt (); ;
     break;}
 case 763:
-#line 3352 "parse.y"
+#line 3354 "parse.y"
 { finish_switch_cond (yyvsp[-1].ttype, yyvsp[-3].ttype); ;
     break;}
 case 764:
-#line 3354 "parse.y"
+#line 3356 "parse.y"
 { finish_switch_stmt (yyvsp[-5].ttype); ;
     break;}
 case 765:
-#line 3356 "parse.y"
+#line 3358 "parse.y"
 { finish_case_label (yyvsp[-1].ttype, NULL_TREE); ;
     break;}
 case 767:
-#line 3359 "parse.y"
+#line 3361 "parse.y"
 { finish_case_label (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
     break;}
 case 769:
-#line 3362 "parse.y"
+#line 3364 "parse.y"
 { finish_case_label (NULL_TREE, NULL_TREE); ;
     break;}
 case 771:
-#line 3365 "parse.y"
+#line 3367 "parse.y"
 { finish_break_stmt (); ;
     break;}
 case 772:
-#line 3367 "parse.y"
+#line 3369 "parse.y"
 { finish_continue_stmt (); ;
     break;}
 case 773:
-#line 3369 "parse.y"
+#line 3371 "parse.y"
 { finish_return_stmt (NULL_TREE); ;
     break;}
 case 774:
-#line 3371 "parse.y"
+#line 3373 "parse.y"
 { finish_return_stmt (yyvsp[-1].ttype); ;
     break;}
 case 775:
-#line 3373 "parse.y"
+#line 3375 "parse.y"
 { 
 		  finish_asm_stmt (yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE,
 				   NULL_TREE); 
 		;
     break;}
 case 776:
-#line 3379 "parse.y"
+#line 3381 "parse.y"
 { 
 		  finish_asm_stmt (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE,
 				   NULL_TREE); 
 		;
     break;}
 case 777:
-#line 3385 "parse.y"
+#line 3387 "parse.y"
 { finish_asm_stmt (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE); ;
     break;}
 case 778:
-#line 3387 "parse.y"
+#line 3389 "parse.y"
 { finish_asm_stmt (yyvsp[-6].ttype, yyvsp[-4].ttype, NULL_TREE, yyvsp[-2].ttype, NULL_TREE); ;
     break;}
 case 779:
-#line 3391 "parse.y"
+#line 3393 "parse.y"
 { finish_asm_stmt (yyvsp[-10].ttype, yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype); ;
     break;}
 case 780:
-#line 3394 "parse.y"
+#line 3396 "parse.y"
 { finish_asm_stmt (yyvsp[-8].ttype, yyvsp[-6].ttype, NULL_TREE, yyvsp[-4].ttype, yyvsp[-2].ttype); ;
     break;}
 case 781:
-#line 3397 "parse.y"
+#line 3399 "parse.y"
 { finish_asm_stmt (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, NULL_TREE, yyvsp[-2].ttype); ;
     break;}
 case 782:
-#line 3399 "parse.y"
+#line 3401 "parse.y"
 { 
 		  if (pedantic)
 		    pedwarn ("ISO C++ forbids computed gotos");
@@ -8001,67 +8003,67 @@ case 782:
 		;
     break;}
 case 783:
-#line 3405 "parse.y"
+#line 3407 "parse.y"
 { finish_goto_stmt (yyvsp[-1].ttype); ;
     break;}
 case 785:
-#line 3408 "parse.y"
+#line 3410 "parse.y"
 { error ("label must be followed by statement");
 		  yyungetc ('}', 0); ;
     break;}
 case 786:
-#line 3411 "parse.y"
+#line 3413 "parse.y"
 { finish_stmt (); ;
     break;}
 case 789:
-#line 3415 "parse.y"
+#line 3417 "parse.y"
 { do_local_using_decl (yyvsp[0].ttype); ;
     break;}
 case 791:
-#line 3421 "parse.y"
+#line 3423 "parse.y"
 { yyval.ttype = begin_function_try_block (); ;
     break;}
 case 792:
-#line 3423 "parse.y"
+#line 3425 "parse.y"
 { finish_function_try_block (yyvsp[-2].ttype); ;
     break;}
 case 793:
-#line 3425 "parse.y"
+#line 3427 "parse.y"
 {
 		  finish_function_handler_sequence (yyvsp[-4].ttype);
 		  yyval.itype = yyvsp[-3].itype;
 		;
     break;}
 case 794:
-#line 3433 "parse.y"
+#line 3435 "parse.y"
 { yyval.ttype = begin_try_block (); ;
     break;}
 case 795:
-#line 3435 "parse.y"
+#line 3437 "parse.y"
 { finish_try_block (yyvsp[-1].ttype); ;
     break;}
 case 796:
-#line 3437 "parse.y"
+#line 3439 "parse.y"
 { finish_handler_sequence (yyvsp[-3].ttype); ;
     break;}
 case 799:
-#line 3447 "parse.y"
+#line 3449 "parse.y"
 { yyval.ttype = begin_handler(); ;
     break;}
 case 800:
-#line 3449 "parse.y"
+#line 3451 "parse.y"
 { yyval.ttype = finish_handler_parms (yyvsp[0].ttype, yyvsp[-1].ttype); ;
     break;}
 case 801:
-#line 3451 "parse.y"
+#line 3453 "parse.y"
 { finish_handler (yyvsp[-1].ttype, yyvsp[-3].ttype); ;
     break;}
 case 804:
-#line 3461 "parse.y"
+#line 3463 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 805:
-#line 3477 "parse.y"
+#line 3479 "parse.y"
 { 
 		  check_for_new_type ("inside exception declarations", yyvsp[-1].ftype);
 		  yyval.ttype = start_handler_parms (TREE_PURPOSE (yyvsp[-1].ftype.t),
@@ -8069,97 +8071,97 @@ case 805:
 		;
     break;}
 case 806:
-#line 3486 "parse.y"
+#line 3488 "parse.y"
 { finish_label_stmt (yyvsp[-1].ttype); ;
     break;}
 case 807:
-#line 3488 "parse.y"
+#line 3490 "parse.y"
 { finish_label_stmt (yyvsp[-1].ttype); ;
     break;}
 case 808:
-#line 3490 "parse.y"
+#line 3492 "parse.y"
 { finish_label_stmt (yyvsp[-1].ttype); ;
     break;}
 case 809:
-#line 3492 "parse.y"
+#line 3494 "parse.y"
 { finish_label_stmt (yyvsp[-1].ttype); ;
     break;}
 case 810:
-#line 3497 "parse.y"
+#line 3499 "parse.y"
 { finish_expr_stmt (yyvsp[-1].ttype); ;
     break;}
 case 812:
-#line 3500 "parse.y"
+#line 3502 "parse.y"
 { if (pedantic)
 		    pedwarn ("ISO C++ forbids compound statements inside for initializations");
 		;
     break;}
 case 813:
-#line 3509 "parse.y"
+#line 3511 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 815:
-#line 3515 "parse.y"
+#line 3517 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 817:
-#line 3518 "parse.y"
+#line 3520 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 818:
-#line 3525 "parse.y"
+#line 3527 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 821:
-#line 3532 "parse.y"
+#line 3534 "parse.y"
 { yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;
     break;}
 case 822:
-#line 3537 "parse.y"
+#line 3539 "parse.y"
 { yyval.ttype = build_tree_list (yyval.ttype, yyvsp[-1].ttype); ;
     break;}
 case 823:
-#line 3542 "parse.y"
+#line 3544 "parse.y"
 { yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), NULL_TREE);;
     break;}
 case 824:
-#line 3544 "parse.y"
+#line 3546 "parse.y"
 { yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), yyvsp[-2].ttype); ;
     break;}
 case 825:
-#line 3555 "parse.y"
+#line 3557 "parse.y"
 {
 		  yyval.ttype = empty_parms();
 		;
     break;}
 case 827:
-#line 3560 "parse.y"
+#line 3562 "parse.y"
 { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE, yyvsp[0].ftype.t), 0);
 		  check_for_new_type ("inside parameter list", yyvsp[0].ftype); ;
     break;}
 case 828:
-#line 3568 "parse.y"
+#line 3570 "parse.y"
 { yyval.ttype = finish_parmlist (yyval.ttype, 0); ;
     break;}
 case 829:
-#line 3570 "parse.y"
+#line 3572 "parse.y"
 { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;
     break;}
 case 830:
-#line 3573 "parse.y"
+#line 3575 "parse.y"
 { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;
     break;}
 case 831:
-#line 3575 "parse.y"
+#line 3577 "parse.y"
 { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE,
 							 yyvsp[-1].ftype.t), 1); ;
     break;}
 case 832:
-#line 3578 "parse.y"
+#line 3580 "parse.y"
 { yyval.ttype = finish_parmlist (NULL_TREE, 1); ;
     break;}
 case 833:
-#line 3580 "parse.y"
+#line 3582 "parse.y"
 {
 		  /* This helps us recover from really nasty
 		     parse errors, for example, a missing right
@@ -8171,7 +8173,7 @@ case 833:
 		;
     break;}
 case 834:
-#line 3590 "parse.y"
+#line 3592 "parse.y"
 {
 		  /* This helps us recover from really nasty
 		     parse errors, for example, a missing right
@@ -8184,99 +8186,99 @@ case 834:
 		;
     break;}
 case 835:
-#line 3605 "parse.y"
+#line 3607 "parse.y"
 { maybe_snarf_defarg (); ;
     break;}
 case 836:
-#line 3607 "parse.y"
+#line 3609 "parse.y"
 { yyval.ttype = yyvsp[0].ttype; ;
     break;}
 case 839:
-#line 3618 "parse.y"
+#line 3620 "parse.y"
 { check_for_new_type ("in a parameter list", yyvsp[0].ftype);
 		  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ftype.t); ;
     break;}
 case 840:
-#line 3621 "parse.y"
+#line 3623 "parse.y"
 { check_for_new_type ("in a parameter list", yyvsp[-1].ftype);
 		  yyval.ttype = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t); ;
     break;}
 case 841:
-#line 3624 "parse.y"
+#line 3626 "parse.y"
 { check_for_new_type ("in a parameter list", yyvsp[0].ftype);
 		  yyval.ttype = chainon (yyval.ttype, yyvsp[0].ftype.t); ;
     break;}
 case 842:
-#line 3627 "parse.y"
+#line 3629 "parse.y"
 { yyval.ttype = chainon (yyval.ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
     break;}
 case 843:
-#line 3629 "parse.y"
+#line 3631 "parse.y"
 { yyval.ttype = chainon (yyval.ttype, build_tree_list (yyvsp[0].ttype, yyvsp[-2].ttype)); ;
     break;}
 case 845:
-#line 3635 "parse.y"
+#line 3637 "parse.y"
 { check_for_new_type ("in a parameter list", yyvsp[-1].ftype);
 		  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[-1].ftype.t); ;
     break;}
 case 846:
-#line 3645 "parse.y"
+#line 3647 "parse.y"
 { tree specs = strip_attrs (yyvsp[-1].ftype.t);
 		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;
 		  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); ;
     break;}
 case 847:
-#line 3649 "parse.y"
+#line 3651 "parse.y"
 { yyval.ftype.t = build_tree_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); 
 		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
     break;}
 case 848:
-#line 3652 "parse.y"
+#line 3654 "parse.y"
 { yyval.ftype.t = build_tree_list (build_decl_list (NULL_TREE, yyvsp[-1].ftype.t),
 					  yyvsp[0].ttype); 
 		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
     break;}
 case 849:
-#line 3656 "parse.y"
+#line 3658 "parse.y"
 { tree specs = strip_attrs (yyvsp[-1].ftype.t);
 		  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype);
 		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
     break;}
 case 850:
-#line 3660 "parse.y"
+#line 3662 "parse.y"
 { tree specs = strip_attrs (yyvsp[0].ftype.t);
 		  yyval.ftype.t = build_tree_list (specs, NULL_TREE); 
 		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;
     break;}
 case 851:
-#line 3664 "parse.y"
+#line 3666 "parse.y"
 { tree specs = strip_attrs (yyvsp[-1].ftype.t);
 		  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); 
 		  yyval.ftype.new_type_flag = 0; ;
     break;}
 case 852:
-#line 3671 "parse.y"
+#line 3673 "parse.y"
 { yyval.ftype.t = build_tree_list (NULL_TREE, yyvsp[0].ftype.t);
 		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag;  ;
     break;}
 case 853:
-#line 3674 "parse.y"
+#line 3676 "parse.y"
 { yyval.ftype.t = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t);
 		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;  ;
     break;}
 case 856:
-#line 3685 "parse.y"
+#line 3687 "parse.y"
 { see_typename (); ;
     break;}
 case 857:
-#line 3690 "parse.y"
+#line 3692 "parse.y"
 {
 		  error ("type specifier omitted for parameter");
 		  yyval.ttype = build_tree_list (integer_type_node, NULL_TREE);
 		;
     break;}
 case 858:
-#line 3695 "parse.y"
+#line 3697 "parse.y"
 {
 		  error ("type specifier omitted for parameter");
 		  if (TREE_CODE (yyval.ttype) == SCOPE_REF
@@ -8287,192 +8289,192 @@ case 858:
 		;
     break;}
 case 859:
-#line 3707 "parse.y"
+#line 3709 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 860:
-#line 3709 "parse.y"
+#line 3711 "parse.y"
 { yyval.ttype = yyvsp[-1].ttype; ;
     break;}
 case 861:
-#line 3711 "parse.y"
+#line 3713 "parse.y"
 { yyval.ttype = empty_except_spec; ;
     break;}
 case 862:
-#line 3716 "parse.y"
+#line 3718 "parse.y"
 {
 		  check_for_new_type ("exception specifier", yyvsp[0].ftype);
 		  yyval.ttype = groktypename (yyvsp[0].ftype.t);
 		;
     break;}
 case 863:
-#line 3724 "parse.y"
+#line 3726 "parse.y"
 { yyval.ttype = add_exception_specifier (NULL_TREE, yyvsp[0].ttype, 1); ;
     break;}
 case 864:
-#line 3726 "parse.y"
+#line 3728 "parse.y"
 { yyval.ttype = add_exception_specifier (yyvsp[-2].ttype, yyvsp[0].ttype, 1); ;
     break;}
 case 865:
-#line 3731 "parse.y"
+#line 3733 "parse.y"
 { yyval.ttype = NULL_TREE; ;
     break;}
 case 866:
-#line 3733 "parse.y"
+#line 3735 "parse.y"
 { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 867:
-#line 3735 "parse.y"
+#line 3737 "parse.y"
 { yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
     break;}
 case 868:
-#line 3737 "parse.y"
+#line 3739 "parse.y"
 { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
 		;
     break;}
 case 869:
-#line 3744 "parse.y"
+#line 3746 "parse.y"
 { got_scope = NULL_TREE; ;
     break;}
 case 870:
-#line 3749 "parse.y"
+#line 3751 "parse.y"
 { yyval.ttype = ansi_opname (MULT_EXPR); ;
     break;}
 case 871:
-#line 3751 "parse.y"
+#line 3753 "parse.y"
 { yyval.ttype = ansi_opname (TRUNC_DIV_EXPR); ;
     break;}
 case 872:
-#line 3753 "parse.y"
+#line 3755 "parse.y"
 { yyval.ttype = ansi_opname (TRUNC_MOD_EXPR); ;
     break;}
 case 873:
-#line 3755 "parse.y"
+#line 3757 "parse.y"
 { yyval.ttype = ansi_opname (PLUS_EXPR); ;
     break;}
 case 874:
-#line 3757 "parse.y"
+#line 3759 "parse.y"
 { yyval.ttype = ansi_opname (MINUS_EXPR); ;
     break;}
 case 875:
-#line 3759 "parse.y"
+#line 3761 "parse.y"
 { yyval.ttype = ansi_opname (BIT_AND_EXPR); ;
     break;}
 case 876:
-#line 3761 "parse.y"
+#line 3763 "parse.y"
 { yyval.ttype = ansi_opname (BIT_IOR_EXPR); ;
     break;}
 case 877:
-#line 3763 "parse.y"
+#line 3765 "parse.y"
 { yyval.ttype = ansi_opname (BIT_XOR_EXPR); ;
     break;}
 case 878:
-#line 3765 "parse.y"
+#line 3767 "parse.y"
 { yyval.ttype = ansi_opname (BIT_NOT_EXPR); ;
     break;}
 case 879:
-#line 3767 "parse.y"
+#line 3769 "parse.y"
 { yyval.ttype = ansi_opname (COMPOUND_EXPR); ;
     break;}
 case 880:
-#line 3769 "parse.y"
+#line 3771 "parse.y"
 { yyval.ttype = ansi_opname (yyvsp[0].code); ;
     break;}
 case 881:
-#line 3771 "parse.y"
+#line 3773 "parse.y"
 { yyval.ttype = ansi_opname (LT_EXPR); ;
     break;}
 case 882:
-#line 3773 "parse.y"
+#line 3775 "parse.y"
 { yyval.ttype = ansi_opname (GT_EXPR); ;
     break;}
 case 883:
-#line 3775 "parse.y"
+#line 3777 "parse.y"
 { yyval.ttype = ansi_opname (yyvsp[0].code); ;
     break;}
 case 884:
-#line 3777 "parse.y"
+#line 3779 "parse.y"
 { yyval.ttype = ansi_assopname (yyvsp[0].code); ;
     break;}
 case 885:
-#line 3779 "parse.y"
+#line 3781 "parse.y"
 { yyval.ttype = ansi_assopname (NOP_EXPR); ;
     break;}
 case 886:
-#line 3781 "parse.y"
+#line 3783 "parse.y"
 { yyval.ttype = ansi_opname (yyvsp[0].code); ;
     break;}
 case 887:
-#line 3783 "parse.y"
+#line 3785 "parse.y"
 { yyval.ttype = ansi_opname (yyvsp[0].code); ;
     break;}
 case 888:
-#line 3785 "parse.y"
+#line 3787 "parse.y"
 { yyval.ttype = ansi_opname (POSTINCREMENT_EXPR); ;
     break;}
 case 889:
-#line 3787 "parse.y"
+#line 3789 "parse.y"
 { yyval.ttype = ansi_opname (PREDECREMENT_EXPR); ;
     break;}
 case 890:
-#line 3789 "parse.y"
+#line 3791 "parse.y"
 { yyval.ttype = ansi_opname (TRUTH_ANDIF_EXPR); ;
     break;}
 case 891:
-#line 3791 "parse.y"
+#line 3793 "parse.y"
 { yyval.ttype = ansi_opname (TRUTH_ORIF_EXPR); ;
     break;}
 case 892:
-#line 3793 "parse.y"
+#line 3795 "parse.y"
 { yyval.ttype = ansi_opname (TRUTH_NOT_EXPR); ;
     break;}
 case 893:
-#line 3795 "parse.y"
+#line 3797 "parse.y"
 { yyval.ttype = ansi_opname (COND_EXPR); ;
     break;}
 case 894:
-#line 3797 "parse.y"
+#line 3799 "parse.y"
 { yyval.ttype = ansi_opname (yyvsp[0].code); ;
     break;}
 case 895:
-#line 3799 "parse.y"
+#line 3801 "parse.y"
 { yyval.ttype = ansi_opname (COMPONENT_REF); ;
     break;}
 case 896:
-#line 3801 "parse.y"
+#line 3803 "parse.y"
 { yyval.ttype = ansi_opname (MEMBER_REF); ;
     break;}
 case 897:
-#line 3803 "parse.y"
+#line 3805 "parse.y"
 { yyval.ttype = ansi_opname (CALL_EXPR); ;
     break;}
 case 898:
-#line 3805 "parse.y"
+#line 3807 "parse.y"
 { yyval.ttype = ansi_opname (ARRAY_REF); ;
     break;}
 case 899:
-#line 3807 "parse.y"
+#line 3809 "parse.y"
 { yyval.ttype = ansi_opname (NEW_EXPR); ;
     break;}
 case 900:
-#line 3809 "parse.y"
+#line 3811 "parse.y"
 { yyval.ttype = ansi_opname (DELETE_EXPR); ;
     break;}
 case 901:
-#line 3811 "parse.y"
+#line 3813 "parse.y"
 { yyval.ttype = ansi_opname (VEC_NEW_EXPR); ;
     break;}
 case 902:
-#line 3813 "parse.y"
+#line 3815 "parse.y"
 { yyval.ttype = ansi_opname (VEC_DELETE_EXPR); ;
     break;}
 case 903:
-#line 3816 "parse.y"
+#line 3818 "parse.y"
 { yyval.ttype = grokoptypename (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
     break;}
 case 904:
-#line 3818 "parse.y"
+#line 3820 "parse.y"
 { yyval.ttype = ansi_opname (ERROR_MARK); ;
     break;}
 }
@@ -8697,7 +8699,7 @@ yyerrhandle:
     }
   return 1;
 }
-#line 3821 "parse.y"
+#line 3823 "parse.y"
 
 
 #ifdef SPEW_DEBUG
--- gcc/java/parse.c.jj	Thu Jul 27 15:46:09 2000
+++ gcc/java/parse.c	Tue Aug  5 15:58:05 2003
@@ -351,7 +351,7 @@ static int java_decl_equiv PARAMS ((tree
 static int binop_compound_p PARAMS ((enum tree_code));
 static tree search_loop PARAMS ((tree));
 static int labeled_block_contains_loop_p PARAMS ((tree, tree));
-static void check_abstract_method_definitions PARAMS ((int, tree, tree));
+static int check_abstract_method_definitions PARAMS ((int, tree, tree));
 static void java_check_abstract_method_definitions PARAMS ((tree));
 static void java_debug_context_do PARAMS ((int));
 static void java_parser_context_push_initialized_field PARAMS ((void));
@@ -516,7 +516,7 @@ typedef union {
 
 
 
-#define	YYFINAL		791
+#define	YYFINAL		788
 #define	YYFLAG		-32768
 #define	YYNTBASE	110
 
@@ -572,49 +572,49 @@ static const short yyprhs[] = {     0,
    139,   141,   143,   145,   147,   149,   152,   153,   161,   162,
    169,   173,   176,   180,   185,   186,   189,   193,   196,   197,
    200,   203,   205,   209,   213,   216,   220,   222,   225,   227,
-   229,   231,   233,   235,   238,   240,   242,   244,   248,   253,
-   255,   259,   263,   265,   269,   273,   278,   280,   284,   287,
-   291,   295,   297,   299,   300,   304,   307,   311,   315,   320,
-   325,   328,   332,   335,   339,   342,   346,   351,   355,   359,
-   363,   365,   369,   373,   376,   380,   383,   387,   389,   390,
-   393,   396,   398,   402,   406,   408,   411,   413,   416,   420,
-   422,   423,   427,   430,   434,   438,   443,   446,   450,   454,
-   459,   461,   464,   469,   475,   483,   490,   492,   494,   495,
-   500,   501,   507,   508,   514,   515,   522,   526,   531,   534,
-   538,   541,   545,   548,   552,   554,   557,   559,   561,   563,
-   565,   567,   570,   573,   576,   580,   585,   587,   591,   595,
-   598,   602,   604,   606,   608,   611,   613,   615,   617,   620,
-   623,   627,   629,   631,   633,   635,   637,   639,   641,   643,
-   645,   647,   649,   651,   653,   655,   657,   659,   661,   663,
-   665,   667,   669,   671,   673,   676,   679,   682,   685,   688,
-   691,   694,   697,   701,   706,   711,   717,   722,   728,   735,
-   743,   750,   752,   754,   756,   758,   760,   762,   764,   770,
-   773,   777,   782,   790,   798,   799,   803,   808,   811,   815,
-   821,   824,   828,   832,   837,   839,   842,   845,   847,   850,
-   854,   857,   860,   864,   867,   872,   875,   878,   882,   887,
-   890,   892,   900,   908,   915,   919,   925,   930,   938,   945,
-   948,   951,   955,   958,   959,   961,   963,   966,   967,   969,
-   971,   975,   979,   982,   986,   989,   993,   996,  1000,  1003,
-  1007,  1010,  1014,  1017,  1021,  1025,  1028,  1032,  1038,  1044,
-  1047,  1052,  1056,  1058,  1062,  1066,  1071,  1074,  1076,  1079,
-  1082,  1087,  1090,  1094,  1099,  1102,  1105,  1107,  1109,  1111,
-  1113,  1117,  1119,  1121,  1123,  1125,  1127,  1131,  1135,  1139,
-  1143,  1147,  1151,  1155,  1159,  1163,  1167,  1171,  1177,  1182,
-  1184,  1189,  1195,  1201,  1208,  1212,  1216,  1221,  1227,  1230,
-  1234,  1235,  1243,  1244,  1251,  1255,  1259,  1261,  1265,  1269,
-  1273,  1277,  1282,  1287,  1292,  1297,  1301,  1305,  1307,  1310,
-  1314,  1318,  1321,  1324,  1328,  1332,  1336,  1340,  1343,  1347,
-  1352,  1358,  1365,  1371,  1378,  1383,  1388,  1393,  1398,  1402,
-  1407,  1411,  1416,  1418,  1420,  1422,  1424,  1427,  1430,  1432,
-  1434,  1437,  1440,  1442,  1445,  1448,  1451,  1454,  1457,  1460,
-  1462,  1465,  1468,  1470,  1473,  1476,  1482,  1487,  1492,  1498,
-  1503,  1506,  1512,  1517,  1523,  1525,  1529,  1533,  1537,  1541,
-  1545,  1549,  1551,  1555,  1559,  1563,  1567,  1569,  1573,  1577,
-  1581,  1585,  1589,  1593,  1595,  1599,  1603,  1607,  1611,  1615,
-  1619,  1623,  1627,  1631,  1635,  1637,  1641,  1645,  1649,  1653,
-  1655,  1659,  1663,  1665,  1669,  1673,  1675,  1679,  1683,  1685,
-  1689,  1693,  1695,  1699,  1703,  1705,  1711,  1716,  1720,  1726,
-  1728,  1730,  1734,  1738,  1740,  1742,  1744,  1746,  1748,  1750
+   229,   231,   233,   235,   237,   239,   241,   243,   247,   252,
+   254,   258,   262,   264,   268,   272,   277,   279,   283,   286,
+   290,   294,   296,   298,   299,   303,   306,   310,   314,   319,
+   324,   327,   331,   334,   338,   341,   345,   350,   354,   358,
+   362,   364,   368,   372,   375,   379,   382,   386,   388,   389,
+   392,   395,   397,   401,   405,   407,   409,   412,   414,   415,
+   419,   422,   426,   430,   435,   438,   442,   446,   451,   453,
+   458,   464,   472,   479,   481,   483,   484,   489,   490,   496,
+   497,   503,   504,   511,   515,   520,   523,   527,   530,   534,
+   537,   541,   543,   546,   548,   550,   552,   554,   556,   559,
+   562,   565,   569,   574,   576,   580,   584,   587,   591,   593,
+   595,   597,   600,   602,   604,   606,   609,   612,   616,   618,
+   620,   622,   624,   626,   628,   630,   632,   634,   636,   638,
+   640,   642,   644,   646,   648,   650,   652,   654,   656,   658,
+   660,   662,   665,   668,   671,   674,   677,   680,   683,   686,
+   690,   695,   700,   706,   711,   717,   724,   732,   739,   741,
+   743,   745,   747,   749,   751,   753,   759,   762,   766,   771,
+   779,   787,   788,   792,   797,   800,   804,   810,   813,   817,
+   821,   826,   828,   831,   834,   836,   839,   843,   846,   849,
+   853,   856,   861,   864,   867,   871,   876,   879,   881,   889,
+   897,   904,   908,   914,   919,   927,   934,   937,   940,   944,
+   947,   948,   950,   952,   955,   956,   958,   960,   964,   968,
+   971,   975,   978,   982,   985,   989,   992,   996,   999,  1003,
+  1006,  1010,  1014,  1017,  1021,  1027,  1033,  1036,  1041,  1045,
+  1047,  1051,  1055,  1060,  1063,  1065,  1068,  1071,  1076,  1079,
+  1083,  1088,  1091,  1094,  1096,  1098,  1100,  1102,  1106,  1108,
+  1110,  1112,  1114,  1116,  1120,  1124,  1128,  1132,  1136,  1140,
+  1144,  1148,  1152,  1156,  1160,  1166,  1171,  1173,  1178,  1184,
+  1190,  1197,  1201,  1205,  1210,  1216,  1219,  1223,  1224,  1232,
+  1233,  1240,  1244,  1248,  1250,  1254,  1258,  1262,  1266,  1271,
+  1276,  1281,  1286,  1290,  1294,  1296,  1299,  1303,  1307,  1310,
+  1313,  1317,  1321,  1325,  1329,  1332,  1336,  1341,  1347,  1354,
+  1360,  1367,  1372,  1377,  1382,  1387,  1391,  1396,  1400,  1405,
+  1407,  1409,  1411,  1413,  1416,  1419,  1421,  1423,  1426,  1429,
+  1431,  1434,  1437,  1440,  1443,  1446,  1449,  1451,  1454,  1457,
+  1459,  1462,  1465,  1471,  1476,  1481,  1487,  1492,  1495,  1501,
+  1506,  1512,  1514,  1518,  1522,  1526,  1530,  1534,  1538,  1540,
+  1544,  1548,  1552,  1556,  1558,  1562,  1566,  1570,  1574,  1578,
+  1582,  1584,  1588,  1592,  1596,  1600,  1604,  1608,  1612,  1616,
+  1620,  1624,  1626,  1630,  1634,  1638,  1642,  1644,  1648,  1652,
+  1654,  1658,  1662,  1664,  1668,  1672,  1674,  1678,  1682,  1684,
+  1688,  1692,  1694,  1700,  1705,  1709,  1715,  1717,  1719,  1723,
+  1727,  1729,  1731,  1733,  1735,  1737,  1739
 };
 
 static const short yyrhs[] = {   123,
@@ -632,7 +632,7 @@ static const short yyrhs[] = {   123,
     55,   119,    99,     0,    55,     1,     0,    55,   119,     1,
      0,    55,   119,   101,     5,    99,     0,    55,   119,   101,
      1,     0,    55,   119,   101,     5,     1,     0,   132,     0,
-   167,     0,    99,     0,     1,     0,    44,     0,   131,    44,
+   167,     0,   190,     0,     1,     0,    44,     0,   131,    44,
      0,     0,   131,    67,   122,   135,   136,   133,   138,     0,
      0,    67,   122,   135,   136,   134,   138,     0,   131,    67,
      1,     0,    67,     1,     0,    67,   122,     1,     0,   131,
@@ -641,159 +641,157 @@ static const short yyrhs[] = {   123,
      1,     0,   117,     0,   137,   100,   117,     0,   137,   100,
      1,     0,    95,    96,     0,    95,   139,    96,     0,   140,
      0,   139,   140,     0,   141,     0,   157,     0,   159,     0,
-   180,     0,   142,     0,   142,    99,     0,   147,     0,   132,
-     0,   167,     0,   112,   143,    99,     0,   131,   112,   143,
-    99,     0,   144,     0,   143,   100,   144,     0,   143,   100,
-     1,     0,   145,     0,   145,    92,   146,     0,   145,    92,
-     1,     0,   145,    92,   146,     1,     0,   122,     0,   145,
-    97,    98,     0,   122,     1,     0,   145,    97,     1,     0,
-   145,    98,     1,     0,   270,     0,   178,     0,     0,   149,
-   148,   156,     0,   149,     1,     0,   112,   150,   154,     0,
-    59,   150,   154,     0,   131,   112,   150,   154,     0,   131,
-    59,   150,   154,     0,   112,     1,     0,   131,   112,     1,
-     0,    59,     1,     0,   131,    59,     1,     0,   131,     1,
-     0,   122,    93,    94,     0,   122,    93,   151,    94,     0,
-   150,    97,    98,     0,   122,    93,     1,     0,   150,    97,
-     1,     0,   152,     0,   151,   100,   152,     0,   151,   100,
-     1,     0,   112,   145,     0,   153,   112,   145,     0,   112,
-     1,     0,   153,   112,     1,     0,   131,     0,     0,    53,
-   155,     0,    53,     1,     0,   116,     0,   155,   100,   116,
-     0,   155,   100,     1,     0,   180,     0,   180,    99,     0,
-    99,     0,   158,   180,     0,   158,   180,    99,     0,   131,
-     0,     0,   161,   160,   163,     0,   162,   154,     0,   131,
-   162,   154,     0,   120,    93,    94,     0,   120,    93,   151,
-    94,     0,   181,   164,     0,   181,   165,   164,     0,   181,
-   183,   164,     0,   181,   165,   183,   164,     0,   182,     0,
-   182,    99,     0,   166,    93,    94,    99,     0,   166,    93,
-   239,    94,    99,     0,   119,   101,    65,    93,   239,    94,
-    99,     0,   119,   101,    65,    93,    94,    99,     0,    76,
-     0,    65,     0,     0,    61,   122,   168,   173,     0,     0,
-   131,    61,   122,   169,   173,     0,     0,    61,   122,   172,
-   170,   173,     0,     0,   131,    61,   122,   172,   171,   173,
-     0,    61,   122,     1,     0,   131,    61,   122,     1,     0,
-    63,   117,     0,   172,   100,   117,     0,    63,     1,     0,
-   172,   100,     1,     0,    95,    96,     0,    95,   174,    96,
-     0,   175,     0,   174,   175,     0,   176,     0,   177,     0,
-   132,     0,   167,     0,   142,     0,   149,    99,     0,   149,
-     1,     0,    95,    96,     0,    95,   179,    96,     0,    95,
-   179,   100,    96,     0,   146,     0,   179,   100,   146,     0,
-   179,   100,     1,     0,    95,    96,     0,   181,   183,   182,
-     0,    95,     0,    96,     0,   184,     0,   183,   184,     0,
-   185,     0,   187,     0,   132,     0,   186,    99,     0,   112,
-   143,     0,   153,   112,   143,     0,   189,     0,   192,     0,
-   196,     0,   197,     0,   208,     0,   212,     0,   189,     0,
-   193,     0,   198,     0,   209,     0,   213,     0,   180,     0,
-   190,     0,   194,     0,   199,     0,   211,     0,   219,     0,
-   220,     0,   221,     0,   223,     0,   222,     0,   225,     0,
-    99,     0,   122,    88,     0,   191,   187,     0,   122,     1,
-     0,   191,   188,     0,   195,    99,     0,     1,    99,     0,
-     1,    95,     0,     1,    96,     0,   166,    93,     1,     0,
-   166,    93,    94,     1,     0,   166,    93,   239,     1,     0,
-   166,    93,   239,    94,     1,     0,   119,   101,    65,     1,
-     0,   119,   101,    65,    93,     1,     0,   119,   101,    65,
-    93,   239,     1,     0,   119,   101,    65,    93,   239,    94,
-     1,     0,   119,   101,    65,    93,    94,     1,     0,   267,
-     0,   251,     0,   252,     0,   248,     0,   249,     0,   245,
-     0,   234,     0,    48,    93,   270,    94,   187,     0,    48,
-     1,     0,    48,    93,     1,     0,    48,    93,   270,     1,
-     0,    48,    93,   270,    94,   188,    56,   187,     0,    48,
-    93,   270,    94,   188,    56,   188,     0,     0,   201,   200,
-   202,     0,    68,    93,   270,    94,     0,    68,     1,     0,
-    68,    93,     1,     0,    68,    93,   270,    94,     1,     0,
-    95,    96,     0,    95,   205,    96,     0,    95,   203,    96,
-     0,    95,   203,   205,    96,     0,   204,     0,   203,   204,
-     0,   205,   183,     0,   206,     0,   205,   206,     0,    62,
-   271,    88,     0,    47,    88,     0,    62,     1,     0,    62,
-   271,     1,     0,    47,     1,     0,    66,    93,   270,    94,
-     0,   207,   187,     0,    66,     1,     0,    66,    93,     1,
-     0,    66,    93,   270,     1,     0,   207,   188,     0,    51,
-     0,   210,   187,    66,    93,   270,    94,    99,     0,   215,
-    99,   270,    99,   217,    94,   187,     0,   215,    99,    99,
-   217,    94,   187,     0,   215,    99,     1,     0,   215,    99,
-   270,    99,     1,     0,   215,    99,    99,     1,     0,   215,
-    99,   270,    99,   217,    94,   188,     0,   215,    99,    99,
-   217,    94,   188,     0,    71,    93,     0,    71,     1,     0,
-    71,    93,     1,     0,   214,   216,     0,     0,   218,     0,
-   186,     0,   218,     1,     0,     0,   218,     0,   195,     0,
-   218,   100,   195,     0,   218,   100,     1,     0,    54,    99,
-     0,    54,   122,    99,     0,    54,     1,     0,    54,   122,
-     1,     0,    73,    99,     0,    73,   122,    99,     0,    73,
-     1,     0,    73,   122,     1,     0,    58,    99,     0,    58,
-   270,    99,     0,    58,     1,     0,    58,   270,     1,     0,
-    49,   270,    99,     0,    49,     1,     0,    49,   270,     1,
-     0,   224,    93,   270,    94,   180,     0,   224,    93,   270,
-    94,     1,     0,   224,     1,     0,   224,    93,     1,    94,
-     0,   224,    93,     1,     0,   131,     0,    70,   180,   226,
-     0,    70,   180,   229,     0,    70,   180,   226,   229,     0,
-    70,     1,     0,   227,     0,   226,   227,     0,   228,   180,
-     0,    60,    93,   152,    94,     0,    60,     1,     0,    60,
-    93,     1,     0,    60,    93,     1,    94,     0,    64,   180,
-     0,    64,     1,     0,   231,     0,   240,     0,   111,     0,
-    76,     0,    93,   270,    94,     0,   234,     0,   244,     0,
-   245,     0,   246,     0,   233,     0,   119,   101,    76,     0,
-    93,   270,     1,     0,   119,   101,     1,     0,   113,   101,
-     1,     0,    59,   101,     1,     0,   113,    97,    98,     0,
-   119,    97,    98,     0,   119,   101,    67,     0,   232,   101,
-    67,     0,   113,   101,    67,     0,    59,   101,    67,     0,
-    72,   116,    93,   239,    94,     0,    72,   116,    93,    94,
-     0,   235,     0,   238,   122,    93,    94,     0,   238,   122,
-    93,    94,   138,     0,   238,   122,    93,   239,    94,     0,
-   238,   122,    93,   239,    94,   138,     0,    72,     1,    99,
-     0,    72,   116,     1,     0,    72,   116,    93,     1,     0,
-    72,   116,    93,   239,     1,     0,   238,     1,     0,   238,
-   122,     1,     0,     0,    72,   116,    93,   239,    94,   236,
-   138,     0,     0,    72,   116,    93,    94,   237,   138,     0,
-   119,   101,    72,     0,   230,   101,    72,     0,   270,     0,
-   239,   100,   270,     0,   239,   100,     1,     0,    72,   113,
-   241,     0,    72,   115,   241,     0,    72,   113,   241,   243,
-     0,    72,   115,   241,   243,     0,    72,   115,   243,   178,
-     0,    72,   113,   243,   178,     0,    72,     1,    98,     0,
-    72,     1,    97,     0,   242,     0,   241,   242,     0,    97,
-   270,    98,     0,    97,   270,     1,     0,    97,     1,     0,
-    97,    98,     0,   243,    97,    98,     0,   243,    97,     1,
-     0,   230,   101,   122,     0,    65,   101,   122,     0,    65,
-     1,     0,   119,    93,    94,     0,   119,    93,   239,    94,
-     0,   230,   101,   122,    93,    94,     0,   230,   101,   122,
-    93,   239,    94,     0,    65,   101,   122,    93,    94,     0,
-    65,   101,   122,    93,   239,    94,     0,    65,   101,     1,
-    94,     0,    65,   101,     1,   101,     0,   119,    97,   270,
-    98,     0,   231,    97,   270,    98,     0,   119,    97,     1,
-     0,   119,    97,   270,     1,     0,   231,    97,     1,     0,
-   231,    97,   270,     1,     0,   230,     0,   119,     0,   248,
-     0,   249,     0,   247,    46,     0,   247,    45,     0,   251,
-     0,   252,     0,     3,   250,     0,     4,   250,     0,   253,
-     0,     3,     1,     0,     4,     1,     0,    46,   250,     0,
-    46,     1,     0,    45,   250,     0,    45,     1,     0,   247,
-     0,    89,   250,     0,    90,   250,     0,   254,     0,    89,
-     1,     0,    90,     1,     0,    93,   113,   243,    94,   250,
-     0,    93,   113,    94,   250,     0,    93,   270,    94,   253,
-     0,    93,   119,   243,    94,   253,     0,    93,   113,    97,
-     1,     0,    93,     1,     0,    93,   113,   243,    94,     1,
-     0,    93,   113,    94,     1,     0,    93,   119,   243,    94,
-     1,     0,   250,     0,   255,     5,   250,     0,   255,     6,
-   250,     0,   255,     7,   250,     0,   255,     5,     1,     0,
-   255,     6,     1,     0,   255,     7,     1,     0,   255,     0,
-   256,     3,   255,     0,   256,     4,   255,     0,   256,     3,
-     1,     0,   256,     4,     1,     0,   256,     0,   257,     8,
-   256,     0,   257,     9,   256,     0,   257,    10,   256,     0,
-   257,     8,     1,     0,   257,     9,     1,     0,   257,    10,
-     1,     0,   257,     0,   258,    20,   257,     0,   258,    18,
-   257,     0,   258,    21,   257,     0,   258,    19,   257,     0,
-   258,    57,   114,     0,   258,    20,     1,     0,   258,    18,
-     1,     0,   258,    21,     1,     0,   258,    19,     1,     0,
-   258,    57,     1,     0,   258,     0,   259,    16,   258,     0,
-   259,    17,   258,     0,   259,    16,     1,     0,   259,    17,
-     1,     0,   259,     0,   260,    11,   259,     0,   260,    11,
-     1,     0,   260,     0,   261,    12,   260,     0,   261,    12,
-     1,     0,   261,     0,   262,    13,   261,     0,   262,    13,
-     1,     0,   262,     0,   263,    14,   262,     0,   263,    14,
-     1,     0,   263,     0,   264,    15,   263,     0,   264,    15,
-     1,     0,   264,     0,   264,    87,   270,    88,   265,     0,
-   264,    87,    88,     1,     0,   264,    87,     1,     0,   264,
-    87,   270,    88,     1,     0,   265,     0,   267,     0,   268,
-   269,   266,     0,   268,   269,     1,     0,   119,     0,   244,
-     0,   246,     0,    91,     0,    92,     0,   266,     0,   270,
-     0
+   180,     0,   142,     0,   147,     0,   132,     0,   167,     0,
+   190,     0,   112,   143,    99,     0,   131,   112,   143,    99,
+     0,   144,     0,   143,   100,   144,     0,   143,   100,     1,
+     0,   145,     0,   145,    92,   146,     0,   145,    92,     1,
+     0,   145,    92,   146,     1,     0,   122,     0,   145,    97,
+    98,     0,   122,     1,     0,   145,    97,     1,     0,   145,
+    98,     1,     0,   270,     0,   178,     0,     0,   149,   148,
+   156,     0,   149,     1,     0,   112,   150,   154,     0,    59,
+   150,   154,     0,   131,   112,   150,   154,     0,   131,    59,
+   150,   154,     0,   112,     1,     0,   131,   112,     1,     0,
+    59,     1,     0,   131,    59,     1,     0,   131,     1,     0,
+   122,    93,    94,     0,   122,    93,   151,    94,     0,   150,
+    97,    98,     0,   122,    93,     1,     0,   150,    97,     1,
+     0,   152,     0,   151,   100,   152,     0,   151,   100,     1,
+     0,   112,   145,     0,   153,   112,   145,     0,   112,     1,
+     0,   153,   112,     1,     0,   131,     0,     0,    53,   155,
+     0,    53,     1,     0,   116,     0,   155,   100,   116,     0,
+   155,   100,     1,     0,   180,     0,    99,     0,   158,   180,
+     0,   131,     0,     0,   161,   160,   163,     0,   162,   154,
+     0,   131,   162,   154,     0,   120,    93,    94,     0,   120,
+    93,   151,    94,     0,   181,   164,     0,   181,   165,   164,
+     0,   181,   183,   164,     0,   181,   165,   183,   164,     0,
+   182,     0,   166,    93,    94,    99,     0,   166,    93,   239,
+    94,    99,     0,   119,   101,    65,    93,   239,    94,    99,
+     0,   119,   101,    65,    93,    94,    99,     0,    76,     0,
+    65,     0,     0,    61,   122,   168,   173,     0,     0,   131,
+    61,   122,   169,   173,     0,     0,    61,   122,   172,   170,
+   173,     0,     0,   131,    61,   122,   172,   171,   173,     0,
+    61,   122,     1,     0,   131,    61,   122,     1,     0,    63,
+   117,     0,   172,   100,   117,     0,    63,     1,     0,   172,
+   100,     1,     0,    95,    96,     0,    95,   174,    96,     0,
+   175,     0,   174,   175,     0,   176,     0,   177,     0,   132,
+     0,   167,     0,   142,     0,   149,    99,     0,   149,     1,
+     0,    95,    96,     0,    95,   179,    96,     0,    95,   179,
+   100,    96,     0,   146,     0,   179,   100,   146,     0,   179,
+   100,     1,     0,    95,    96,     0,   181,   183,   182,     0,
+    95,     0,    96,     0,   184,     0,   183,   184,     0,   185,
+     0,   187,     0,   132,     0,   186,    99,     0,   112,   143,
+     0,   153,   112,   143,     0,   189,     0,   192,     0,   196,
+     0,   197,     0,   208,     0,   212,     0,   189,     0,   193,
+     0,   198,     0,   209,     0,   213,     0,   180,     0,   190,
+     0,   194,     0,   199,     0,   211,     0,   219,     0,   220,
+     0,   221,     0,   223,     0,   222,     0,   225,     0,    99,
+     0,   122,    88,     0,   191,   187,     0,   122,     1,     0,
+   191,   188,     0,   195,    99,     0,     1,    99,     0,     1,
+    95,     0,     1,    96,     0,   166,    93,     1,     0,   166,
+    93,    94,     1,     0,   166,    93,   239,     1,     0,   166,
+    93,   239,    94,     1,     0,   119,   101,    65,     1,     0,
+   119,   101,    65,    93,     1,     0,   119,   101,    65,    93,
+   239,     1,     0,   119,   101,    65,    93,   239,    94,     1,
+     0,   119,   101,    65,    93,    94,     1,     0,   267,     0,
+   251,     0,   252,     0,   248,     0,   249,     0,   245,     0,
+   234,     0,    48,    93,   270,    94,   187,     0,    48,     1,
+     0,    48,    93,     1,     0,    48,    93,   270,     1,     0,
+    48,    93,   270,    94,   188,    56,   187,     0,    48,    93,
+   270,    94,   188,    56,   188,     0,     0,   201,   200,   202,
+     0,    68,    93,   270,    94,     0,    68,     1,     0,    68,
+    93,     1,     0,    68,    93,   270,    94,     1,     0,    95,
+    96,     0,    95,   205,    96,     0,    95,   203,    96,     0,
+    95,   203,   205,    96,     0,   204,     0,   203,   204,     0,
+   205,   183,     0,   206,     0,   205,   206,     0,    62,   271,
+    88,     0,    47,    88,     0,    62,     1,     0,    62,   271,
+     1,     0,    47,     1,     0,    66,    93,   270,    94,     0,
+   207,   187,     0,    66,     1,     0,    66,    93,     1,     0,
+    66,    93,   270,     1,     0,   207,   188,     0,    51,     0,
+   210,   187,    66,    93,   270,    94,    99,     0,   215,    99,
+   270,    99,   217,    94,   187,     0,   215,    99,    99,   217,
+    94,   187,     0,   215,    99,     1,     0,   215,    99,   270,
+    99,     1,     0,   215,    99,    99,     1,     0,   215,    99,
+   270,    99,   217,    94,   188,     0,   215,    99,    99,   217,
+    94,   188,     0,    71,    93,     0,    71,     1,     0,    71,
+    93,     1,     0,   214,   216,     0,     0,   218,     0,   186,
+     0,   218,     1,     0,     0,   218,     0,   195,     0,   218,
+   100,   195,     0,   218,   100,     1,     0,    54,    99,     0,
+    54,   122,    99,     0,    54,     1,     0,    54,   122,     1,
+     0,    73,    99,     0,    73,   122,    99,     0,    73,     1,
+     0,    73,   122,     1,     0,    58,    99,     0,    58,   270,
+    99,     0,    58,     1,     0,    58,   270,     1,     0,    49,
+   270,    99,     0,    49,     1,     0,    49,   270,     1,     0,
+   224,    93,   270,    94,   180,     0,   224,    93,   270,    94,
+     1,     0,   224,     1,     0,   224,    93,     1,    94,     0,
+   224,    93,     1,     0,   131,     0,    70,   180,   226,     0,
+    70,   180,   229,     0,    70,   180,   226,   229,     0,    70,
+     1,     0,   227,     0,   226,   227,     0,   228,   180,     0,
+    60,    93,   152,    94,     0,    60,     1,     0,    60,    93,
+     1,     0,    60,    93,     1,    94,     0,    64,   180,     0,
+    64,     1,     0,   231,     0,   240,     0,   111,     0,    76,
+     0,    93,   270,    94,     0,   234,     0,   244,     0,   245,
+     0,   246,     0,   233,     0,   119,   101,    76,     0,    93,
+   270,     1,     0,   119,   101,     1,     0,   113,   101,     1,
+     0,    59,   101,     1,     0,   113,    97,    98,     0,   119,
+    97,    98,     0,   119,   101,    67,     0,   232,   101,    67,
+     0,   113,   101,    67,     0,    59,   101,    67,     0,    72,
+   116,    93,   239,    94,     0,    72,   116,    93,    94,     0,
+   235,     0,   238,   122,    93,    94,     0,   238,   122,    93,
+    94,   138,     0,   238,   122,    93,   239,    94,     0,   238,
+   122,    93,   239,    94,   138,     0,    72,     1,    99,     0,
+    72,   116,     1,     0,    72,   116,    93,     1,     0,    72,
+   116,    93,   239,     1,     0,   238,     1,     0,   238,   122,
+     1,     0,     0,    72,   116,    93,   239,    94,   236,   138,
+     0,     0,    72,   116,    93,    94,   237,   138,     0,   119,
+   101,    72,     0,   230,   101,    72,     0,   270,     0,   239,
+   100,   270,     0,   239,   100,     1,     0,    72,   113,   241,
+     0,    72,   115,   241,     0,    72,   113,   241,   243,     0,
+    72,   115,   241,   243,     0,    72,   115,   243,   178,     0,
+    72,   113,   243,   178,     0,    72,     1,    98,     0,    72,
+     1,    97,     0,   242,     0,   241,   242,     0,    97,   270,
+    98,     0,    97,   270,     1,     0,    97,     1,     0,    97,
+    98,     0,   243,    97,    98,     0,   243,    97,     1,     0,
+   230,   101,   122,     0,    65,   101,   122,     0,    65,     1,
+     0,   119,    93,    94,     0,   119,    93,   239,    94,     0,
+   230,   101,   122,    93,    94,     0,   230,   101,   122,    93,
+   239,    94,     0,    65,   101,   122,    93,    94,     0,    65,
+   101,   122,    93,   239,    94,     0,    65,   101,     1,    94,
+     0,    65,   101,     1,   101,     0,   119,    97,   270,    98,
+     0,   231,    97,   270,    98,     0,   119,    97,     1,     0,
+   119,    97,   270,     1,     0,   231,    97,     1,     0,   231,
+    97,   270,     1,     0,   230,     0,   119,     0,   248,     0,
+   249,     0,   247,    46,     0,   247,    45,     0,   251,     0,
+   252,     0,     3,   250,     0,     4,   250,     0,   253,     0,
+     3,     1,     0,     4,     1,     0,    46,   250,     0,    46,
+     1,     0,    45,   250,     0,    45,     1,     0,   247,     0,
+    89,   250,     0,    90,   250,     0,   254,     0,    89,     1,
+     0,    90,     1,     0,    93,   113,   243,    94,   250,     0,
+    93,   113,    94,   250,     0,    93,   270,    94,   253,     0,
+    93,   119,   243,    94,   253,     0,    93,   113,    97,     1,
+     0,    93,     1,     0,    93,   113,   243,    94,     1,     0,
+    93,   113,    94,     1,     0,    93,   119,   243,    94,     1,
+     0,   250,     0,   255,     5,   250,     0,   255,     6,   250,
+     0,   255,     7,   250,     0,   255,     5,     1,     0,   255,
+     6,     1,     0,   255,     7,     1,     0,   255,     0,   256,
+     3,   255,     0,   256,     4,   255,     0,   256,     3,     1,
+     0,   256,     4,     1,     0,   256,     0,   257,     8,   256,
+     0,   257,     9,   256,     0,   257,    10,   256,     0,   257,
+     8,     1,     0,   257,     9,     1,     0,   257,    10,     1,
+     0,   257,     0,   258,    20,   257,     0,   258,    18,   257,
+     0,   258,    21,   257,     0,   258,    19,   257,     0,   258,
+    57,   114,     0,   258,    20,     1,     0,   258,    18,     1,
+     0,   258,    21,     1,     0,   258,    19,     1,     0,   258,
+    57,     1,     0,   258,     0,   259,    16,   258,     0,   259,
+    17,   258,     0,   259,    16,     1,     0,   259,    17,     1,
+     0,   259,     0,   260,    11,   259,     0,   260,    11,     1,
+     0,   260,     0,   261,    12,   260,     0,   261,    12,     1,
+     0,   261,     0,   262,    13,   261,     0,   262,    13,     1,
+     0,   262,     0,   263,    14,   262,     0,   263,    14,     1,
+     0,   263,     0,   264,    15,   263,     0,   264,    15,     1,
+     0,   264,     0,   264,    87,   270,    88,   265,     0,   264,
+    87,    88,     1,     0,   264,    87,     1,     0,   264,    87,
+   270,    88,     1,     0,   265,     0,   267,     0,   268,   269,
+   266,     0,   268,   269,     1,     0,   119,     0,   244,     0,
+   246,     0,    91,     0,    92,     0,   266,     0,   270,     0
 };
 
 #endif
@@ -805,52 +803,52 @@ static const short yyrline[] = { 0,
    631,   633,   638,   640,   643,   647,   652,   657,   659,   660,
    661,   662,   663,   664,   665,   668,   673,   679,   681,   684,
    690,   692,   696,   698,   701,   728,   730,   734,   747,   749,
-   753,   756,   758,   760,   770,   775,   790,   794,   794,   797,
-   797,   799,   801,   806,   810,   812,   814,   816,   820,   822,
-   824,   831,   837,   842,   846,   855,   865,   867,   870,   872,
-   873,   874,   881,   883,   885,   886,   888,   893,   896,   906,
-   909,   911,   915,   918,   925,   931,   939,   941,   943,   945,
-   947,   951,   953,   957,   968,   969,   973,   976,   978,   980,
-   982,   987,   989,   991,   993,  1000,  1006,  1008,  1017,  1019,
-  1023,  1028,  1033,  1037,  1042,  1047,  1052,  1059,  1069,  1071,
-  1073,  1077,  1080,  1082,  1086,  1088,  1089,  1094,  1100,  1107,
-  1123,  1130,  1133,  1136,  1140,  1146,  1150,  1159,  1161,  1163,
-  1167,  1169,  1172,  1179,  1187,  1189,  1193,  1200,  1210,  1214,
-  1214,  1217,  1217,  1220,  1220,  1223,  1223,  1225,  1229,  1235,
-  1240,  1242,  1246,  1249,  1253,  1255,  1258,  1260,  1261,  1263,
-  1267,  1271,  1277,  1282,  1285,  1287,  1291,  1297,  1301,  1306,
-  1315,  1319,  1324,  1338,  1340,  1343,  1345,  1347,  1354,  1358,
-  1361,  1365,  1367,  1368,  1369,  1370,  1371,  1375,  1377,  1378,
-  1379,  1380,  1384,  1386,  1387,  1388,  1389,  1390,  1391,  1392,
-  1393,  1394,  1395,  1398,  1403,  1414,  1417,  1421,  1428,  1438,
-  1444,  1450,  1456,  1458,  1463,  1465,  1470,  1472,  1474,  1476,
-  1478,  1482,  1484,  1485,  1486,  1487,  1488,  1489,  1492,  1498,
-  1500,  1502,  1506,  1511,  1516,  1522,  1532,  1538,  1540,  1542,
-  1549,  1552,  1554,  1556,  1560,  1562,  1565,  1569,  1571,  1574,
-  1581,  1587,  1589,  1591,  1595,  1603,  1606,  1608,  1610,  1614,
-  1619,  1628,  1633,  1640,  1647,  1649,  1651,  1655,  1658,  1667,
-  1674,  1676,  1680,  1693,  1695,  1701,  1707,  1711,  1713,  1717,
-  1720,  1722,  1726,  1729,  1731,  1733,  1737,  1740,  1742,  1744,
-  1748,  1751,  1753,  1755,  1759,  1765,  1767,  1771,  1778,  1780,
-  1782,  1784,  1788,  1800,  1803,  1805,  1810,  1814,  1816,  1823,
-  1831,  1848,  1850,  1855,  1859,  1862,  1867,  1869,  1872,  1874,
-  1876,  1878,  1879,  1880,  1881,  1882,  1886,  1891,  1893,  1895,
-  1897,  1904,  1910,  1919,  1922,  1924,  1926,  1930,  1933,  1935,
-  1939,  1945,  1946,  1952,  1953,  1955,  1957,  1959,  1961,  1963,
-  1972,  1976,  2006,  2009,  2023,  2026,  2030,  2036,  2041,  2045,
-  2048,  2050,  2052,  2056,  2065,  2073,  2075,  2079,  2082,  2086,
-  2097,  2099,  2107,  2134,  2136,  2140,  2145,  2152,  2156,  2159,
-  2161,  2172,  2183,  2188,  2197,  2199,  2203,  2206,  2208,  2213,
-  2218,  2223,  2230,  2232,  2233,  2234,  2237,  2242,  2247,  2249,
-  2250,  2252,  2254,  2255,  2257,  2261,  2264,  2268,  2271,  2275,
-  2277,  2279,  2281,  2282,  2284,  2288,  2297,  2299,  2301,  2314,
-  2316,  2322,  2324,  2326,  2330,  2332,  2337,  2342,  2347,  2349,
-  2351,  2355,  2357,  2362,  2367,  2369,  2373,  2375,  2380,  2385,
-  2390,  2392,  2394,  2398,  2400,  2405,  2410,  2415,  2420,  2422,
-  2424,  2426,  2428,  2430,  2434,  2436,  2441,  2446,  2448,  2452,
-  2454,  2459,  2463,  2465,  2470,  2474,  2476,  2481,  2485,  2487,
-  2492,  2496,  2498,  2503,  2507,  2509,  2514,  2520,  2522,  2526,
-  2528,  2531,  2534,  2542,  2544,  2545,  2548,  2550,  2553,  2557
+   753,   756,   758,   759,   769,   774,   789,   793,   793,   796,
+   796,   798,   800,   805,   809,   811,   813,   815,   819,   821,
+   823,   830,   836,   841,   845,   854,   864,   866,   869,   871,
+   872,   873,   880,   882,   883,   885,   887,   891,   894,   904,
+   907,   909,   913,   916,   923,   929,   937,   939,   941,   943,
+   945,   949,   951,   955,   966,   967,   971,   974,   976,   978,
+   980,   985,   987,   989,   991,   998,  1004,  1006,  1015,  1017,
+  1021,  1026,  1031,  1035,  1040,  1045,  1050,  1057,  1067,  1069,
+  1071,  1075,  1078,  1080,  1084,  1086,  1090,  1098,  1114,  1121,
+  1124,  1127,  1131,  1137,  1141,  1150,  1152,  1154,  1158,  1163,
+  1170,  1178,  1180,  1184,  1191,  1201,  1205,  1205,  1208,  1208,
+  1211,  1211,  1214,  1214,  1216,  1220,  1226,  1231,  1233,  1237,
+  1240,  1244,  1246,  1249,  1251,  1252,  1254,  1258,  1262,  1268,
+  1273,  1276,  1278,  1282,  1288,  1292,  1297,  1306,  1310,  1315,
+  1329,  1331,  1334,  1336,  1338,  1345,  1349,  1352,  1356,  1358,
+  1359,  1360,  1361,  1362,  1366,  1368,  1369,  1370,  1371,  1375,
+  1377,  1378,  1379,  1380,  1381,  1382,  1383,  1384,  1385,  1386,
+  1389,  1401,  1412,  1415,  1419,  1426,  1436,  1442,  1448,  1454,
+  1456,  1461,  1463,  1468,  1470,  1472,  1474,  1476,  1480,  1482,
+  1483,  1484,  1485,  1486,  1487,  1490,  1496,  1498,  1500,  1504,
+  1509,  1514,  1520,  1530,  1536,  1538,  1540,  1547,  1550,  1552,
+  1554,  1558,  1560,  1563,  1567,  1569,  1572,  1579,  1585,  1587,
+  1589,  1593,  1601,  1604,  1606,  1608,  1612,  1617,  1626,  1631,
+  1638,  1645,  1647,  1649,  1653,  1656,  1665,  1672,  1674,  1678,
+  1691,  1693,  1699,  1705,  1709,  1711,  1715,  1718,  1720,  1724,
+  1727,  1729,  1731,  1735,  1738,  1740,  1742,  1746,  1749,  1751,
+  1753,  1757,  1763,  1765,  1769,  1776,  1778,  1780,  1782,  1786,
+  1798,  1801,  1803,  1808,  1812,  1814,  1821,  1829,  1846,  1848,
+  1853,  1857,  1860,  1865,  1867,  1870,  1872,  1874,  1876,  1877,
+  1878,  1879,  1880,  1884,  1889,  1891,  1893,  1895,  1902,  1908,
+  1917,  1920,  1922,  1924,  1928,  1931,  1933,  1937,  1943,  1944,
+  1950,  1951,  1953,  1955,  1957,  1959,  1961,  1970,  1974,  2004,
+  2007,  2021,  2024,  2028,  2034,  2039,  2043,  2046,  2048,  2050,
+  2054,  2063,  2071,  2073,  2077,  2080,  2084,  2095,  2097,  2105,
+  2132,  2134,  2138,  2143,  2150,  2154,  2157,  2159,  2170,  2181,
+  2186,  2195,  2197,  2201,  2204,  2206,  2211,  2216,  2221,  2228,
+  2230,  2231,  2232,  2235,  2240,  2245,  2247,  2248,  2250,  2252,
+  2253,  2255,  2259,  2262,  2266,  2269,  2273,  2275,  2277,  2279,
+  2280,  2282,  2286,  2295,  2297,  2299,  2312,  2314,  2320,  2322,
+  2324,  2328,  2330,  2335,  2340,  2345,  2347,  2349,  2353,  2355,
+  2360,  2365,  2367,  2371,  2373,  2378,  2383,  2388,  2390,  2392,
+  2396,  2398,  2403,  2408,  2413,  2418,  2420,  2422,  2424,  2426,
+  2428,  2432,  2434,  2439,  2444,  2446,  2450,  2452,  2457,  2461,
+  2463,  2468,  2472,  2474,  2479,  2483,  2485,  2490,  2494,  2496,
+  2501,  2505,  2507,  2512,  2518,  2520,  2524,  2526,  2529,  2532,
+  2540,  2542,  2543,  2546,  2548,  2551,  2555
 };
 #endif
 
@@ -926,44 +924,44 @@ static const short yyr1[] = {     0,
    145,   146,   146,   148,   147,   147,   149,   149,   149,   149,
    149,   149,   149,   149,   149,   150,   150,   150,   150,   150,
    151,   151,   151,   152,   152,   152,   152,   153,   154,   154,
-   154,   155,   155,   155,   156,   156,   156,   157,   157,   158,
-   160,   159,   161,   161,   162,   162,   163,   163,   163,   163,
-   164,   164,   165,   165,   165,   165,   166,   166,   168,   167,
-   169,   167,   170,   167,   171,   167,   167,   167,   172,   172,
-   172,   172,   173,   173,   174,   174,   175,   175,   175,   175,
-   176,   177,   177,   178,   178,   178,   179,   179,   179,   180,
-   180,   181,   182,   183,   183,   184,   184,   184,   185,   186,
-   186,   187,   187,   187,   187,   187,   187,   188,   188,   188,
-   188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
-   189,   189,   189,   190,   191,   192,   192,   193,   194,   194,
-   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
-   194,   195,   195,   195,   195,   195,   195,   195,   196,   196,
-   196,   196,   197,   198,   200,   199,   201,   201,   201,   201,
-   202,   202,   202,   202,   203,   203,   204,   205,   205,   206,
-   206,   206,   206,   206,   207,   208,   208,   208,   208,   209,
-   210,   211,   212,   212,   212,   212,   212,   213,   213,   214,
-   214,   214,   215,   216,   216,   216,   216,   217,   217,   218,
-   218,   218,   219,   219,   219,   219,   220,   220,   220,   220,
-   221,   221,   221,   221,   222,   222,   222,   223,   223,   223,
-   223,   223,   224,   225,   225,   225,   225,   226,   226,   227,
-   228,   228,   228,   228,   229,   229,   230,   230,   231,   231,
-   231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
-   231,   232,   232,   233,   233,   233,   233,   234,   234,   234,
-   234,   234,   234,   234,   234,   234,   234,   234,   234,   234,
-   236,   235,   237,   235,   238,   238,   239,   239,   239,   240,
-   240,   240,   240,   240,   240,   240,   240,   241,   241,   242,
-   242,   242,   243,   243,   243,   244,   244,   244,   245,   245,
-   245,   245,   245,   245,   245,   245,   246,   246,   246,   246,
-   246,   246,   247,   247,   247,   247,   248,   249,   250,   250,
-   250,   250,   250,   250,   250,   251,   251,   252,   252,   253,
-   253,   253,   253,   253,   253,   254,   254,   254,   254,   254,
-   254,   254,   254,   254,   255,   255,   255,   255,   255,   255,
-   255,   256,   256,   256,   256,   256,   257,   257,   257,   257,
-   257,   257,   257,   258,   258,   258,   258,   258,   258,   258,
-   258,   258,   258,   258,   259,   259,   259,   259,   259,   260,
-   260,   260,   261,   261,   261,   262,   262,   262,   263,   263,
-   263,   264,   264,   264,   265,   265,   265,   265,   265,   266,
-   266,   267,   267,   268,   268,   268,   269,   269,   270,   271
+   154,   155,   155,   155,   156,   156,   157,   158,   160,   159,
+   161,   161,   162,   162,   163,   163,   163,   163,   164,   165,
+   165,   165,   165,   166,   166,   168,   167,   169,   167,   170,
+   167,   171,   167,   167,   167,   172,   172,   172,   172,   173,
+   173,   174,   174,   175,   175,   175,   175,   176,   177,   177,
+   178,   178,   178,   179,   179,   179,   180,   180,   181,   182,
+   183,   183,   184,   184,   184,   185,   186,   186,   187,   187,
+   187,   187,   187,   187,   188,   188,   188,   188,   188,   189,
+   189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+   190,   191,   192,   192,   193,   194,   194,   194,   194,   194,
+   194,   194,   194,   194,   194,   194,   194,   194,   195,   195,
+   195,   195,   195,   195,   195,   196,   196,   196,   196,   197,
+   198,   200,   199,   201,   201,   201,   201,   202,   202,   202,
+   202,   203,   203,   204,   205,   205,   206,   206,   206,   206,
+   206,   207,   208,   208,   208,   208,   209,   210,   211,   212,
+   212,   212,   212,   212,   213,   213,   214,   214,   214,   215,
+   216,   216,   216,   216,   217,   217,   218,   218,   218,   219,
+   219,   219,   219,   220,   220,   220,   220,   221,   221,   221,
+   221,   222,   222,   222,   223,   223,   223,   223,   223,   224,
+   225,   225,   225,   225,   226,   226,   227,   228,   228,   228,
+   228,   229,   229,   230,   230,   231,   231,   231,   231,   231,
+   231,   231,   231,   231,   231,   231,   231,   231,   232,   232,
+   233,   233,   233,   233,   234,   234,   234,   234,   234,   234,
+   234,   234,   234,   234,   234,   234,   234,   236,   235,   237,
+   235,   238,   238,   239,   239,   239,   240,   240,   240,   240,
+   240,   240,   240,   240,   241,   241,   242,   242,   242,   243,
+   243,   243,   244,   244,   244,   245,   245,   245,   245,   245,
+   245,   245,   245,   246,   246,   246,   246,   246,   246,   247,
+   247,   247,   247,   248,   249,   250,   250,   250,   250,   250,
+   250,   250,   251,   251,   252,   252,   253,   253,   253,   253,
+   253,   253,   254,   254,   254,   254,   254,   254,   254,   254,
+   254,   255,   255,   255,   255,   255,   255,   255,   256,   256,
+   256,   256,   256,   257,   257,   257,   257,   257,   257,   257,
+   258,   258,   258,   258,   258,   258,   258,   258,   258,   258,
+   258,   259,   259,   259,   259,   259,   260,   260,   260,   261,
+   261,   261,   262,   262,   262,   263,   263,   263,   264,   264,
+   264,   265,   265,   265,   265,   265,   266,   266,   267,   267,
+   268,   268,   268,   269,   269,   270,   271
 };
 
 static const short yyr2[] = {     0,
@@ -975,1031 +973,996 @@ static const short yyr2[] = {     0,
      1,     1,     1,     1,     1,     2,     0,     7,     0,     6,
      3,     2,     3,     4,     0,     2,     3,     2,     0,     2,
      2,     1,     3,     3,     2,     3,     1,     2,     1,     1,
-     1,     1,     1,     2,     1,     1,     1,     3,     4,     1,
+     1,     1,     1,     1,     1,     1,     1,     3,     4,     1,
      3,     3,     1,     3,     3,     4,     1,     3,     2,     3,
      3,     1,     1,     0,     3,     2,     3,     3,     4,     4,
      2,     3,     2,     3,     2,     3,     4,     3,     3,     3,
      1,     3,     3,     2,     3,     2,     3,     1,     0,     2,
-     2,     1,     3,     3,     1,     2,     1,     2,     3,     1,
-     0,     3,     2,     3,     3,     4,     2,     3,     3,     4,
-     1,     2,     4,     5,     7,     6,     1,     1,     0,     4,
-     0,     5,     0,     5,     0,     6,     3,     4,     2,     3,
-     2,     3,     2,     3,     1,     2,     1,     1,     1,     1,
-     1,     2,     2,     2,     3,     4,     1,     3,     3,     2,
-     3,     1,     1,     1,     2,     1,     1,     1,     2,     2,
-     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+     2,     1,     3,     3,     1,     1,     2,     1,     0,     3,
+     2,     3,     3,     4,     2,     3,     3,     4,     1,     4,
+     5,     7,     6,     1,     1,     0,     4,     0,     5,     0,
+     5,     0,     6,     3,     4,     2,     3,     2,     3,     2,
+     3,     1,     2,     1,     1,     1,     1,     1,     2,     2,
+     2,     3,     4,     1,     3,     3,     2,     3,     1,     1,
+     1,     2,     1,     1,     1,     2,     2,     3,     1,     1,
      1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-     1,     1,     1,     1,     2,     2,     2,     2,     2,     2,
-     2,     2,     3,     4,     4,     5,     4,     5,     6,     7,
-     6,     1,     1,     1,     1,     1,     1,     1,     5,     2,
-     3,     4,     7,     7,     0,     3,     4,     2,     3,     5,
-     2,     3,     3,     4,     1,     2,     2,     1,     2,     3,
-     2,     2,     3,     2,     4,     2,     2,     3,     4,     2,
-     1,     7,     7,     6,     3,     5,     4,     7,     6,     2,
-     2,     3,     2,     0,     1,     1,     2,     0,     1,     1,
-     3,     3,     2,     3,     2,     3,     2,     3,     2,     3,
-     2,     3,     2,     3,     3,     2,     3,     5,     5,     2,
-     4,     3,     1,     3,     3,     4,     2,     1,     2,     2,
-     4,     2,     3,     4,     2,     2,     1,     1,     1,     1,
-     3,     1,     1,     1,     1,     1,     3,     3,     3,     3,
-     3,     3,     3,     3,     3,     3,     3,     5,     4,     1,
-     4,     5,     5,     6,     3,     3,     4,     5,     2,     3,
-     0,     7,     0,     6,     3,     3,     1,     3,     3,     3,
-     3,     4,     4,     4,     4,     3,     3,     1,     2,     3,
-     3,     2,     2,     3,     3,     3,     3,     2,     3,     4,
-     5,     6,     5,     6,     4,     4,     4,     4,     3,     4,
-     3,     4,     1,     1,     1,     1,     2,     2,     1,     1,
-     2,     2,     1,     2,     2,     2,     2,     2,     2,     1,
-     2,     2,     1,     2,     2,     5,     4,     4,     5,     4,
-     2,     5,     4,     5,     1,     3,     3,     3,     3,     3,
-     3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
+     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+     1,     2,     2,     2,     2,     2,     2,     2,     2,     3,
+     4,     4,     5,     4,     5,     6,     7,     6,     1,     1,
+     1,     1,     1,     1,     1,     5,     2,     3,     4,     7,
+     7,     0,     3,     4,     2,     3,     5,     2,     3,     3,
+     4,     1,     2,     2,     1,     2,     3,     2,     2,     3,
+     2,     4,     2,     2,     3,     4,     2,     1,     7,     7,
+     6,     3,     5,     4,     7,     6,     2,     2,     3,     2,
+     0,     1,     1,     2,     0,     1,     1,     3,     3,     2,
+     3,     2,     3,     2,     3,     2,     3,     2,     3,     2,
+     3,     3,     2,     3,     5,     5,     2,     4,     3,     1,
+     3,     3,     4,     2,     1,     2,     2,     4,     2,     3,
+     4,     2,     2,     1,     1,     1,     1,     3,     1,     1,
+     1,     1,     1,     3,     3,     3,     3,     3,     3,     3,
+     3,     3,     3,     3,     5,     4,     1,     4,     5,     5,
+     6,     3,     3,     4,     5,     2,     3,     0,     7,     0,
+     6,     3,     3,     1,     3,     3,     3,     3,     4,     4,
+     4,     4,     3,     3,     1,     2,     3,     3,     2,     2,
+     3,     3,     3,     3,     2,     3,     4,     5,     6,     5,
+     6,     4,     4,     4,     4,     3,     4,     3,     4,     1,
+     1,     1,     1,     2,     2,     1,     1,     2,     2,     1,
+     2,     2,     2,     2,     2,     2,     1,     2,     2,     1,
+     2,     2,     5,     4,     4,     5,     4,     2,     5,     4,
+     5,     1,     3,     3,     3,     3,     3,     3,     1,     3,
      3,     3,     3,     1,     3,     3,     3,     3,     3,     3,
-     3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
+     1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
+     3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
      3,     3,     1,     3,     3,     1,     3,     3,     1,     3,
-     3,     1,     3,     3,     1,     5,     4,     3,     5,     1,
-     1,     3,     3,     1,     1,     1,     1,     1,     1,     1
+     3,     1,     5,     4,     3,     5,     1,     1,     3,     3,
+     1,     1,     1,     1,     1,     1,     1
 };
 
 static const short yydefact[] = {     0,
-    54,    55,     0,     0,     0,     0,    53,     1,     0,     0,
-     0,    36,    43,    44,    38,     0,    51,    52,    46,    27,
-     0,    23,    24,    25,     0,    62,     0,    41,     0,     0,
-    37,    39,     0,     0,    56,     0,     0,    47,    45,     0,
-   167,     0,     0,   163,    63,     0,    69,    42,    40,     0,
-     0,     0,    61,     0,    49,     0,    26,   171,    17,   169,
-    15,     0,   160,     0,     0,    68,    16,     0,     0,    59,
-   168,     0,   165,    64,    69,    50,    48,    12,     0,    10,
-    11,   173,     0,     8,     9,    13,    14,    15,     0,   179,
-   181,     0,   180,     0,   175,   177,   178,   172,   170,   164,
-    67,    71,    72,    70,     0,   162,     0,    57,   113,     0,
-   129,   111,     0,     0,    90,    93,   129,     0,     0,     0,
-   115,     0,     0,   183,   182,   174,   176,     0,     0,    60,
-   166,     0,     0,     0,     0,   108,    99,    88,     0,     0,
-     0,     0,   107,    21,    18,    22,    20,    19,   114,   129,
-   112,     0,   129,    74,    73,   192,    75,    23,     0,    86,
-     0,    77,    79,    83,    85,     0,    80,     0,    81,   141,
-   129,    87,    82,     0,    58,   119,   116,     0,   128,     0,
-   121,     0,   131,   132,   130,   120,   118,    92,     0,    91,
-    95,     0,     0,     0,     0,     0,     0,     0,   340,     0,
-     0,     0,     0,     6,     5,     2,     3,     4,     7,   339,
-     0,   414,     0,   103,   413,   337,     0,   346,   342,   360,
-     0,   338,   343,   344,   345,   430,   415,   416,   445,   419,
-   420,   423,   433,   452,   457,   464,   475,   480,   483,   486,
-   489,   492,   495,   500,   509,   501,     0,   102,   100,    98,
-   101,   110,    89,   109,   190,     0,   129,    76,    78,    84,
-   106,     0,   138,     0,   143,     0,     0,     0,   281,     0,
-     0,     0,     0,     0,     0,     0,     0,   340,     0,   224,
-     0,     8,   414,     0,   128,   198,     0,     0,   213,     0,
-   194,   196,     0,   197,   202,   214,     0,   203,   215,     0,
-   204,   205,   216,   255,     0,   206,     0,   217,   207,   294,
-     0,   218,   219,   220,   222,   221,     0,   223,   248,   247,
-     0,   245,   246,   243,   244,   242,   126,   124,   117,     0,
-     0,     0,   424,   414,   343,   345,   421,   425,   422,   429,
-   428,   427,   426,     0,   398,     0,     0,     0,    16,     0,
-   434,   431,   435,   432,   441,     0,   414,     0,   184,   187,
+    54,    55,     0,     0,     0,     0,   221,     1,     0,     0,
+     0,    36,    43,    44,    38,     0,    51,    52,    53,    46,
+    27,     0,    23,    24,    25,     0,    62,     0,    41,     0,
+     0,    37,    39,     0,     0,    56,     0,     0,    47,    45,
+     0,   164,     0,     0,   160,    63,     0,    69,    42,    40,
+     0,     0,     0,    61,     0,    49,     0,    26,   168,    17,
+   166,    15,     0,   157,     0,     0,    68,    16,     0,     0,
+    59,   165,     0,   162,    64,    69,    50,    48,    12,     0,
+    10,    11,   170,     0,     8,     9,    13,    14,    15,     0,
+   176,   178,     0,   177,     0,   172,   174,   175,   169,   167,
+   161,    67,    71,    72,    70,     0,   159,     0,    57,   113,
+     0,   129,   111,     0,     0,    90,    93,   129,     0,     0,
+     0,   115,     0,     0,   180,   179,   171,   173,     0,     0,
+    60,   163,     0,     0,     0,     0,   108,    99,    88,     0,
+     0,     0,     0,   107,    21,    18,    22,    20,    19,   114,
+   129,   112,     0,   129,    74,    73,   189,    75,    23,     0,
+    85,     0,    77,    79,    83,    84,     0,    80,     0,    81,
+   139,   129,    86,    82,     0,    87,    58,   119,   116,     0,
+   128,     0,   121,     0,   131,   132,   130,   120,   118,    92,
+     0,    91,    95,     0,     0,     0,     0,     0,     0,     0,
+   337,     0,     0,     0,     0,     6,     5,     2,     3,     4,
+     7,   336,     0,   411,     0,   103,   410,   334,     0,   343,
+   339,   357,     0,   335,   340,   341,   342,   427,   412,   413,
+   442,   416,   417,   420,   430,   449,   454,   461,   472,   477,
+   480,   483,   486,   489,   492,   497,   506,   498,     0,   102,
+   100,    98,   101,   110,    89,   109,   187,     0,   129,    76,
+    78,   106,     0,   137,     0,   141,     0,     0,     0,   278,
+     0,     0,     0,     0,     0,     0,     0,     0,   337,     0,
+     0,     8,   411,     0,   128,   195,     0,     0,   210,     0,
+   191,   193,     0,   194,   199,   211,     0,   200,   212,     0,
+   201,   202,   213,   252,     0,   203,     0,   214,   204,   291,
+     0,   215,   216,   217,   219,   218,     0,   220,   245,   244,
+     0,   242,   243,   240,   241,   239,   126,   124,   117,     0,
+     0,     0,   421,   411,   340,   342,   418,   422,   419,   426,
+   425,   424,   423,     0,   395,     0,     0,     0,    16,     0,
+   431,   428,   432,   429,   438,     0,   411,     0,   181,   184,
      0,     0,     0,     0,     0,     0,    96,     0,     0,     0,
-   369,     0,   418,   417,     0,     0,     0,     0,     0,     0,
+   366,     0,   415,   414,     0,     0,     0,     0,     0,     0,
      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,   507,   508,     0,   145,     0,
-   144,   137,   105,   135,   139,   192,   142,     0,   231,   232,
-   230,   250,     0,   316,     0,   305,   303,     0,   313,   311,
-     0,   277,     0,   258,     0,   327,     0,   291,     0,   309,
-   307,     0,     0,   200,     0,     0,     0,   227,   225,     0,
-     0,   193,   191,   195,   199,   414,   323,   226,   229,     0,
-   276,     0,   414,   296,   300,   293,     0,     0,   320,     0,
-   123,   122,   127,   125,   134,   133,   351,   357,     0,   397,
-   387,   386,   365,     0,   380,   388,     0,   381,     0,   366,
-     0,     0,     0,     0,     0,     0,   348,   341,   185,     0,
-   352,   350,   356,   399,     0,   377,   409,   353,     0,   349,
-   354,   375,   347,   376,   396,   411,     0,   355,   370,     0,
-   449,   446,   450,   447,   451,   448,   455,   453,   456,   454,
-   461,   458,   462,   459,   463,   460,   471,   466,   473,   468,
-   470,   465,   472,   467,   474,     0,   469,   478,   476,   479,
-   477,   482,   481,   485,   484,   488,   487,   491,   490,   494,
-   493,   498,     0,     0,   503,   502,   146,   136,   414,   147,
-     0,     0,   151,     0,   251,     0,   317,   315,   306,   304,
-   314,   312,   278,     0,   259,     0,     0,     0,   324,   328,
-     0,   325,   292,   310,   308,   341,    18,    19,     0,   201,
-   233,     0,     0,     0,   256,     0,   297,     0,   285,     0,
-     0,   322,     0,   405,   406,     0,   392,   393,     0,   389,
-   382,     0,   385,   383,   384,   367,   359,     0,   443,   437,
-   440,   393,     0,   393,     0,   438,   189,   186,   188,   400,
-     0,   410,   407,     0,   412,   408,   361,     0,   497,     0,
-     0,   148,     0,     0,   152,   149,   252,     0,   279,   275,
-     0,   332,     0,   336,   335,   329,   326,   330,   237,     0,
-   234,   235,     0,     0,     0,   261,     0,   265,     0,   268,
-     0,   302,   301,   287,     0,   299,     0,   321,     0,   403,
-     0,   391,   390,   395,   394,     0,   368,   358,   442,   436,
-   444,   439,   379,   378,   401,     0,   362,   363,   499,   496,
-     0,   150,     0,     0,     0,   249,     0,   202,     0,   209,
-   210,     0,   211,   212,     0,   260,   333,     0,   238,     0,
-     0,   236,   274,   271,   272,   510,     0,   263,   266,     0,
-   262,     0,   269,     0,     0,   286,     0,   319,   318,   404,
-   374,     0,   402,   364,     0,   153,     0,     0,     0,   228,
-   280,     0,   334,   331,   241,   239,     0,   273,   270,   264,
-     0,   284,     0,   372,     0,     0,   154,     0,   253,     0,
-     0,   240,   282,   283,   156,     0,     0,     0,     0,   155,
-     0,     0,     0,     0,   289,     0,   254,   288,     0,     0,
-     0
+     0,     0,     0,     0,     0,   504,   505,     0,   143,     0,
+   142,   136,   105,   135,   189,   140,     0,   228,   229,   227,
+   247,     0,   313,     0,   302,   300,     0,   310,   308,     0,
+   274,     0,   255,     0,   324,     0,   288,     0,   306,   304,
+     0,     0,   197,     0,     0,     0,   224,   222,     0,     0,
+   190,   188,   192,   196,   411,   320,   223,   226,     0,   273,
+     0,   411,   293,   297,   290,     0,     0,   317,     0,   123,
+   122,   127,   125,   134,   133,   348,   354,     0,   394,   384,
+   383,   362,     0,   377,   385,     0,   378,     0,   363,     0,
+     0,     0,     0,     0,     0,   345,   338,   182,     0,   349,
+   347,   353,   396,     0,   374,   406,   350,     0,   346,   351,
+   372,   344,   373,   393,   408,     0,   352,   367,     0,   446,
+   443,   447,   444,   448,   445,   452,   450,   453,   451,   458,
+   455,   459,   456,   460,   457,   468,   463,   470,   465,   467,
+   462,   469,   464,   471,     0,   466,   475,   473,   476,   474,
+   479,   478,   482,   481,   485,   484,   488,   487,   491,   490,
+   495,     0,     0,   500,   499,   144,   411,   145,     0,     0,
+   149,     0,   248,     0,   314,   312,   303,   301,   311,   309,
+   275,     0,   256,     0,     0,     0,   321,   325,     0,   322,
+   289,   307,   305,   338,    18,    19,     0,   198,   230,     0,
+     0,     0,   253,     0,   294,     0,   282,     0,     0,   319,
+     0,   402,   403,     0,   389,   390,     0,   386,   379,     0,
+   382,   380,   381,   364,   356,     0,   440,   434,   437,   390,
+     0,   390,     0,   435,   186,   183,   185,   397,     0,   407,
+   404,     0,   409,   405,   358,     0,   494,     0,     0,   146,
+     0,     0,   147,   249,     0,   276,   272,     0,   329,     0,
+   333,   332,   326,   323,   327,   234,     0,   231,   232,     0,
+     0,     0,   258,     0,   262,     0,   265,     0,   299,   298,
+   284,     0,   296,     0,   318,     0,   400,     0,   388,   387,
+   392,   391,     0,   365,   355,   439,   433,   441,   436,   376,
+   375,   398,     0,   359,   360,   496,   493,     0,   148,     0,
+     0,     0,   246,     0,   199,     0,   206,   207,     0,   208,
+   209,     0,   257,   330,     0,   235,     0,     0,   233,   271,
+   268,   269,   507,     0,   260,   263,     0,   259,     0,   266,
+     0,     0,   283,     0,   316,   315,   401,   371,     0,   399,
+   361,     0,   150,     0,     0,     0,   225,   277,     0,   331,
+   328,   238,   236,     0,   270,   267,   261,     0,   281,     0,
+   369,     0,     0,   151,     0,   250,     0,     0,   237,   279,
+   280,   153,     0,     0,     0,     0,   152,     0,     0,     0,
+     0,   286,     0,   251,   285,     0,     0,     0
 };
 
-static const short yydefgoto[] = {   789,
-   210,   281,   211,    85,    86,    68,    60,    87,   212,    22,
-    23,    24,     8,     9,    10,    11,    12,    13,    14,    15,
-   447,   286,   132,   105,    47,    70,   104,   130,   161,   162,
-   163,    91,   114,   115,   116,   213,   165,   262,    92,   111,
-   180,   181,   287,   136,   185,   403,   167,   168,   169,   264,
-   170,   171,   407,   560,   561,   288,    18,    43,    72,    65,
-   107,    44,    63,    94,    95,    96,    97,   214,   361,   289,
-   174,   563,   732,   291,   292,   293,   294,   707,   295,   296,
-   297,   298,   710,   299,   300,   301,   302,   711,   303,   450,
-   304,   595,   667,   668,   669,   670,   305,   306,   713,   307,
-   308,   309,   714,   310,   311,   456,   675,   676,   312,   313,
-   314,   315,   316,   317,   318,   579,   580,   581,   582,   215,
-   216,   217,   218,   219,   220,   742,   686,   221,   495,   222,
-   475,   476,   477,   223,   224,   225,   226,   227,   228,   229,
-   230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
-   240,   241,   242,   243,   244,   245,   246,   247,   398,   496,
-   727
+static const short yydefgoto[] = {   786,
+   212,   281,   213,    86,    87,    69,    61,    88,   214,    23,
+    24,    25,     8,     9,    10,    11,    12,    13,    14,    15,
+   446,   286,   133,   106,    48,    71,   105,   131,   162,   163,
+   164,    92,   115,   116,   117,   215,   166,   263,    93,   112,
+   182,   183,   287,   137,   187,   403,   168,   169,   170,   265,
+   171,   172,   406,   558,   559,   288,    18,    44,    73,    66,
+   108,    45,    64,    95,    96,    97,    98,   216,   361,   289,
+   175,   561,   729,   291,   292,   293,   294,   704,   295,   296,
+   297,   298,   707,   299,   300,   301,   302,   708,   303,   449,
+   304,   593,   664,   665,   666,   667,   305,   306,   710,   307,
+   308,   309,   711,   310,   311,   455,   672,   673,   312,   313,
+   314,   315,   316,   317,   318,   577,   578,   579,   580,   217,
+   218,   219,   220,   221,   222,   739,   683,   223,   494,   224,
+   474,   475,   476,   225,   226,   227,   228,   229,   230,   231,
+   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
+   242,   243,   244,   245,   246,   247,   248,   249,   398,   495,
+   724
 };
 
-static const short yypact[] = {   356,
--32768,-32768,   158,   -35,   339,   439,-32768,-32768,   433,   247,
-   473,-32768,-32768,-32768,-32768,    29,-32768,-32768,-32768,-32768,
-    12,-32768,-32768,-32768,   331,-32768,   491,-32768,    71,   469,
--32768,-32768,   520,   562,-32768,   -35,   510,-32768,-32768,   278,
--32768,   521,   -25,    -8,-32768,   526,   349,-32768,-32768,   -35,
-   591,   343,-32768,   508,-32768,    25,-32768,-32768,-32768,-32768,
-     7,  1014,-32768,   568,   -25,-32768,-32768,   346,   594,-32768,
--32768,   -25,    -8,-32768,   349,-32768,-32768,-32768,   597,-32768,
--32768,-32768,   607,   165,-32768,-32768,   315,   181,   676,-32768,
--32768,    30,-32768,  1034,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,   328,   354,-32768,   -25,-32768,-32768,   370,
-    -4,-32768,   449,   733,-32768,   201,    -4,   122,   208,   377,
--32768,   608,   616,-32768,-32768,-32768,-32768,   617,   938,-32768,
--32768,   354,   629,   630,   215,-32768,-32768,-32768,   648,  2189,
-   227,   489,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    -4,
--32768,   743,    -4,-32768,-32768,   412,-32768,   425,   577,-32768,
-   943,-32768,-32768,   438,-32768,    47,-32768,   455,-32768,-32768,
-   506,-32768,-32768,  1916,-32768,-32768,-32768,   655,   569,   321,
--32768,   589,-32768,-32768,   532,-32768,-32768,-32768,   485,-32768,
--32768,  3001,  3052,  3117,  3168,   533,    18,   615,-32768,  3233,
-  3284,  3349,  5298,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-   302,   915,    63,-32768,   542,   581,   587,-32768,-32768,-32768,
-   656,-32768,   766,-32768,   780,   846,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,   879,   896,   937,   893,   880,   697,   701,
-   717,   741,    74,-32768,-32768,-32768,   841,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,   774,   506,-32768,-32768,-32768,
--32768,   565,   690,   685,-32768,   600,   172,  3400,-32768,   206,
-  2240,    17,   311,   342,    82,   426,   211,   700,  5597,-32768,
-   -35,   651,   837,   229,   522,-32768,   589,   705,-32768,  1848,
--32768,-32768,   702,-32768,-32768,-32768,  1984,-32768,-32768,   709,
--32768,-32768,-32768,-32768,  1984,-32768,  1984,-32768,-32768,  5648,
-   738,-32768,-32768,-32768,-32768,-32768,   436,-32768,   806,   808,
-   846,   891,   908,-32768,-32768,-32768,-32768,   869,-32768,   654,
-   684,   686,-32768,   722,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,    27,-32768,   691,   860,   724,   724,   452,
--32768,-32768,-32768,-32768,-32768,   694,  1044,    43,-32768,-32768,
-   669,   747,   222,  5365,  2305,   538,-32768,   279,  3465,   772,
--32768,   458,-32768,-32768,  3516,  3581,  3632,  3697,  3748,  3813,
-  3864,  3929,  3980,  4045,  4096,  4161,   721,  4212,  4277,  4328,
-  4393,  4444,  4509,  4560,  2356,-32768,-32768,  4625,-32768,   368,
--32768,-32768,-32768,   750,-32768,-32768,-32768,  1848,-32768,-32768,
--32768,-32768,  4676,-32768,    35,-32768,-32768,    56,-32768,-32768,
-    70,-32768,  4741,-32768,  4792,-32768,   718,-32768,  5206,-32768,
--32768,   144,   259,   762,   235,  2421,   652,-32768,-32768,   -35,
-  2472,-32768,-32768,-32768,-32768,  1096,   569,-32768,-32768,   779,
--32768,   810,  1032,-32768,-32768,-32768,    76,  2537,-32768,  4857,
--32768,-32768,-32768,   869,-32768,-32768,-32768,-32768,   -49,   789,
--32768,-32768,-32768,  2588,   724,-32768,   479,   724,   479,-32768,
-  2653,  4908,   240,   135,  2704,   657,-32768,  1671,-32768,  2124,
--32768,-32768,-32768,-32768,   547,-32768,-32768,-32768,   244,-32768,
--32768,-32768,-32768,-32768,   801,-32768,   251,-32768,-32768,  5416,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,   879,-32768,   879,
--32768,   896,-32768,   896,-32768,   896,-32768,   937,-32768,   937,
--32768,   937,-32768,   937,-32768,   165,-32768,-32768,   893,-32768,
-   893,-32768,   880,-32768,   697,-32768,   701,-32768,   717,-32768,
-   741,-32768,   901,   818,-32768,-32768,-32768,-32768,  1076,-32768,
-  1848,   815,   811,  1848,-32768,   335,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,   351,-32768,   823,   463,   132,   718,-32768,
-   455,-32768,-32768,-32768,-32768,-32768,   819,   824,   464,   762,
--32768,   941,    66,    -9,-32768,   851,-32768,  5340,-32768,  5231,
-   840,   854,   857,-32768,-32768,  5481,-32768,-32768,   272,-32768,
-   864,   294,-32768,   864,-32768,-32768,   878,    94,-32768,-32768,
--32768,   819,  4973,   824,  1120,-32768,-32768,-32768,-32768,-32768,
-  5024,-32768,-32768,  5532,-32768,-32768,   354,   548,-32768,  5089,
-   744,-32768,  1848,  2769,-32768,-32768,-32768,  2050,-32768,-32768,
-   263,-32768,   681,-32768,-32768,-32768,-32768,-32768,-32768,  2820,
--32768,-32768,   963,   212,  5140,-32768,   419,-32768,  1564,-32768,
-  5597,-32768,-32768,-32768,   881,   886,  5273,-32768,   268,-32768,
-   728,-32768,-32768,-32768,-32768,   354,-32768,   903,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,   731,-32768,   354,-32768,-32768,
-   504,-32768,   173,   121,   509,-32768,   940,   944,  2050,-32768,
--32768,  2050,-32768,-32768,   904,-32768,   923,   925,-32768,  1020,
-   137,-32768,-32768,-32768,-32768,-32768,   262,-32768,-32768,  1646,
--32768,  1780,-32768,   932,  1984,-32768,   942,-32768,-32768,-32768,
--32768,   354,-32768,-32768,  2885,-32768,   182,  4676,  1984,-32768,
--32768,  2936,-32768,-32768,-32768,-32768,  1029,-32768,-32768,-32768,
-   945,-32768,  1984,-32768,   210,   177,-32768,   401,-32768,  5231,
-   946,-32768,-32768,-32768,-32768,   224,  2050,   947,  5273,-32768,
-   975,  2050,   949,  2050,-32768,  2050,-32768,-32768,  1037,  1040,
--32768
+static const short yypact[] = {   454,
+-32768,-32768,    18,   -39,   246,   367,-32768,-32768,   615,   622,
+   624,-32768,-32768,-32768,-32768,   672,-32768,-32768,-32768,-32768,
+-32768,    16,-32768,-32768,-32768,   255,-32768,   342,-32768,    37,
+   674,-32768,-32768,   749,   794,-32768,   -39,   410,-32768,-32768,
+   468,-32768,   419,    -1,     7,-32768,   422,   137,-32768,-32768,
+   -39,   798,   271,-32768,   362,-32768,    29,-32768,-32768,-32768,
+-32768,   119,  1900,-32768,   439,    -1,-32768,-32768,   364,   441,
+-32768,-32768,    -1,     7,-32768,   137,-32768,-32768,-32768,   469,
+-32768,-32768,-32768,   471,   157,-32768,-32768,   165,   -72,  1051,
+-32768,-32768,    47,-32768,  5450,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,-32768,   134,   196,-32768,    -1,-32768,-32768,
+   259,   -41,-32768,   511,   -34,-32768,   655,   -41,    53,    87,
+   227,-32768,   474,   491,-32768,-32768,-32768,-32768,   494,  1239,
+-32768,-32768,   196,   977,   505,   112,-32768,-32768,-32768,   506,
+  2009,   169,   401,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+   -41,-32768,   637,   -41,-32768,-32768,   333,-32768,   350,  1046,
+-32768,  1259,-32768,-32768,-32768,-32768,    17,-32768,   339,-32768,
+-32768,   405,-32768,-32768,  1736,-32768,-32768,-32768,-32768,   545,
+   433,   374,-32768,   790,-32768,-32768,   467,-32768,-32768,-32768,
+   176,-32768,-32768,  2821,  2872,  2937,  2988,   421,    32,   806,
+-32768,  3053,  3104,  3169,  5118,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,   477,  1166,    22,-32768,   475,   404,   483,-32768,
+-32768,-32768,   546,-32768,   654,-32768,   722,   773,-32768,-32768,
+-32768,-32768,-32768,-32768,-32768,   889,   823,   984,   763,   828,
+   589,   593,   599,   605,    12,-32768,-32768,-32768,   776,-32768,
+-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1041,   405,-32768,
+-32768,-32768,   490,-32768,   538,-32768,   847,   226,  3220,-32768,
+    97,  2060,    63,   278,   314,   214,   352,   138,   550,  5417,
+   -39,   671,  1001,   548,   423,-32768,   790,   565,-32768,  1668,
+-32768,-32768,   572,-32768,-32768,-32768,  1804,-32768,-32768,   587,
+-32768,-32768,-32768,-32768,  1804,-32768,  1804,-32768,-32768,  5468,
+   629,-32768,-32768,-32768,-32768,-32768,   359,-32768,   198,   662,
+   773,   857,   864,-32768,-32768,-32768,-32768,   832,-32768,   761,
+   551,   570,-32768,   482,-32768,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,    34,-32768,   571,   909,   612,   612,   369,
+-32768,-32768,-32768,-32768,-32768,   633,  1268,   170,-32768,-32768,
+   660,   667,   397,  5185,  2125,   464,-32768,   -36,  3285,   691,
+-32768,   394,-32768,-32768,  3336,  3401,  3452,  3517,  3568,  3633,
+  3684,  3749,  3800,  3865,  3916,  3981,   863,  4032,  4097,  4148,
+  4213,  4264,  4329,  4380,  2176,-32768,-32768,  4445,-32768,   430,
+-32768,-32768,-32768,-32768,-32768,-32768,  1668,-32768,-32768,-32768,
+-32768,  4496,-32768,    56,-32768,-32768,    81,-32768,-32768,   113,
+-32768,  4561,-32768,  4612,-32768,   715,-32768,  5026,-32768,-32768,
+   123,   202,   687,   194,  2241,   868,-32768,-32768,   -39,  2292,
+-32768,-32768,-32768,-32768,  1271,   433,-32768,-32768,   679,-32768,
+   701,  1063,-32768,-32768,-32768,    68,  2357,-32768,  4677,-32768,
+-32768,-32768,   832,-32768,-32768,-32768,-32768,   268,   707,-32768,
+-32768,-32768,  2408,   612,-32768,   416,   612,   416,-32768,  2473,
+  4728,   222,   -45,  2524,   382,-32768,  5493,-32768,  1944,-32768,
+-32768,-32768,-32768,   560,-32768,-32768,-32768,   232,-32768,-32768,
+-32768,-32768,-32768,   709,-32768,   239,-32768,-32768,  5236,-32768,
+-32768,-32768,-32768,-32768,-32768,-32768,   889,-32768,   889,-32768,
+   823,-32768,   823,-32768,   823,-32768,   984,-32768,   984,-32768,
+   984,-32768,   984,-32768,   157,-32768,-32768,   763,-32768,   763,
+-32768,   828,-32768,   589,-32768,   593,-32768,   599,-32768,   605,
+-32768,   805,   733,-32768,-32768,-32768,  1121,-32768,  1668,   731,
+-32768,  1668,-32768,   228,-32768,-32768,-32768,-32768,-32768,-32768,
+-32768,   252,-32768,   735,   427,   332,   715,-32768,   339,-32768,
+-32768,-32768,-32768,-32768,   738,   740,   446,   687,-32768,   835,
+    75,   555,-32768,   758,-32768,  5160,-32768,  5051,   782,   766,
+   768,-32768,-32768,  5301,-32768,-32768,   241,-32768,   786,   251,
+-32768,   786,-32768,-32768,   795,    88,-32768,-32768,-32768,   738,
+  4793,   740,   940,-32768,-32768,-32768,-32768,-32768,  4844,-32768,
+-32768,  5352,-32768,-32768,   196,   578,-32768,  4909,   915,-32768,
+  1668,  2589,-32768,-32768,  1870,-32768,-32768,   341,-32768,   954,
+-32768,-32768,-32768,-32768,-32768,-32768,  2640,-32768,-32768,   904,
+   358,  4960,-32768,   559,-32768,  1438,-32768,  5417,-32768,-32768,
+-32768,   818,   814,  5093,-32768,   344,-32768,   661,-32768,-32768,
+-32768,-32768,   196,-32768,   839,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,   703,-32768,   196,-32768,-32768,   448,-32768,   152,
+   104,   449,-32768,   867,   871,  1870,-32768,-32768,  1870,-32768,
+-32768,   838,-32768,   845,   853,-32768,   952,   136,-32768,-32768,
+-32768,-32768,-32768,   400,-32768,-32768,  1521,-32768,  1600,-32768,
+   862,  1804,-32768,   870,-32768,-32768,-32768,-32768,   196,-32768,
+-32768,  2705,-32768,   183,  4496,  1804,-32768,-32768,  2756,-32768,
+-32768,-32768,-32768,   957,-32768,-32768,-32768,   873,-32768,  1804,
+-32768,   189,   186,-32768,   260,-32768,  5051,   877,-32768,-32768,
+-32768,-32768,   207,  1870,   875,  5093,-32768,   911,  1870,   876,
+  1870,-32768,  1870,-32768,-32768,   979,   981,-32768
 };
 
 static const short yypgoto[] = {-32768,
--32768,   -54,   157,   660,    16,  -122,   582,-32768,    -3,   319,
--32768,    64,-32768,  1038,   413,-32768,    69,-32768,-32768,   734,
-   106,   409,-32768,-32768,   997,   979,-32768,  -131,-32768,   898,
--32768,   -79,  -116,   918,  -167,  -194,-32768,-32768,   -64,   285,
-   805,  -325,  -129,   -90,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,   907,-32768,  -544,-32768,   662,   -20,-32768,-32768,-32768,
--32768,  1011,   561,-32768,   978,-32768,-32768,  -176,-32768,  -127,
-   813,   784,  -168,  -276,-32768,   769,  -251,    93,  -560,-32768,
-  -528,-32768,-32768,-32768,  -263,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,   415,   416,  -632,  -527,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,  -516,-32768,  -667,   770,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,   511,-32768,   513,-32768,
--32768,-32768,-32768,   186,-32768,-32768,-32768,-32768,  -426,-32768,
-   736,   126,  -324,  1163,   192,  1197,   283,   379,   507,  -171,
-   583,   704,  -472,-32768,   602,   603,   481,   601,   696,   698,
-   695,   710,   703,-32768,   454,   706,   745,-32768,-32768,   936,
+-32768,   -37,   151,   596,    25,  -119,   453,-32768,    -3,   484,
+-32768,   125,-32768,   973,   708,-32768,    74,-32768,-32768,   659,
+    11,   534,-32768,-32768,   933,   913,-32768,  -132,-32768,   833,
+-32768,   -59,  -116,   856,  -173,  -199,-32768,-32768,   127,   608,
+   744,  -326,  -124,   -81,-32768,-32768,-32768,-32768,-32768,-32768,
+-32768,   843,-32768,  -343,-32768,   602,   -20,-32768,-32768,-32768,
+-32768,   961,   607,-32768,   920,-32768,-32768,   150,-32768,  -128,
+   745,   729,  -162,  -285,-32768,   714,  -246,   325,  -471,   109,
+  -443,-32768,-32768,-32768,  -282,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,   368,   371,  -627,  -362,-32768,-32768,-32768,
+-32768,-32768,-32768,-32768,  -348,-32768,  -665,   728,-32768,-32768,
+-32768,-32768,-32768,-32768,-32768,-32768,   478,-32768,   480,-32768,
+-32768,-32768,-32768,   -79,-32768,-32768,-32768,-32768,  -425,-32768,
+   692,   312,  -325,  1040,   103,  1077,   192,   291,   415,  -117,
+   518,   610,  -473,-32768,   495,   702,   577,   562,   656,   663,
+   676,   673,   670,-32768,   431,   675,   621,-32768,-32768,   781,
 -32768
 };
 
 
-#define	YYLAST		5757
+#define	YYLAST		5602
 
 
-static const short yytable[] = {    21,
-   175,   173,    29,   182,   462,   290,   152,    83,   360,   737,
-   328,   184,    38,   444,   593,   626,   642,   345,   345,   646,
-   337,   339,   341,   343,   479,    76,   143,   467,   352,   354,
-   124,   484,   486,   173,   123,   567,   733,   664,    61,    83,
-   263,    93,    61,   487,   604,   448,   455,   261,   134,   164,
-    20,   605,   665,   451,   618,   452,   569,    59,    88,   252,
-    61,    67,   254,   367,   166,    61,   662,    25,    27,    62,
-   571,    48,    35,    93,    83,   350,   597,    31,   178,    59,
-   265,   164,   426,   638,    59,    88,   666,   708,   394,    36,
-    88,    64,   135,   468,   687,    37,   166,   733,   702,    52,
-    54,    31,   778,    57,   123,    16,    83,    50,   172,  -158,
-    39,   783,    40,    57,    16,    16,    16,   346,   346,   709,
-   712,   662,   144,    77,    61,    88,   182,   331,   125,    88,
-    61,   715,   654,   568,   404,    16,   488,   756,    16,    16,
-   172,  -104,   110,    59,   584,  -104,   113,   427,   708,    67,
-   611,   708,   692,   614,   570,    88,    16,    88,    19,   663,
-   395,   -94,   -94,   464,   434,   631,   401,    89,   572,    49,
-   283,    50,   412,   661,  -295,   598,   156,   756,    88,   681,
-   709,   712,   722,   709,   712,   110,   113,   688,   334,   334,
-   334,   334,   715,   631,    61,   715,   334,   334,   357,    89,
-   182,   178,   189,   512,   514,   516,   416,   696,   146,   466,
-   755,   430,   723,   349,   747,   186,   708,   704,    84,   145,
-   631,   708,   492,   708,   772,   708,   156,   249,   623,   438,
-   757,   612,   440,   721,   159,   144,   631,   284,   179,   564,
-   621,   189,   585,    20,   632,    84,   -31,     1,   709,   712,
-    84,   635,    88,   709,   712,   709,   712,   709,   712,   487,
-   715,   118,   758,   716,   413,   715,   159,   715,   738,   715,
-   776,   746,   682,   -25,   -25,   178,   631,   120,    55,   285,
-   767,    50,    56,    88,   372,    84,   283,   444,   493,    84,
-     2,    20,   140,   446,   684,   629,    20,   141,   142,   724,
-   613,   446,   615,   446,   417,   147,   453,     4,   775,   431,
-   620,   422,   187,     5,   -25,    84,   439,    84,   766,   -25,
-   -25,   -25,   780,   590,   250,   -25,    88,   718,    61,   -25,
-   282,    41,   587,   418,   673,   647,   455,   622,    84,    26,
-   432,   633,   424,    71,   189,     7,   101,    67,   636,   759,
-   504,   649,   586,   284,   348,   -28,     1,  -257,   356,   319,
-   284,   179,   156,    20,    20,   320,   444,   117,   284,   683,
-   284,   334,   334,   334,   334,   334,   334,   334,   334,   334,
-   334,   334,   334,    88,   334,   334,   334,   334,   334,   334,
-   334,   685,   643,    42,   189,   285,   706,   -66,   362,     2,
-    69,   647,   363,   423,   559,    42,   150,   153,    17,   470,
-     3,   119,    84,   455,   329,   179,     4,    17,    17,    17,
-   330,    30,     5,    34,    20,  -159,   428,   128,   648,    57,
-     6,   505,   -30,     1,   425,   179,   459,  -161,    17,    28,
-   -66,    17,    17,    84,   650,    51,   282,   158,   129,   137,
-   655,   690,   480,   658,     7,   444,   321,   448,   509,    17,
-   451,   557,   133,   652,   659,   664,   282,   330,   -34,     1,
-    90,   284,   -29,     1,   148,   319,     2,   158,   334,   158,
-   665,   320,   319,   762,   334,   137,    84,     3,   320,   251,
-   319,    45,   319,     4,   777,   319,   320,   769,   320,     5,
-    57,   320,    90,   189,   659,   697,   455,   255,    74,   412,
-    53,   774,     2,   285,   728,   455,     2,   256,   429,   -32,
-     1,    58,  -323,   182,    20,   706,    66,     3,   460,     4,
-   762,     7,   769,     4,   774,     5,   260,   160,   500,     5,
-   -97,   133,   -65,   536,   481,   -97,   -97,   -97,   -97,   156,
-   510,   739,   322,    46,   741,   653,   660,   283,   134,   -65,
-   283,   -33,     1,     2,   282,    35,   744,     7,    98,   160,
-    46,     7,   321,   203,     3,   612,   -97,   121,   -97,   321,
-     4,   -97,   -97,   -97,   -97,   -65,     5,   321,    37,   321,
-   -35,     1,   321,   319,   102,    20,   745,   109,   178,   320,
-   610,   748,   -65,   610,   501,     2,    20,   112,   149,   502,
-   764,    20,    35,   503,  -323,   347,   151,   154,     7,   334,
-    35,   334,     4,    20,   284,   100,    78,   284,     5,   176,
-   183,   332,   106,   344,     2,   122,   334,    36,    78,   283,
-   630,   698,   368,    37,   446,    99,   631,   631,   188,    88,
-   103,     4,   500,    20,   461,   327,   371,     5,    80,   156,
-     7,    81,    20,   402,    78,   283,   285,   131,   322,   285,
-    80,  -140,     2,    81,    20,   322,   121,   369,    78,    20,
-   323,   717,    20,   322,   463,   322,   465,   370,   322,     7,
-   321,   469,    20,    20,   409,   410,    80,     2,   411,    81,
-    20,    20,    20,    78,    57,   446,   284,   390,   446,   155,
-    80,   284,   391,    81,    20,    20,   589,   282,   501,    35,
-   282,   535,   177,   502,     2,    78,   283,   503,   283,   392,
-    78,   446,   284,    20,   122,    80,    36,    20,    81,    20,
-    20,    20,    37,    32,   500,   446,   319,   435,   285,   319,
-   625,   363,   320,   612,   393,   320,   324,    80,   179,   446,
-    81,    20,    80,    32,   489,    81,    20,    32,   490,    20,
-    78,    20,   284,   446,   285,   284,    20,   577,   446,   406,
-   446,   578,   446,   319,    32,   319,   322,   482,   405,   320,
-   483,   320,  -157,   284,   363,   284,   323,   441,   284,   282,
-   445,   750,    80,   323,   751,    81,    20,   449,   701,    84,
-   501,   323,   284,   323,   364,   502,   323,     2,   365,   503,
-   474,   740,   366,    78,   743,   282,   284,   631,   319,    20,
-   631,   138,   139,   319,   320,   285,   458,   285,   508,   320,
-   284,   253,   139,   321,   491,   284,   321,   284,   558,   284,
-  -342,  -342,  -344,  -344,   319,    80,  -505,  -505,    81,    20,
-   320,   139,   319,   528,   530,   532,   534,   399,   320,   781,
-  -506,  -506,   324,   594,   785,   596,   787,   325,   788,   324,
-   321,   606,   321,   375,   376,   377,   282,   324,   282,   324,
-   373,   374,   324,   634,   319,   388,   389,   319,   378,   379,
-   320,   639,  -342,   320,  -344,   640,  -342,   644,  -344,   645,
-   383,   384,   385,   386,   323,   319,   651,   319,   326,  -352,
-   319,   320,   -15,   320,  -353,   321,   320,  -504,  -504,   364,
-   321,   396,   397,   436,   319,  -415,  -415,   437,   677,   322,
-   320,   661,   322,   671,   380,   381,   382,   678,   319,   387,
-   679,   321,  -416,  -416,   320,   319,   471,   472,   473,   321,
-   612,   320,   319,   722,   319,   141,   142,   319,   320,   319,
-   320,   319,  -373,   320,   735,   320,   322,   320,   322,   518,
-   520,     2,   522,   524,   526,   598,     2,    78,   539,   541,
-   324,   321,    78,   325,   321,   749,    79,  -371,     4,  -208,
-   325,    79,   752,     4,     5,  -504,  -504,   364,   325,     5,
-   325,   365,   321,   325,   321,   366,   753,   321,   754,    80,
-   755,   322,    81,    20,    80,   761,   322,    81,    20,   772,
-   784,   321,   156,   157,   326,   763,   790,   156,   258,   791,
-   782,   326,   786,   773,   779,   321,   537,   322,    33,   326,
-    75,   326,   321,   108,   326,   322,   190,     2,   259,   321,
-   400,   321,    73,    78,   321,   257,   321,   323,   321,   562,
-   323,   127,    79,   443,     4,   248,   408,     2,   454,   457,
-     5,   729,   730,    78,   478,   543,   547,   322,   545,   656,
-   322,   657,    79,   700,     4,    80,   551,     0,    81,    20,
-     5,     0,   549,   556,   323,     0,   323,     0,   322,    82,
-   322,   325,     0,   322,     0,    80,     0,   -15,    81,    20,
-   691,     0,  -504,  -504,   364,     0,     0,   322,   436,   126,
-     0,     0,   366,     0,  -504,  -504,   364,   358,   248,     0,
-   485,   322,     0,   324,   366,     0,   324,     0,   322,   323,
-     0,     0,   326,     0,   323,   322,     0,   322,     0,     0,
-   322,   -15,   322,     0,   322,     0,  -504,  -504,   364,    78,
-     0,     0,   436,     0,     0,   323,   641,     0,   196,     0,
-   324,     0,   324,   323,   197,     0,  -504,  -504,   364,     0,
-     0,   198,   365,     0,     0,   199,   437,     0,     0,     0,
-     0,    80,     0,   415,    81,    20,   421,     0,   200,   201,
-     0,     0,   202,     0,   433,   323,     0,     0,   323,     0,
-     0,   204,   205,   206,   207,   324,     0,   208,   209,     0,
-   324,     0,     0,     0,     0,     0,   323,     0,   323,     0,
-     0,   323,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,   324,     0,     0,     0,   323,     0,     0,     0,   324,
-     0,     0,     0,     0,   325,     0,     0,   325,     0,   323,
-     0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
-     0,     0,     0,   323,     0,   323,     0,     0,   323,     0,
-   323,   324,   323,     0,   324,     0,     0,     0,     0,     0,
-   499,   325,     0,   325,   507,   326,     0,     0,   326,     0,
-     0,     0,   324,     0,   324,     0,     0,   324,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-   554,   324,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   326,     0,   326,   324,   325,     0,   566,     0,
-     0,   325,   324,     0,   335,   335,   335,   335,   574,   324,
-   576,   324,   335,   335,   324,     0,   324,     0,   324,     0,
-     0,   499,   325,     0,     0,     0,     0,     0,     0,     0,
-   325,     0,     0,     0,     0,     0,     0,   326,   336,   336,
-   336,   336,   326,   601,     0,   603,   336,   336,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,   609,
-     0,     0,   325,   326,     0,   325,     0,     0,     0,     0,
-   499,   326,     0,     0,     0,   248,     0,     0,     0,     0,
-     0,     0,     0,   325,     0,   325,     0,     0,   325,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   325,   326,     0,     0,   326,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,   325,     0,     0,     0,
-     0,     0,     0,   325,   326,     0,   326,     0,     0,   326,
-   325,     0,   325,     0,     0,   325,     0,   325,     0,   325,
-     0,     0,     0,   326,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,   326,     0,     0,
-     0,     0,     0,     0,   326,     0,     0,     0,     0,     0,
-     0,   326,     0,   326,     0,     0,   326,     0,   326,     0,
-   326,     0,     0,     0,     0,     0,     0,   335,   335,   335,
-   335,   335,   335,   335,   335,   335,   335,   335,   335,     0,
-   335,   335,   335,   335,   335,   335,   335,     0,     0,     0,
-     0,     0,     0,     0,   266,     0,   694,     0,     0,     0,
+static const short yytable[] = {    22,
+   177,   174,    30,   461,   443,   360,   328,   153,   734,   184,
+    16,   135,   290,   624,   591,   186,    39,   262,    20,    16,
+    16,    16,   367,   478,   121,    84,   394,   454,    51,    77,
+   483,   485,   345,   174,   466,   503,   144,    49,   730,    62,
+   264,    16,    94,    62,    16,    16,    21,   125,   621,    21,
+   447,   610,   124,   145,   616,   136,   565,    84,   450,    89,
+   451,    62,    16,   345,   139,   140,    62,    60,   595,   254,
+   165,    68,   256,    90,    94,   659,   337,   339,   341,   343,
+   350,   567,    32,   636,   352,   354,    89,   147,   684,    60,
+   266,    89,    84,    63,    60,   319,   180,   415,   395,   730,
+   467,   775,   165,    21,   659,    90,    65,    32,    19,   173,
+   780,  -104,   188,   569,    40,  -104,    41,    19,    19,    19,
+   -94,   -94,   124,   582,    84,    62,    89,    78,    26,    28,
+    89,    62,   346,   184,   404,    50,   753,    51,   429,    19,
+   160,   173,    19,    19,   181,   126,   331,   426,   609,   689,
+   146,   612,   658,    60,   566,  -155,    89,   463,    89,    68,
+    19,    53,    55,   346,   433,    58,  -292,   596,   660,   251,
+   486,   283,   160,   705,   629,    58,   138,   401,   678,   568,
+    89,   685,    21,   719,   148,   285,   753,   629,    70,   752,
+   334,   334,   334,   334,   145,   416,    62,   744,   334,   334,
+   357,   706,   486,   629,   111,   184,   693,   769,   114,   189,
+   319,   570,   465,    85,   425,   640,   701,   319,   643,    51,
+   180,   583,   619,    21,   349,   319,   411,   319,   644,   754,
+   319,   718,   630,   129,   705,   629,   430,   705,   176,   633,
+    85,   679,  -339,  -339,   562,    85,    27,   111,   114,   439,
+   743,   681,   646,   119,    89,    42,   167,   511,   513,   515,
+   644,   120,   706,   487,   191,   706,   252,   -97,   181,   -97,
+   176,    72,   -97,   -97,   -97,   -97,   443,   320,   421,   773,
+    85,   764,   709,    89,    85,   629,   283,   772,   167,   627,
+   130,   585,   180,   445,  -339,   584,   712,   699,  -339,   284,
+   285,   445,   705,   445,   191,   777,   452,   705,   157,   705,
+    85,   705,    85,   670,   423,   454,   763,    43,   412,   620,
+   181,   645,   588,   715,   149,   282,    89,   319,    62,   631,
+   706,    21,   651,    43,    85,   706,   634,   706,   680,   706,
+   181,   713,    46,   709,   735,   647,   709,   372,   682,  -156,
+   348,   134,   427,   774,   356,   443,    68,   712,   720,   458,
+   712,   602,    75,   618,   102,  -158,   321,    29,   603,   479,
+   422,   334,   334,   334,   334,   334,   334,   334,   334,   334,
+   334,   334,   334,    89,   334,   334,   334,   334,   334,   334,
+   334,   454,   320,   -65,   508,   417,   641,   491,   703,   320,
+   755,   253,   431,   557,    47,   191,   424,   320,    85,   320,
+    54,   709,   320,   -65,   284,   -66,   709,   285,   709,    59,
+   709,   284,    67,  -320,    47,   712,   157,   649,   257,   284,
+   712,   284,   712,   157,   712,  -254,   -65,    85,   157,    99,
+   282,   103,   258,   443,   428,   721,   656,   652,   656,   411,
+   655,   459,    21,   -28,     1,   191,   -65,   135,   -66,   447,
+   282,   480,   450,   492,   499,   322,    36,   329,    56,   110,
+   469,   113,    57,   330,   150,   623,    36,   334,   610,   319,
+    85,   321,   319,   334,   454,   759,   509,   756,   321,    38,
+    58,   152,   504,   454,   155,    21,   321,     2,   321,   766,
+   369,   321,   694,   687,    21,   185,   190,    21,     3,   320,
+   205,   138,   610,   771,     4,  -320,   319,   100,   319,   650,
+     5,   344,   104,   556,    21,   184,    21,   703,     6,   330,
+   500,   284,   759,    17,   766,   501,   771,   535,   657,   502,
+   742,   745,    17,    17,    17,   327,   371,   736,   437,    21,
+   738,   462,     7,    21,    21,   283,    21,   282,   283,    21,
+    58,   319,   741,   191,    17,   319,   332,    17,    17,   285,
+   464,   468,   285,   362,   364,   368,    21,   363,   365,    21,
+   322,   156,   366,   370,   157,    17,   319,   322,   402,   323,
+    21,    21,   -25,   -25,   319,   322,    91,   322,   321,   390,
+   322,   661,   -97,   134,   391,   661,   761,   -97,   -97,   -97,
+   -97,   392,   180,   159,   -30,     1,   662,   334,   393,   334,
+   662,   -31,     1,   -29,     1,   611,   319,   613,    91,   319,
+    21,    21,   405,   -25,   334,   438,    21,   283,   -25,   -25,
+   -25,   445,  -154,   159,   -25,   159,    89,   319,   -25,   319,
+   663,   285,   319,   628,   725,    21,    21,   440,     2,   629,
+   181,   320,   283,   161,   320,     2,   319,     2,    33,     3,
+   444,   695,   101,   -34,     1,     4,   285,   629,     3,   107,
+   319,     5,     4,   284,     4,   448,   284,   319,     5,    33,
+     5,   118,   324,    33,   319,   161,   319,   322,   320,   319,
+   320,   319,   445,   319,   323,   445,  -341,  -341,   473,   282,
+    33,   323,   282,     7,   132,    36,    31,     2,    35,   323,
+     7,   323,     7,   283,   323,   283,   481,   457,   445,   482,
+   151,   154,    37,   363,     4,   255,   140,   285,    38,   285,
+     5,    52,   445,   320,  -502,  -502,   141,   320,   -32,     1,
+   321,   142,   143,   321,   737,   488,   445,   507,  -341,   489,
+   629,   460,  -341,    58,   490,   284,   594,   434,   320,   284,
+   445,   363,     7,   592,   575,   445,   320,   445,   576,   445,
+   383,   384,   385,   386,   325,   608,   140,   321,   608,   321,
+   284,   282,     2,   -33,     1,   326,   740,   -35,     1,   604,
+    85,   632,   629,     3,     2,   637,   347,   324,   320,     4,
+    79,   320,  -503,  -503,   324,     5,   282,   373,   374,   387,
+   638,   323,   324,   642,   324,   378,   379,   324,   648,   320,
+   284,   320,   321,   284,   320,   658,   321,     2,  -349,    79,
+  -350,     2,    81,   388,   389,    82,    21,     7,   320,   322,
+   668,   284,   322,   284,     4,    79,   284,   321,     4,   675,
+     5,   676,   320,   534,     5,   321,   396,   397,   499,   320,
+   284,    81,   517,   519,    82,    21,   320,   282,   320,   282,
+   674,   320,   610,   320,   284,   320,   322,    81,   322,  -370,
+    82,    21,     7,   375,   376,   377,     7,   321,   284,   325,
+   321,  -412,  -412,   284,   719,   284,   325,   284,  -413,  -413,
+   326,   732,    79,   596,   325,   499,   325,   326,   321,   325,
+   321,   250,   746,   321,   324,   326,  -205,   326,   142,   143,
+   326,   322,   587,  -368,   500,   322,   749,   321,   750,   501,
+   688,   408,   409,   502,    81,   410,   751,    82,    21,   538,
+   540,   321,   752,    21,   714,   758,   322,   769,   321,   527,
+   529,   531,   533,   760,   322,   321,   781,   321,   779,   783,
+   321,   770,   321,   323,   321,   776,   323,   178,   787,   698,
+   788,   500,   536,    34,   358,   250,   501,    76,   109,    79,
+   502,   380,   381,   382,   261,   192,   322,     2,   198,   322,
+    21,   400,   259,    79,   199,   470,   471,   472,   560,   407,
+   323,   200,   323,    74,   128,   201,   325,   322,   442,   322,
+     2,    81,   322,   453,    82,    21,    79,   326,   202,   203,
+   747,   726,   204,   748,   727,    81,   322,   456,    82,    21,
+   477,   206,   207,   208,   209,   542,   122,   210,   211,   414,
+   322,   122,   420,   544,   653,   323,   654,   322,    81,   323,
+   432,    82,    21,   550,   322,   548,   322,   546,   697,   322,
+   179,   322,   555,   322,     0,     0,   324,     0,     0,   324,
+   323,   521,   523,   525,     2,     0,   -15,     0,   323,    36,
+    79,  -501,  -501,   364,    36,    79,     0,   435,   778,     0,
+    79,   436,     0,   782,   123,   784,    37,   785,     0,   123,
+     0,    37,    38,   324,     0,   324,     0,    38,     0,     0,
+   323,     0,    81,   323,     0,    82,    21,    81,     0,     0,
+    82,    21,    81,     0,   399,    82,    21,     0,     0,     0,
+  -138,   323,     0,   323,     0,   498,   323,     0,   -15,   506,
+     0,     0,     0,  -501,  -501,   364,     0,     0,   324,   435,
+   323,     0,   324,   366,     0,     0,     0,     0,   325,     0,
+     0,   325,     0,     0,   323,   553,     0,     0,     0,   326,
+     0,   323,   326,   324,     0,     0,     0,     0,   323,     0,
+   323,   324,   564,   323,     0,   323,     0,   323,     0,     0,
+     0,     0,   572,     0,   574,   325,   -15,   325,     0,     0,
+     0,  -501,  -501,   364,     0,   498,   326,   435,   326,     0,
+     0,   639,     0,   324,     0,     0,   324,     0,     0,     0,
+     0,     0,     0,   335,   335,   335,   335,   599,     0,   601,
+     0,   335,   335,     0,   324,     0,   324,     0,     0,   324,
+   325,     0,     0,   607,   325,     0,  -501,  -501,   364,     0,
+     0,   326,   365,   324,   498,   326,   366,     0,     0,   250,
+   336,   336,   336,   336,     0,   325,     0,   324,   336,   336,
+     0,     0,     2,   325,   324,     0,   326,     0,    79,     0,
+     0,   324,     0,   324,   326,     0,   324,    80,   324,     4,
+   324,     0,     2,     0,     0,     5,     0,     0,    79,     0,
+     0,     0,     0,     0,     0,   325,     0,    80,   325,     4,
+    81,     0,     0,    82,    21,     5,   326,     0,     0,   326,
+     0,     0,     0,   157,   158,     0,   325,     7,   325,     0,
+    81,   325,     0,    82,    21,     0,     0,   326,     0,   326,
+     0,     0,   326,   157,   260,   325,     0,     7,  -501,  -501,
+   364,  -501,  -501,   364,   484,     0,   326,   365,   366,   325,
+     0,   436,     0,     0,     0,     0,   325,     0,     0,     0,
+   326,     0,     0,   325,     0,   325,     0,   326,   325,     0,
+   325,     0,   325,     0,   326,     0,   326,     0,     0,   326,
+     0,   326,     0,   326,     0,     0,     0,     0,     0,   691,
+     0,     0,     0,     0,   335,   335,   335,   335,   335,   335,
+   335,   335,   335,   335,   335,   335,     0,   335,   335,   335,
+   335,   335,   335,   335,     0,     0,     0,     0,   267,     0,
+     0,     0,   723,     0,     0,     0,     0,     0,   731,     0,
      0,   336,   336,   336,   336,   336,   336,   336,   336,   336,
    336,   336,   336,     0,   336,   336,   336,   336,   336,   336,
    336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-   726,     0,     0,     0,     0,     0,   734,     2,   194,   195,
-   664,   267,   268,    78,   269,     0,     0,   270,     0,     0,
-     0,   271,   196,     0,     0,   665,     0,     0,   272,   273,
-     5,   274,     0,   275,   276,   198,   277,     0,     0,   278,
-     0,     0,     0,     0,   335,    80,   266,     0,    81,    20,
-   335,     0,     0,     0,     0,     0,   279,     0,   156,   731,
-     0,     0,   280,     0,     0,   204,   205,   206,   207,     0,
-     0,   208,   209,     0,     0,     0,     0,     0,   336,     0,
-     0,     0,     0,   768,   336,     0,     0,   771,     0,     2,
-   194,   195,   664,   267,   268,    78,   269,     0,     0,   270,
-     0,     0,     0,   271,   196,     0,     0,   665,     0,     0,
-   272,   273,     5,   274,     0,   275,   276,   198,   277,     0,
-    78,   278,     0,     0,     0,     0,     0,    80,     0,   196,
-    81,    20,     0,     0,     0,   197,     0,     0,   279,     0,
-   156,   760,   198,     0,   280,     0,   199,   204,   205,   206,
-   207,     0,    80,   208,   209,    81,    20,     0,     0,   200,
-   201,     0,     0,   202,     0,     0,     0,     0,     0,     0,
-     0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
-   266,     0,     0,     0,     0,   335,     0,   335,     0,     0,
+     0,     2,   196,   197,   661,   268,   269,    79,   270,     0,
+     0,   271,     0,     0,     0,   272,   198,     0,     0,   662,
+     0,     0,   273,   274,     5,   275,     0,   276,   277,   200,
+   278,     0,     0,   279,     0,     0,     0,     0,     0,    81,
+   335,   267,    82,    21,     0,   765,   335,     0,     0,   768,
+   280,     0,   157,   728,     0,     0,     7,     0,     0,   206,
+   207,   208,   209,     0,     0,   210,   211,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,   336,     0,     0,
+     0,     0,     0,   336,     2,   196,   197,   661,   268,   269,
+    79,   270,     0,     0,   271,     0,     0,     0,   272,   198,
+     0,     0,   662,     0,     0,   273,   274,     5,   275,     0,
+   276,   277,   200,   278,     0,     0,   279,     0,     0,     0,
+   267,     0,    81,     0,     0,    82,    21,     0,     0,     0,
+     0,     0,     0,   280,     0,   157,   757,     0,     0,     7,
+     0,     0,   206,   207,   208,   209,     0,     0,   210,   211,
      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   335,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,   336,
-     0,   336,     0,     2,   194,   195,  -267,   267,   268,    78,
-   269,     0,     0,   270,     0,     0,   336,   271,   196,     0,
-     0,  -267,     0,     0,   272,   273,     5,   274,   266,   275,
-   276,   198,   277,     0,     0,   278,     0,     0,     0,     0,
-     0,    80,     0,     0,    81,    20,     0,     0,     0,     0,
-     0,     0,   279,     0,   156,  -267,     0,     0,   280,     0,
-     0,   204,   205,   206,   207,     0,     0,   208,   209,     0,
-     0,     2,   194,   195,     0,   267,   268,    78,   269,     0,
-     0,   270,     0,     0,     0,   271,   196,     0,     0,     0,
-     0,     0,   272,   273,     5,   274,   266,   275,   276,   198,
-   277,     0,     0,   278,     0,     0,     0,     0,     0,    80,
-     0,     0,    81,    20,     0,     0,     0,     0,     0,     0,
-   279,     0,   156,   442,     0,     0,   280,     0,     0,   204,
-   205,   206,   207,     0,     0,   208,   209,     0,     0,     2,
-   194,   195,     0,   267,   268,    78,   269,     0,     0,   270,
-     0,     0,     0,   271,   196,     0,     0,     0,     0,     0,
-   272,   273,     5,   274,   266,   275,   276,   198,   277,     0,
-     0,   278,     0,     0,     0,     0,     0,    80,     0,     0,
-    81,    20,     0,     0,     0,     0,     0,     0,   279,     0,
-   156,     0,     0,     0,   280,     0,     0,   204,   205,   206,
-   207,     0,     0,   208,   209,     0,     0,     2,   194,   195,
-     0,   267,   268,    78,   269,     0,     0,   270,     0,     0,
-     0,   271,   196,     0,     0,     0,     0,     0,   272,   273,
-   266,   274,     0,   275,   276,   198,   277,     0,     0,   278,
-     0,     0,     0,     0,     0,    80,     0,     0,    81,    20,
-     0,     0,     0,     0,     0,     0,   279,     0,   156,     0,
-     0,     0,   280,     0,     0,   204,   205,   206,   207,     0,
-     0,   208,   209,     2,   194,   195,     0,   705,   268,    78,
-   269,     0,     0,   270,     0,     0,     0,   271,   196,     0,
-     0,     0,     0,     0,   272,   273,     0,   274,     0,   275,
-   276,   198,   277,     0,   627,   278,   192,   193,     0,     0,
-     0,    80,     0,     0,    81,    20,     0,     0,     0,     0,
-     0,     0,   279,     0,   156,     0,     0,     0,   280,     0,
-     0,   204,   205,   206,   207,     0,     0,   208,   209,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,   194,   195,
-     0,     0,     0,    78,     0,     0,     0,     0,     0,     0,
-     0,     0,   196,     0,     0,     0,     0,     0,   197,   191,
-     0,   192,   193,     0,     0,   198,     0,     0,     0,   199,
-     0,     0,     0,     0,     0,    80,     0,     0,    81,    20,
-     0,     0,   200,   201,     0,     0,   202,     0,   203,   628,
-     0,     0,     0,     0,     0,   204,   205,   206,   207,     0,
-     0,   208,   209,   194,   195,     0,     0,     0,    78,     0,
-   419,     0,   192,   193,     0,     0,     0,   196,     0,     0,
-     0,     0,     0,   197,     0,     0,     0,     0,     0,     0,
-   198,     0,     0,     0,   199,     0,     0,     0,     0,     0,
-    80,     0,     0,    81,    20,     0,     0,   200,   201,     0,
-     0,   202,     0,   203,   194,   195,     0,     0,     0,    78,
-   204,   205,   206,   207,     0,     0,   208,   209,   196,     0,
-     0,     0,     0,     0,   197,   497,     0,   192,   193,     0,
-     0,   198,     0,     0,     0,   199,     0,     0,     0,     0,
-     0,    80,     0,     0,    81,    20,     0,     0,   200,   201,
-     0,     0,   202,     0,     0,     0,     0,     0,   420,     0,
-     0,   204,   205,   206,   207,     0,     0,   208,   209,   194,
-   195,     0,     0,     0,    78,     0,   552,     0,   192,   193,
-     0,     0,     0,   196,     0,     0,     0,     0,     0,   197,
-     0,     0,     0,     0,     0,     0,   198,     0,     0,     0,
-   199,     0,     0,     0,     0,     0,    80,     0,     0,    81,
-    20,     0,     0,   200,   201,     0,     0,   202,     0,     0,
-   194,   195,   498,     0,     0,    78,   204,   205,   206,   207,
-     0,     0,   208,   209,   196,     0,     0,     0,     0,     0,
-   197,   497,     0,   192,   193,     0,     0,   198,     0,     0,
-     0,   199,     0,     0,     0,     0,     0,    80,     0,     0,
-    81,    20,     0,   553,   200,   201,     0,     0,   202,     0,
-     0,     0,     0,     0,     0,     0,     0,   204,   205,   206,
-   207,     0,     0,   208,   209,   194,   195,     0,     0,     0,
-    78,     0,   591,     0,   192,   193,     0,     0,     0,   196,
-     0,     0,     0,     0,     0,   197,     0,     0,     0,     0,
-     0,     0,   198,     0,     0,     0,   199,     0,     0,     0,
-     0,     0,    80,     0,     0,    81,    20,     0,     0,   200,
-   201,     0,     0,   202,     0,     0,   194,   195,   588,     0,
-     0,    78,   204,   205,   206,   207,     0,     0,   208,   209,
-   196,     0,     0,     0,     0,     0,   197,   599,     0,   192,
-   193,     0,     0,   198,     0,     0,     0,   199,     0,     0,
-     0,     0,     0,    80,     0,     0,    81,    20,     0,     0,
-   200,   201,     0,     0,   202,   592,     0,     0,     0,     0,
-     0,     0,     0,   204,   205,   206,   207,     0,     0,   208,
-   209,   194,   195,     0,     0,     0,    78,     0,   607,     0,
-   192,   193,     0,     0,     0,   196,     0,     0,     0,     0,
-     0,   197,     0,     0,     0,     0,     0,     0,   198,     0,
-     0,     0,   199,     0,     0,     0,     0,     0,    80,     0,
-     0,    81,    20,     0,     0,   200,   201,     0,     0,   202,
-     0,     0,   194,   195,     0,   600,     0,    78,   204,   205,
-   206,   207,     0,     0,   208,   209,   196,     0,     0,     0,
-     0,     0,   197,   616,     0,   192,   193,     0,     0,   198,
-     0,     0,     0,   199,     0,     0,     0,     0,     0,    80,
-     0,     0,    81,    20,     0,     0,   200,   201,     0,     0,
-   202,     0,     0,     0,     0,   608,     0,     0,     0,   204,
-   205,   206,   207,     0,     0,   208,   209,   194,   195,     0,
-     0,     0,    78,     0,   497,     0,   192,   193,     0,     0,
-     0,   196,     0,     0,     0,     0,     0,   197,     0,     0,
-     0,     0,     0,     0,   198,     0,     0,     0,   199,     0,
-     0,     0,     0,     0,    80,     0,     0,    81,    20,     0,
-     0,   200,   201,     0,     0,   202,   617,     0,   194,   195,
-     0,     0,     0,    78,   204,   205,   206,   207,     0,     0,
-   208,   209,   196,     0,     0,     0,     0,     0,   197,   591,
-     0,   192,   193,     0,     0,   198,     0,     0,     0,   199,
-     0,     0,     0,     0,     0,    80,     0,     0,    81,    20,
-     0,     0,   200,   201,     0,     0,   202,     0,     0,     0,
-     0,   624,     0,     0,     0,   204,   205,   206,   207,     0,
-     0,   208,   209,   194,   195,     0,     0,     0,    78,     0,
-   719,     0,   192,   193,     0,     0,     0,   196,     0,     0,
-     0,     0,     0,   197,     0,     0,     0,     0,     0,     0,
-   198,     0,     0,     0,   199,     0,     0,     0,     0,     0,
-    80,     0,     0,    81,    20,     0,     0,   200,   201,     0,
-     0,   202,   703,     0,   194,   195,     0,     0,     0,    78,
-   204,   205,   206,   207,     0,     0,   208,   209,   196,     0,
-     0,     0,     0,     0,   197,   719,     0,   192,   193,     0,
-     0,   198,     0,     0,     0,   199,     0,     0,     0,     0,
-     0,    80,     0,     0,    81,    20,     0,     0,   200,   201,
-     0,     0,   202,   720,     0,     0,     0,     0,     0,     0,
-     0,   204,   205,   206,   207,     0,     0,   208,   209,   194,
-   195,     0,     0,     0,    78,     0,   599,     0,   192,   193,
-     0,     0,     0,   196,     0,     0,     0,     0,     0,   197,
-     0,     0,     0,     0,     0,     0,   198,     0,     0,     0,
-   199,     0,     0,     0,     0,     0,    80,     0,     0,    81,
-    20,     0,     0,   200,   201,     0,     0,   202,   765,     0,
-   194,   195,     0,     0,     0,    78,   204,   205,   206,   207,
-     0,     0,   208,   209,   196,     0,     0,     0,     0,     0,
-   197,   333,     0,   192,   193,     0,     0,   198,     0,     0,
-     0,   199,     0,     0,     0,     0,     0,    80,     0,     0,
-    81,    20,     0,     0,   200,   201,     0,     0,   202,     0,
-     0,     0,     0,     0,   770,     0,     0,   204,   205,   206,
-   207,     0,     0,   208,   209,   194,   195,     0,     0,     0,
-    78,     0,   338,     0,   192,   193,     0,     0,     0,   196,
-     0,     0,     0,     0,     0,   197,     0,     0,     0,     0,
-     0,     0,   198,     0,     0,     0,   199,     0,     0,     0,
-     0,     0,    80,     0,     0,    81,    20,     0,     0,   200,
-   201,     0,     0,   202,     0,     0,   194,   195,     0,     0,
-     0,    78,   204,   205,   206,   207,     0,     0,   208,   209,
-   196,     0,     0,     0,     0,     0,   197,   340,     0,   192,
-   193,     0,     0,   198,     0,     0,     0,   199,     0,     0,
-     0,     0,     0,    80,     0,     0,    81,    20,     0,     0,
-   200,   201,     0,     0,   202,     0,     0,     0,     0,     0,
-     0,     0,     0,   204,   205,   206,   207,     0,     0,   208,
-   209,   194,   195,     0,     0,     0,    78,     0,   342,     0,
-   192,   193,     0,     0,     0,   196,     0,     0,     0,     0,
-     0,   197,     0,     0,     0,     0,     0,     0,   198,     0,
-     0,     0,   199,     0,     0,     0,     0,     0,    80,     0,
-     0,    81,    20,     0,     0,   200,   201,     0,     0,   202,
-     0,     0,   194,   195,     0,     0,     0,    78,   204,   205,
-   206,   207,     0,     0,   208,   209,   196,     0,     0,     0,
-     0,     0,   197,   351,     0,   192,   193,     0,     0,   198,
-     0,     0,     0,   199,     0,     0,     0,     0,     0,    80,
-     0,     0,    81,    20,     0,     0,   200,   201,     0,     0,
-   202,     0,     0,     0,     0,     0,     0,     0,     0,   204,
-   205,   206,   207,     0,     0,   208,   209,   194,   195,     0,
-     0,     0,    78,     0,   353,     0,   192,   193,     0,     0,
-     0,   196,     0,     0,     0,     0,     0,   197,     0,     0,
-     0,     0,     0,     0,   198,     0,     0,     0,   199,     0,
-     0,     0,     0,     0,    80,     0,     0,    81,    20,     0,
-     0,   200,   201,     0,     0,   202,     0,     0,   194,   195,
-     0,     0,     0,    78,   204,   205,   206,   207,     0,     0,
-   208,   209,   196,     0,     0,     0,     0,     0,   197,   355,
-     0,   192,   193,     0,     0,   198,     0,     0,     0,   199,
-     0,     0,     0,     0,     0,    80,     0,     0,    81,    20,
-     0,     0,   200,   201,     0,     0,   202,     0,     0,     0,
-     0,     0,     0,     0,     0,   204,   205,   206,   207,     0,
-     0,   208,   209,   194,   195,     0,     0,     0,    78,     0,
-   414,     0,   192,   193,     0,     0,     0,   196,     0,     0,
-     0,     0,     0,   197,     0,     0,     0,     0,     0,     0,
-   198,     0,     0,     0,   199,     0,     0,     0,     0,     0,
-    80,     0,     0,    81,    20,     0,     0,   200,   201,     0,
-     0,   202,     0,     0,   194,   195,     0,     0,     0,    78,
-   204,   205,   206,   207,     0,     0,   208,   209,   196,     0,
-     0,     0,     0,     0,   197,   506,     0,   192,   193,     0,
-     0,   198,     0,     0,     0,   199,     0,     0,     0,     0,
-     0,    80,     0,     0,    81,    20,     0,     0,   200,   201,
-     0,     0,   202,     0,     0,     0,     0,     0,     0,     0,
-     0,   204,   205,   206,   207,     0,     0,   208,   209,   194,
-   195,     0,     0,     0,    78,     0,   511,     0,   192,   193,
-     0,     0,     0,   196,     0,     0,     0,     0,     0,   197,
-     0,     0,     0,     0,     0,     0,   198,     0,     0,     0,
-   199,     0,     0,     0,     0,     0,    80,     0,     0,    81,
-    20,     0,     0,   200,   201,     0,     0,   202,     0,     0,
-   194,   195,     0,     0,     0,    78,   204,   205,   206,   207,
-     0,     0,   208,   209,   196,     0,     0,     0,     0,     0,
-   197,   513,     0,   192,   193,     0,     0,   198,     0,     0,
-     0,   199,     0,     0,     0,     0,     0,    80,     0,     0,
-    81,    20,     0,     0,   200,   201,     0,     0,   202,     0,
-     0,     0,     0,     0,     0,     0,     0,   204,   205,   206,
-   207,     0,     0,   208,   209,   194,   195,     0,     0,     0,
-    78,     0,   515,     0,   192,   193,     0,     0,     0,   196,
-     0,     0,     0,     0,     0,   197,     0,     0,     0,     0,
-     0,     0,   198,     0,     0,     0,   199,     0,     0,     0,
-     0,     0,    80,     0,     0,    81,    20,     0,     0,   200,
-   201,     0,     0,   202,     0,     0,   194,   195,     0,     0,
-     0,    78,   204,   205,   206,   207,     0,     0,   208,   209,
-   196,     0,     0,     0,     0,     0,   197,   517,     0,   192,
-   193,     0,     0,   198,     0,     0,     0,   199,     0,     0,
-     0,     0,     0,    80,     0,     0,    81,    20,     0,     0,
-   200,   201,     0,     0,   202,     0,     0,     0,     0,     0,
-     0,     0,     0,   204,   205,   206,   207,     0,     0,   208,
-   209,   194,   195,     0,     0,     0,    78,     0,   519,     0,
-   192,   193,     0,     0,     0,   196,     0,     0,     0,     0,
-     0,   197,     0,     0,     0,     0,     0,     0,   198,     0,
-     0,     0,   199,     0,     0,     0,     0,     0,    80,     0,
-     0,    81,    20,     0,     0,   200,   201,     0,     0,   202,
-     0,     0,   194,   195,     0,     0,     0,    78,   204,   205,
-   206,   207,     0,     0,   208,   209,   196,     0,     0,     0,
-     0,     0,   197,   521,     0,   192,   193,     0,     0,   198,
-     0,     0,     0,   199,     0,     0,     0,     0,     0,    80,
-     0,     0,    81,    20,     0,     0,   200,   201,     0,     0,
-   202,     0,     0,     0,     0,     0,     0,     0,     0,   204,
-   205,   206,   207,     0,     0,   208,   209,   194,   195,     0,
-     0,     0,    78,     0,   523,     0,   192,   193,     0,     0,
-     0,   196,     0,     0,     0,     0,     0,   197,     0,     0,
-     0,     0,     0,     0,   198,     0,     0,     0,   199,     0,
-     0,     0,     0,     0,    80,     0,     0,    81,    20,     0,
-     0,   200,   201,     0,     0,   202,     0,     0,   194,   195,
-     0,     0,     0,    78,   204,   205,   206,   207,     0,     0,
-   208,   209,   196,     0,     0,     0,     0,     0,   197,   525,
-     0,   192,   193,     0,     0,   198,     0,     0,     0,   199,
-     0,     0,     0,     0,     0,    80,     0,     0,    81,    20,
-     0,     0,   200,   201,     0,     0,   202,     0,     0,     0,
-     0,     0,     0,     0,     0,   204,   205,   206,   207,     0,
-     0,   208,   209,   194,   195,     0,     0,     0,    78,     0,
-   527,     0,   192,   193,     0,     0,     0,   196,     0,     0,
-     0,     0,     0,   197,     0,     0,     0,     0,     0,     0,
-   198,     0,     0,     0,   199,     0,     0,     0,     0,     0,
-    80,     0,     0,    81,    20,     0,     0,   200,   201,     0,
-     0,   202,     0,     0,   194,   195,     0,     0,     0,    78,
-   204,   205,   206,   207,     0,     0,   208,   209,   196,     0,
-     0,     0,     0,     0,   197,   529,     0,   192,   193,     0,
-     0,   198,     0,     0,     0,   199,     0,     0,     0,     0,
-     0,    80,     0,     0,    81,    20,     0,     0,   200,   201,
-     0,     0,   202,     0,     0,     0,     0,     0,     0,     0,
-     0,   204,   205,   206,   207,     0,     0,   208,   209,   194,
-   195,     0,     0,     0,    78,     0,   531,     0,   192,   193,
-     0,     0,     0,   196,     0,     0,     0,     0,     0,   197,
-     0,     0,     0,     0,     0,     0,   198,     0,     0,     0,
-   199,     0,     0,     0,     0,     0,    80,     0,     0,    81,
-    20,     0,     0,   200,   201,     0,     0,   202,     0,     0,
-   194,   195,     0,     0,     0,    78,   204,   205,   206,   207,
-     0,     0,   208,   209,   196,     0,     0,     0,     0,     0,
-   197,   533,     0,   192,   193,     0,     0,   198,     0,     0,
-     0,   199,     0,     0,     0,     0,     0,    80,     0,     0,
-    81,    20,     0,     0,   200,   201,     0,     0,   202,     0,
-     0,     0,     0,     0,     0,     0,     0,   204,   205,   206,
-   207,     0,     0,   208,   209,   194,   195,     0,     0,     0,
-    78,     0,   538,     0,   192,   193,     0,     0,     0,   196,
-     0,     0,     0,     0,     0,   197,     0,     0,     0,     0,
-     0,     0,   198,     0,     0,     0,   199,     0,     0,     0,
-     0,     0,    80,     0,     0,    81,    20,     0,     0,   200,
-   201,     0,     0,   202,     0,     0,   194,   195,     0,     0,
-     0,    78,   204,   205,   206,   207,     0,     0,   208,   209,
-   196,     0,     0,     0,     0,     0,   197,   540,     0,   192,
-   193,     0,     0,   198,     0,     0,     0,   199,     0,     0,
-     0,     0,     0,    80,     0,     0,    81,    20,     0,     0,
-   200,   201,     0,     0,   202,     0,     0,     0,     0,     0,
-     0,     0,     0,   204,   205,   206,   207,     0,     0,   208,
-   209,   194,   195,     0,     0,     0,    78,     0,   542,     0,
-   192,   193,     0,     0,     0,   196,     0,     0,     0,     0,
-     0,   197,     0,     0,     0,     0,     0,     0,   198,     0,
-     0,     0,   199,     0,     0,     0,     0,     0,    80,     0,
-     0,    81,    20,     0,     0,   200,   201,     0,     0,   202,
-     0,     0,   194,   195,     0,     0,     0,    78,   204,   205,
-   206,   207,     0,     0,   208,   209,   196,     0,     0,     0,
-     0,     0,   197,   544,     0,   192,   193,     0,     0,   198,
-     0,     0,     0,   199,     0,     0,     0,     0,     0,    80,
-     0,     0,    81,    20,     0,     0,   200,   201,     0,     0,
-   202,     0,     0,     0,     0,     0,     0,     0,     0,   204,
-   205,   206,   207,     0,     0,   208,   209,   194,   195,     0,
-     0,     0,    78,     0,   546,     0,   192,   193,     0,     0,
-     0,   196,     0,     0,     0,     0,     0,   197,     0,     0,
-     0,     0,     0,     0,   198,     0,     0,     0,   199,     0,
-     0,     0,     0,     0,    80,     0,     0,    81,    20,     0,
-     0,   200,   201,     0,     0,   202,     0,     0,   194,   195,
-     0,     0,     0,    78,   204,   205,   206,   207,     0,     0,
-   208,   209,   196,     0,     0,     0,     0,     0,   197,   548,
-     0,   192,   193,     0,     0,   198,     0,     0,     0,   199,
-     0,     0,     0,     0,     0,    80,     0,     0,    81,    20,
-     0,     0,   200,   201,     0,     0,   202,     0,     0,     0,
-     0,     0,     0,     0,     0,   204,   205,   206,   207,     0,
-     0,   208,   209,   194,   195,     0,     0,     0,    78,     0,
-   550,     0,   192,   193,     0,     0,     0,   196,     0,     0,
-     0,     0,     0,   197,     0,     0,     0,     0,     0,     0,
-   198,     0,     0,     0,   199,     0,     0,     0,     0,     0,
-    80,     0,     0,    81,    20,     0,     0,   200,   201,     0,
-     0,   202,     0,     0,   194,   195,     0,     0,     0,    78,
-   204,   205,   206,   207,     0,     0,   208,   209,   196,     0,
-     0,     0,     0,     0,   197,   555,     0,   192,   193,     0,
-     0,   198,     0,     0,     0,   199,     0,     0,     0,     0,
-     0,    80,     0,     0,    81,    20,     0,     0,   200,   201,
-     0,     0,   202,     0,     0,     0,     0,     0,     0,     0,
-     0,   204,   205,   206,   207,     0,     0,   208,   209,   194,
-   195,     0,     0,     0,    78,     0,   565,     0,   192,   193,
-     0,     0,     0,   196,     0,     0,     0,     0,     0,   197,
-     0,     0,     0,     0,     0,     0,   198,     0,     0,     0,
-   199,     0,     0,     0,     0,     0,    80,     0,     0,    81,
-    20,     0,     0,   200,   201,     0,     0,   202,     0,     0,
-   194,   195,     0,     0,     0,    78,   204,   205,   206,   207,
-     0,     0,   208,   209,   196,     0,     0,     0,     0,     0,
-   197,   573,     0,   192,   193,     0,     0,   198,     0,     0,
-     0,   199,     0,     0,     0,     0,     0,    80,     0,     0,
-    81,    20,     0,     0,   200,   201,     0,     0,   202,     0,
-     0,     0,     0,     0,     0,     0,     0,   204,   205,   206,
-   207,     0,     0,   208,   209,   194,   195,     0,     0,     0,
-    78,     0,   575,     0,   192,   193,     0,     0,     0,   196,
-     0,     0,     0,     0,     0,   197,     0,     0,     0,     0,
-     0,     0,   198,     0,     0,     0,   199,     0,     0,     0,
-     0,     0,    80,     0,     0,    81,    20,     0,     0,   200,
-   201,     0,     0,   202,     0,     0,   194,   195,     0,     0,
-     0,    78,   204,   205,   206,   207,     0,     0,   208,   209,
-   196,     0,     0,     0,     0,     0,   197,   602,     0,   192,
-   193,     0,     0,   198,     0,     0,     0,   199,     0,     0,
-     0,     0,     0,    80,     0,     0,    81,    20,     0,     0,
-   200,   201,     0,     0,   202,     0,     0,     0,     0,     0,
-     0,     0,     0,   204,   205,   206,   207,     0,     0,   208,
-   209,   194,   195,     0,     0,     0,    78,     0,   619,     0,
-   192,   193,     0,     0,     0,   196,     0,     0,     0,     0,
-     0,   197,     0,     0,     0,     0,     0,     0,   198,     0,
-     0,     0,   199,     0,     0,     0,     0,     0,    80,     0,
-     0,    81,    20,     0,     0,   200,   201,     0,     0,   202,
-     0,     0,   194,   195,     0,     0,     0,    78,   204,   205,
-   206,   207,     0,     0,   208,   209,   196,     0,     0,     0,
-     0,     0,   197,   689,     0,   192,   193,     0,     0,   198,
-     0,     0,     0,   199,     0,     0,     0,     0,     0,    80,
-     0,     0,    81,    20,     0,     0,   200,   201,     0,     0,
-   202,     0,     0,     0,     0,     0,     0,     0,     0,   204,
-   205,   206,   207,     0,     0,   208,   209,   194,   195,     0,
-     0,     0,    78,     0,   693,     0,   192,   193,     0,     0,
-     0,   196,     0,     0,     0,     0,     0,   197,     0,     0,
-     0,     0,     0,     0,   198,     0,     0,     0,   199,     0,
-     0,     0,     0,     0,    80,     0,     0,    81,    20,     0,
-     0,   200,   201,     0,     0,   202,     0,     0,   194,   195,
-     0,     0,     0,    78,   204,   205,   206,   207,     0,     0,
-   208,   209,   196,     0,     0,     0,     0,     0,   197,   699,
-     0,   192,   193,     0,     0,   198,     0,     0,     0,   199,
-     0,     0,     0,     0,     0,    80,     0,     0,    81,    20,
-     0,     0,   200,   201,     0,     0,   202,     0,     0,     0,
-     0,     0,     0,     0,     0,   204,   205,   206,   207,     0,
-     0,   208,   209,   194,   195,     0,     0,     0,    78,     0,
-   725,     0,   192,   193,     0,     0,     0,   196,     0,     0,
-     0,     0,     0,   197,     0,     0,     0,     0,     0,     0,
-   198,     0,     0,     0,   199,     0,     0,     0,     0,     0,
-    80,     0,     0,    81,    20,     0,     0,   200,   201,     0,
-     0,   202,     0,     0,   194,   195,     0,     0,     0,    78,
-   204,   205,   206,   207,     0,     0,   208,   209,   196,     0,
-     0,     0,     0,     0,   197,     0,   583,     0,     0,     0,
-     0,   198,     0,     0,     0,   199,     0,     0,     0,     0,
-     0,    80,     0,     0,    81,    20,     0,     0,   200,   201,
-     0,   674,   202,     0,     0,     0,     0,     0,     0,     0,
-     0,   204,   205,   206,   207,     0,     0,   208,   209,  -290,
-  -290,  -290,     0,     0,     0,  -290,     0,     0,     0,     0,
-     0,     0,     0,     0,  -290,     0,     0,     0,     0,     0,
-  -290,     0,     0,   736,     0,   194,   195,  -290,     0,     0,
-    78,  -290,     0,     0,     0,     0,     0,  -290,     0,   196,
-  -290,  -290,     0,     0,     0,   197,     0,     0,  -290,     0,
-   192,   193,   198,     0,  -290,     0,   199,  -290,  -290,  -290,
-  -290,     0,    80,  -290,  -290,    81,    20,   194,   195,     0,
-     0,     0,    78,   279,  -298,     0,     0,     0,     0,     0,
-     0,   196,   204,   205,   206,   207,     0,   197,   208,   209,
-   672,     0,   194,   195,   198,     0,     0,    78,   199,     0,
-     0,     0,     0,     0,    80,     0,   196,    81,    20,     0,
-     0,     0,   197,     0,     0,   279,  -298,   192,   193,   198,
-     0,     0,     0,   199,   204,   205,   206,   207,     0,    80,
-   208,   209,    81,    20,   194,   195,   200,   201,     0,    78,
-   202,     0,   203,   359,     0,     0,     0,     0,   196,   204,
-   205,   206,   207,     0,   197,   208,   209,     0,     0,   194,
-   195,   198,     0,     0,    78,   199,     0,     0,   192,   193,
-     0,    80,     0,   196,    81,    20,     0,     0,     0,   197,
-     0,     0,   279,     0,     0,     0,   198,     0,     0,     0,
-   199,   204,   205,   206,   207,     0,    80,   208,   209,    81,
-    20,     0,     0,   200,   201,     0,     0,   202,   494,     0,
-   194,   195,     0,     0,     0,    78,   204,   205,   206,   207,
-     0,     0,   208,   209,   196,     0,     0,     0,     0,     0,
-   197,     0,     0,   192,   193,     0,     0,   198,     0,     0,
-     0,   199,     0,     0,     0,     0,     0,    80,     0,     0,
-    81,    20,     0,     0,   200,   201,     0,     0,   202,   637,
-     0,     0,     0,     0,     0,     0,     0,   204,   205,   206,
-   207,     0,     0,   208,   209,   194,   195,     0,     0,     0,
-    78,     0,     0,     0,   192,   193,     0,     0,     0,   196,
-     0,     0,     0,     0,     0,   197,     0,     0,     0,     0,
-     0,     0,   198,     0,     0,     0,   199,     0,     0,     0,
-     0,     0,    80,     0,     0,    81,    20,     0,     0,   200,
-   201,     0,     0,   202,   680,     0,   194,   195,     0,     0,
-     0,    78,   204,   205,   206,   207,     0,     0,   208,   209,
-   196,     0,     0,     0,     0,     0,   197,     0,     0,   192,
-   193,     0,     0,   198,     0,     0,     0,   199,     0,     0,
-     0,     0,     0,    80,     0,     0,    81,    20,     0,     0,
-   200,   201,     0,     0,   202,   695,     0,     0,     0,     0,
-     0,     0,     0,   204,   205,   206,   207,     0,     0,   208,
-   209,   194,   195,     0,     0,     0,    78,     0,     0,     0,
-     0,     0,     0,     0,     0,   196,     0,     0,     0,     0,
-     0,   197,     0,     0,     0,     0,     0,     0,   198,     0,
-     0,     0,   199,     0,     0,     0,     0,     0,    80,     0,
-     0,    81,    20,     0,     0,   200,   201,     0,     0,   202,
-     0,     2,   194,   195,     0,     0,     0,    78,   204,   205,
-   206,   207,     0,     0,   208,   209,   196,     0,     0,     0,
-     0,     0,   197,     0,     0,     0,     0,     0,     0,   198,
-     0,     0,     0,   199,     0,     0,     0,     0,     0,    80,
-     0,     0,    81,    20,     0,     0,     0,     0,     0,     0,
-   279,     0,     0,     0,     0,     0,     0,     0,     0,   204,
-   205,   206,   207,     0,     0,   208,   209
+     0,     0,     0,     2,   196,   197,  -264,   268,   269,    79,
+   270,     0,     0,   271,     0,     0,     0,   272,   198,     0,
+   335,  -264,   335,     0,   273,   274,     5,   275,   267,   276,
+   277,   200,   278,     0,     0,   279,     0,   335,     0,     0,
+     0,    81,     0,     0,    82,    21,     0,     0,     0,     0,
+     0,     0,   280,     0,   157,  -264,     0,   336,     7,   336,
+     0,   206,   207,   208,   209,     0,     0,   210,   211,     0,
+     0,     2,   196,   197,   336,   268,   269,    79,   270,     0,
+     0,   271,     0,     0,     0,   272,   198,     0,     0,     0,
+     0,     0,   273,   274,     5,   275,   267,   276,   277,   200,
+   278,     0,     0,   279,     0,     0,     0,     0,     0,    81,
+     0,     0,    82,    21,     0,     0,     0,     0,     0,     0,
+   280,     0,   157,   441,     0,     0,     7,     0,     0,   206,
+   207,   208,   209,     0,     0,   210,   211,     0,     0,     2,
+   196,   197,     0,   268,   269,    79,   270,     0,     0,   271,
+     0,     0,     0,   272,   198,     0,     0,     0,     0,     0,
+   273,   274,     5,   275,   267,   276,   277,   200,   278,     0,
+     0,   279,     0,     0,     0,     0,     0,    81,     0,     0,
+    82,    21,     0,     0,     0,     0,     0,     0,   280,     0,
+   157,     0,     0,     0,     7,     0,     0,   206,   207,   208,
+   209,     0,     0,   210,   211,     0,     0,     2,   196,   197,
+     0,   268,   269,    79,   270,     0,     0,   271,     0,     0,
+     0,   272,   198,     0,     0,     0,     0,     0,   273,   274,
+   267,   275,     0,   276,   277,   200,   278,     0,     0,   279,
+     0,     0,     0,     0,     0,    81,     0,     0,    82,    21,
+     0,     0,     0,     0,     0,     0,   280,     0,   157,     0,
+     0,     0,     7,     0,     0,   206,   207,   208,   209,     0,
+     0,   210,   211,     2,   196,   197,     0,   702,   269,    79,
+   270,     0,     0,   271,     0,     0,     0,   272,   198,     0,
+     0,     0,     0,     0,   273,   274,     0,   275,     0,   276,
+   277,   200,   278,     2,   625,   279,   194,   195,     0,    79,
+     0,    81,     0,     0,    82,    21,     0,     0,    80,     0,
+     4,     0,   280,     0,   157,     0,     5,     0,     7,     0,
+     0,   206,   207,   208,   209,     0,     0,   210,   211,     0,
+     0,    81,     0,     0,    82,    21,     0,     0,   196,   197,
+     0,     0,     0,    79,     0,    83,     0,     0,     0,     0,
+     0,     0,   198,     0,     0,     0,     0,     0,   199,   193,
+     0,   194,   195,     0,     0,   200,     0,     0,     0,   201,
+     0,     0,     0,     0,     0,    81,     0,     0,    82,    21,
+     0,     0,   202,   203,     0,     0,   204,     0,   205,   626,
+     0,     0,     0,     0,     0,   206,   207,   208,   209,     0,
+     0,   210,   211,   196,   197,     0,     0,     0,    79,     0,
+   418,     0,   194,   195,     0,     0,     0,   198,     0,     0,
+     0,     0,     0,   199,     0,     0,     0,     0,     0,     0,
+   200,     0,     0,     0,   201,     0,     0,     0,     0,     0,
+    81,     0,     0,    82,    21,     0,     0,   202,   203,     0,
+     0,   204,     0,   205,   196,   197,     0,     0,     0,    79,
+   206,   207,   208,   209,     0,     0,   210,   211,   198,     0,
+     0,     0,     0,     0,   199,   496,     0,   194,   195,     0,
+     0,   200,     0,     0,     0,   201,     0,     0,     0,     0,
+     0,    81,     0,     0,    82,    21,     0,     0,   202,   203,
+     0,     0,   204,     0,     0,     0,     0,     0,   419,     0,
+     0,   206,   207,   208,   209,     0,     0,   210,   211,   196,
+   197,     0,     0,     0,    79,     0,   551,     0,   194,   195,
+     0,     0,     0,   198,     0,     0,     0,     0,     0,   199,
+     0,     0,     0,     0,     0,     0,   200,     0,     0,     0,
+   201,     0,     0,     0,     0,     0,    81,     0,     0,    82,
+    21,     0,     0,   202,   203,     0,     0,   204,     0,     0,
+   196,   197,   497,     0,     0,    79,   206,   207,   208,   209,
+     0,     0,   210,   211,   198,     0,     0,     0,     0,     0,
+   199,   496,     0,   194,   195,     0,     0,   200,     0,     0,
+     0,   201,     0,     0,     0,     0,     0,    81,     0,     0,
+    82,    21,     0,   552,   202,   203,     0,     0,   204,     0,
+     0,     0,     0,     0,     0,     0,     0,   206,   207,   208,
+   209,     0,     0,   210,   211,   196,   197,     0,     0,     0,
+    79,     0,   589,     0,   194,   195,     0,     0,     0,   198,
+     0,     0,     0,     0,     0,   199,     0,     0,     0,     0,
+     0,     0,   200,     0,     0,     0,   201,     0,     0,     0,
+     0,     0,    81,     0,     0,    82,    21,     0,     0,   202,
+   203,     0,     0,   204,     0,     0,   196,   197,   586,     0,
+     0,    79,   206,   207,   208,   209,     0,     0,   210,   211,
+   198,     0,     0,     0,     0,     0,   199,   597,     0,   194,
+   195,     0,     0,   200,     0,     0,     0,   201,     0,     0,
+     0,     0,     0,    81,     0,     0,    82,    21,     0,     0,
+   202,   203,     0,     0,   204,   590,     0,     0,     0,     0,
+     0,     0,     0,   206,   207,   208,   209,     0,     0,   210,
+   211,   196,   197,     0,     0,     0,    79,     0,   605,     0,
+   194,   195,     0,     0,     0,   198,     0,     0,     0,     0,
+     0,   199,     0,     0,     0,     0,     0,     0,   200,     0,
+     0,     0,   201,     0,     0,     0,     0,     0,    81,     0,
+     0,    82,    21,     0,     0,   202,   203,     0,     0,   204,
+     0,     0,   196,   197,     0,   598,     0,    79,   206,   207,
+   208,   209,     0,     0,   210,   211,   198,     0,     0,     0,
+     0,     0,   199,   614,     0,   194,   195,     0,     0,   200,
+     0,     0,     0,   201,     0,     0,     0,     0,     0,    81,
+     0,     0,    82,    21,     0,     0,   202,   203,     0,     0,
+   204,     0,     0,     0,     0,   606,     0,     0,     0,   206,
+   207,   208,   209,     0,     0,   210,   211,   196,   197,     0,
+     0,     0,    79,     0,   496,     0,   194,   195,     0,     0,
+     0,   198,     0,     0,     0,     0,     0,   199,     0,     0,
+     0,     0,     0,     0,   200,     0,     0,     0,   201,     0,
+     0,     0,     0,     0,    81,     0,     0,    82,    21,     0,
+     0,   202,   203,     0,     0,   204,   615,     0,   196,   197,
+     0,     0,     0,    79,   206,   207,   208,   209,     0,     0,
+   210,   211,   198,     0,     0,     0,     0,     0,   199,   589,
+     0,   194,   195,     0,     0,   200,     0,     0,     0,   201,
+     0,     0,     0,     0,     0,    81,     0,     0,    82,    21,
+     0,     0,   202,   203,     0,     0,   204,     0,     0,     0,
+     0,   622,     0,     0,     0,   206,   207,   208,   209,     0,
+     0,   210,   211,   196,   197,     0,     0,     0,    79,     0,
+   716,     0,   194,   195,     0,     0,     0,   198,     0,     0,
+     0,     0,     0,   199,     0,     0,     0,     0,     0,     0,
+   200,     0,     0,     0,   201,     0,     0,     0,     0,     0,
+    81,     0,     0,    82,    21,     0,     0,   202,   203,     0,
+     0,   204,   700,     0,   196,   197,     0,     0,     0,    79,
+   206,   207,   208,   209,     0,     0,   210,   211,   198,     0,
+     0,     0,     0,     0,   199,   716,     0,   194,   195,     0,
+     0,   200,     0,     0,     0,   201,     0,     0,     0,     0,
+     0,    81,     0,     0,    82,    21,     0,     0,   202,   203,
+     0,     0,   204,   717,     0,     0,     0,     0,     0,     0,
+     0,   206,   207,   208,   209,     0,     0,   210,   211,   196,
+   197,     0,     0,     0,    79,     0,   597,     0,   194,   195,
+     0,     0,     0,   198,     0,     0,     0,     0,     0,   199,
+     0,     0,     0,     0,     0,     0,   200,     0,     0,     0,
+   201,     0,     0,     0,     0,     0,    81,     0,     0,    82,
+    21,     0,     0,   202,   203,     0,     0,   204,   762,     0,
+   196,   197,     0,     0,     0,    79,   206,   207,   208,   209,
+     0,     0,   210,   211,   198,     0,     0,     0,     0,     0,
+   199,   333,     0,   194,   195,     0,     0,   200,     0,     0,
+     0,   201,     0,     0,     0,     0,     0,    81,     0,     0,
+    82,    21,     0,     0,   202,   203,     0,     0,   204,     0,
+     0,     0,     0,     0,   767,     0,     0,   206,   207,   208,
+   209,     0,     0,   210,   211,   196,   197,     0,     0,     0,
+    79,     0,   338,     0,   194,   195,     0,     0,     0,   198,
+     0,     0,     0,     0,     0,   199,     0,     0,     0,     0,
+     0,     0,   200,     0,     0,     0,   201,     0,     0,     0,
+     0,     0,    81,     0,     0,    82,    21,     0,     0,   202,
+   203,     0,     0,   204,     0,     0,   196,   197,     0,     0,
+     0,    79,   206,   207,   208,   209,     0,     0,   210,   211,
+   198,     0,     0,     0,     0,     0,   199,   340,     0,   194,
+   195,     0,     0,   200,     0,     0,     0,   201,     0,     0,
+     0,     0,     0,    81,     0,     0,    82,    21,     0,     0,
+   202,   203,     0,     0,   204,     0,     0,     0,     0,     0,
+     0,     0,     0,   206,   207,   208,   209,     0,     0,   210,
+   211,   196,   197,     0,     0,     0,    79,     0,   342,     0,
+   194,   195,     0,     0,     0,   198,     0,     0,     0,     0,
+     0,   199,     0,     0,     0,     0,     0,     0,   200,     0,
+     0,     0,   201,     0,     0,     0,     0,     0,    81,     0,
+     0,    82,    21,     0,     0,   202,   203,     0,     0,   204,
+     0,     0,   196,   197,     0,     0,     0,    79,   206,   207,
+   208,   209,     0,     0,   210,   211,   198,     0,     0,     0,
+     0,     0,   199,   351,     0,   194,   195,     0,     0,   200,
+     0,     0,     0,   201,     0,     0,     0,     0,     0,    81,
+     0,     0,    82,    21,     0,     0,   202,   203,     0,     0,
+   204,     0,     0,     0,     0,     0,     0,     0,     0,   206,
+   207,   208,   209,     0,     0,   210,   211,   196,   197,     0,
+     0,     0,    79,     0,   353,     0,   194,   195,     0,     0,
+     0,   198,     0,     0,     0,     0,     0,   199,     0,     0,
+     0,     0,     0,     0,   200,     0,     0,     0,   201,     0,
+     0,     0,     0,     0,    81,     0,     0,    82,    21,     0,
+     0,   202,   203,     0,     0,   204,     0,     0,   196,   197,
+     0,     0,     0,    79,   206,   207,   208,   209,     0,     0,
+   210,   211,   198,     0,     0,     0,     0,     0,   199,   355,
+     0,   194,   195,     0,     0,   200,     0,     0,     0,   201,
+     0,     0,     0,     0,     0,    81,     0,     0,    82,    21,
+     0,     0,   202,   203,     0,     0,   204,     0,     0,     0,
+     0,     0,     0,     0,     0,   206,   207,   208,   209,     0,
+     0,   210,   211,   196,   197,     0,     0,     0,    79,     0,
+   413,     0,   194,   195,     0,     0,     0,   198,     0,     0,
+     0,     0,     0,   199,     0,     0,     0,     0,     0,     0,
+   200,     0,     0,     0,   201,     0,     0,     0,     0,     0,
+    81,     0,     0,    82,    21,     0,     0,   202,   203,     0,
+     0,   204,     0,     0,   196,   197,     0,     0,     0,    79,
+   206,   207,   208,   209,     0,     0,   210,   211,   198,     0,
+     0,     0,     0,     0,   199,   505,     0,   194,   195,     0,
+     0,   200,     0,     0,     0,   201,     0,     0,     0,     0,
+     0,    81,     0,     0,    82,    21,     0,     0,   202,   203,
+     0,     0,   204,     0,     0,     0,     0,     0,     0,     0,
+     0,   206,   207,   208,   209,     0,     0,   210,   211,   196,
+   197,     0,     0,     0,    79,     0,   510,     0,   194,   195,
+     0,     0,     0,   198,     0,     0,     0,     0,     0,   199,
+     0,     0,     0,     0,     0,     0,   200,     0,     0,     0,
+   201,     0,     0,     0,     0,     0,    81,     0,     0,    82,
+    21,     0,     0,   202,   203,     0,     0,   204,     0,     0,
+   196,   197,     0,     0,     0,    79,   206,   207,   208,   209,
+     0,     0,   210,   211,   198,     0,     0,     0,     0,     0,
+   199,   512,     0,   194,   195,     0,     0,   200,     0,     0,
+     0,   201,     0,     0,     0,     0,     0,    81,     0,     0,
+    82,    21,     0,     0,   202,   203,     0,     0,   204,     0,
+     0,     0,     0,     0,     0,     0,     0,   206,   207,   208,
+   209,     0,     0,   210,   211,   196,   197,     0,     0,     0,
+    79,     0,   514,     0,   194,   195,     0,     0,     0,   198,
+     0,     0,     0,     0,     0,   199,     0,     0,     0,     0,
+     0,     0,   200,     0,     0,     0,   201,     0,     0,     0,
+     0,     0,    81,     0,     0,    82,    21,     0,     0,   202,
+   203,     0,     0,   204,     0,     0,   196,   197,     0,     0,
+     0,    79,   206,   207,   208,   209,     0,     0,   210,   211,
+   198,     0,     0,     0,     0,     0,   199,   516,     0,   194,
+   195,     0,     0,   200,     0,     0,     0,   201,     0,     0,
+     0,     0,     0,    81,     0,     0,    82,    21,     0,     0,
+   202,   203,     0,     0,   204,     0,     0,     0,     0,     0,
+     0,     0,     0,   206,   207,   208,   209,     0,     0,   210,
+   211,   196,   197,     0,     0,     0,    79,     0,   518,     0,
+   194,   195,     0,     0,     0,   198,     0,     0,     0,     0,
+     0,   199,     0,     0,     0,     0,     0,     0,   200,     0,
+     0,     0,   201,     0,     0,     0,     0,     0,    81,     0,
+     0,    82,    21,     0,     0,   202,   203,     0,     0,   204,
+     0,     0,   196,   197,     0,     0,     0,    79,   206,   207,
+   208,   209,     0,     0,   210,   211,   198,     0,     0,     0,
+     0,     0,   199,   520,     0,   194,   195,     0,     0,   200,
+     0,     0,     0,   201,     0,     0,     0,     0,     0,    81,
+     0,     0,    82,    21,     0,     0,   202,   203,     0,     0,
+   204,     0,     0,     0,     0,     0,     0,     0,     0,   206,
+   207,   208,   209,     0,     0,   210,   211,   196,   197,     0,
+     0,     0,    79,     0,   522,     0,   194,   195,     0,     0,
+     0,   198,     0,     0,     0,     0,     0,   199,     0,     0,
+     0,     0,     0,     0,   200,     0,     0,     0,   201,     0,
+     0,     0,     0,     0,    81,     0,     0,    82,    21,     0,
+     0,   202,   203,     0,     0,   204,     0,     0,   196,   197,
+     0,     0,     0,    79,   206,   207,   208,   209,     0,     0,
+   210,   211,   198,     0,     0,     0,     0,     0,   199,   524,
+     0,   194,   195,     0,     0,   200,     0,     0,     0,   201,
+     0,     0,     0,     0,     0,    81,     0,     0,    82,    21,
+     0,     0,   202,   203,     0,     0,   204,     0,     0,     0,
+     0,     0,     0,     0,     0,   206,   207,   208,   209,     0,
+     0,   210,   211,   196,   197,     0,     0,     0,    79,     0,
+   526,     0,   194,   195,     0,     0,     0,   198,     0,     0,
+     0,     0,     0,   199,     0,     0,     0,     0,     0,     0,
+   200,     0,     0,     0,   201,     0,     0,     0,     0,     0,
+    81,     0,     0,    82,    21,     0,     0,   202,   203,     0,
+     0,   204,     0,     0,   196,   197,     0,     0,     0,    79,
+   206,   207,   208,   209,     0,     0,   210,   211,   198,     0,
+     0,     0,     0,     0,   199,   528,     0,   194,   195,     0,
+     0,   200,     0,     0,     0,   201,     0,     0,     0,     0,
+     0,    81,     0,     0,    82,    21,     0,     0,   202,   203,
+     0,     0,   204,     0,     0,     0,     0,     0,     0,     0,
+     0,   206,   207,   208,   209,     0,     0,   210,   211,   196,
+   197,     0,     0,     0,    79,     0,   530,     0,   194,   195,
+     0,     0,     0,   198,     0,     0,     0,     0,     0,   199,
+     0,     0,     0,     0,     0,     0,   200,     0,     0,     0,
+   201,     0,     0,     0,     0,     0,    81,     0,     0,    82,
+    21,     0,     0,   202,   203,     0,     0,   204,     0,     0,
+   196,   197,     0,     0,     0,    79,   206,   207,   208,   209,
+     0,     0,   210,   211,   198,     0,     0,     0,     0,     0,
+   199,   532,     0,   194,   195,     0,     0,   200,     0,     0,
+     0,   201,     0,     0,     0,     0,     0,    81,     0,     0,
+    82,    21,     0,     0,   202,   203,     0,     0,   204,     0,
+     0,     0,     0,     0,     0,     0,     0,   206,   207,   208,
+   209,     0,     0,   210,   211,   196,   197,     0,     0,     0,
+    79,     0,   537,     0,   194,   195,     0,     0,     0,   198,
+     0,     0,     0,     0,     0,   199,     0,     0,     0,     0,
+     0,     0,   200,     0,     0,     0,   201,     0,     0,     0,
+     0,     0,    81,     0,     0,    82,    21,     0,     0,   202,
+   203,     0,     0,   204,     0,     0,   196,   197,     0,     0,
+     0,    79,   206,   207,   208,   209,     0,     0,   210,   211,
+   198,     0,     0,     0,     0,     0,   199,   539,     0,   194,
+   195,     0,     0,   200,     0,     0,     0,   201,     0,     0,
+     0,     0,     0,    81,     0,     0,    82,    21,     0,     0,
+   202,   203,     0,     0,   204,     0,     0,     0,     0,     0,
+     0,     0,     0,   206,   207,   208,   209,     0,     0,   210,
+   211,   196,   197,     0,     0,     0,    79,     0,   541,     0,
+   194,   195,     0,     0,     0,   198,     0,     0,     0,     0,
+     0,   199,     0,     0,     0,     0,     0,     0,   200,     0,
+     0,     0,   201,     0,     0,     0,     0,     0,    81,     0,
+     0,    82,    21,     0,     0,   202,   203,     0,     0,   204,
+     0,     0,   196,   197,     0,     0,     0,    79,   206,   207,
+   208,   209,     0,     0,   210,   211,   198,     0,     0,     0,
+     0,     0,   199,   543,     0,   194,   195,     0,     0,   200,
+     0,     0,     0,   201,     0,     0,     0,     0,     0,    81,
+     0,     0,    82,    21,     0,     0,   202,   203,     0,     0,
+   204,     0,     0,     0,     0,     0,     0,     0,     0,   206,
+   207,   208,   209,     0,     0,   210,   211,   196,   197,     0,
+     0,     0,    79,     0,   545,     0,   194,   195,     0,     0,
+     0,   198,     0,     0,     0,     0,     0,   199,     0,     0,
+     0,     0,     0,     0,   200,     0,     0,     0,   201,     0,
+     0,     0,     0,     0,    81,     0,     0,    82,    21,     0,
+     0,   202,   203,     0,     0,   204,     0,     0,   196,   197,
+     0,     0,     0,    79,   206,   207,   208,   209,     0,     0,
+   210,   211,   198,     0,     0,     0,     0,     0,   199,   547,
+     0,   194,   195,     0,     0,   200,     0,     0,     0,   201,
+     0,     0,     0,     0,     0,    81,     0,     0,    82,    21,
+     0,     0,   202,   203,     0,     0,   204,     0,     0,     0,
+     0,     0,     0,     0,     0,   206,   207,   208,   209,     0,
+     0,   210,   211,   196,   197,     0,     0,     0,    79,     0,
+   549,     0,   194,   195,     0,     0,     0,   198,     0,     0,
+     0,     0,     0,   199,     0,     0,     0,     0,     0,     0,
+   200,     0,     0,     0,   201,     0,     0,     0,     0,     0,
+    81,     0,     0,    82,    21,     0,     0,   202,   203,     0,
+     0,   204,     0,     0,   196,   197,     0,     0,     0,    79,
+   206,   207,   208,   209,     0,     0,   210,   211,   198,     0,
+     0,     0,     0,     0,   199,   554,     0,   194,   195,     0,
+     0,   200,     0,     0,     0,   201,     0,     0,     0,     0,
+     0,    81,     0,     0,    82,    21,     0,     0,   202,   203,
+     0,     0,   204,     0,     0,     0,     0,     0,     0,     0,
+     0,   206,   207,   208,   209,     0,     0,   210,   211,   196,
+   197,     0,     0,     0,    79,     0,   563,     0,   194,   195,
+     0,     0,     0,   198,     0,     0,     0,     0,     0,   199,
+     0,     0,     0,     0,     0,     0,   200,     0,     0,     0,
+   201,     0,     0,     0,     0,     0,    81,     0,     0,    82,
+    21,     0,     0,   202,   203,     0,     0,   204,     0,     0,
+   196,   197,     0,     0,     0,    79,   206,   207,   208,   209,
+     0,     0,   210,   211,   198,     0,     0,     0,     0,     0,
+   199,   571,     0,   194,   195,     0,     0,   200,     0,     0,
+     0,   201,     0,     0,     0,     0,     0,    81,     0,     0,
+    82,    21,     0,     0,   202,   203,     0,     0,   204,     0,
+     0,     0,     0,     0,     0,     0,     0,   206,   207,   208,
+   209,     0,     0,   210,   211,   196,   197,     0,     0,     0,
+    79,     0,   573,     0,   194,   195,     0,     0,     0,   198,
+     0,     0,     0,     0,     0,   199,     0,     0,     0,     0,
+     0,     0,   200,     0,     0,     0,   201,     0,     0,     0,
+     0,     0,    81,     0,     0,    82,    21,     0,     0,   202,
+   203,     0,     0,   204,     0,     0,   196,   197,     0,     0,
+     0,    79,   206,   207,   208,   209,     0,     0,   210,   211,
+   198,     0,     0,     0,     0,     0,   199,   600,     0,   194,
+   195,     0,     0,   200,     0,     0,     0,   201,     0,     0,
+     0,     0,     0,    81,     0,     0,    82,    21,     0,     0,
+   202,   203,     0,     0,   204,     0,     0,     0,     0,     0,
+     0,     0,     0,   206,   207,   208,   209,     0,     0,   210,
+   211,   196,   197,     0,     0,     0,    79,     0,   617,     0,
+   194,   195,     0,     0,     0,   198,     0,     0,     0,     0,
+     0,   199,     0,     0,     0,     0,     0,     0,   200,     0,
+     0,     0,   201,     0,     0,     0,     0,     0,    81,     0,
+     0,    82,    21,     0,     0,   202,   203,     0,     0,   204,
+     0,     0,   196,   197,     0,     0,     0,    79,   206,   207,
+   208,   209,     0,     0,   210,   211,   198,     0,     0,     0,
+     0,     0,   199,   686,     0,   194,   195,     0,     0,   200,
+     0,     0,     0,   201,     0,     0,     0,     0,     0,    81,
+     0,     0,    82,    21,     0,     0,   202,   203,     0,     0,
+   204,     0,     0,     0,     0,     0,     0,     0,     0,   206,
+   207,   208,   209,     0,     0,   210,   211,   196,   197,     0,
+     0,     0,    79,     0,   690,     0,   194,   195,     0,     0,
+     0,   198,     0,     0,     0,     0,     0,   199,     0,     0,
+     0,     0,     0,     0,   200,     0,     0,     0,   201,     0,
+     0,     0,     0,     0,    81,     0,     0,    82,    21,     0,
+     0,   202,   203,     0,     0,   204,     0,     0,   196,   197,
+     0,     0,     0,    79,   206,   207,   208,   209,     0,     0,
+   210,   211,   198,     0,     0,     0,     0,     0,   199,   696,
+     0,   194,   195,     0,     0,   200,     0,     0,     0,   201,
+     0,     0,     0,     0,     0,    81,     0,     0,    82,    21,
+     0,     0,   202,   203,     0,     0,   204,     0,     0,     0,
+     0,     0,     0,     0,     0,   206,   207,   208,   209,     0,
+     0,   210,   211,   196,   197,     0,     0,     0,    79,     0,
+   722,     0,   194,   195,     0,     0,     0,   198,     0,     0,
+     0,     0,     0,   199,     0,     0,     0,     0,     0,     0,
+   200,     0,     0,     0,   201,     0,     0,     0,     0,     0,
+    81,     0,     0,    82,    21,     0,     0,   202,   203,     0,
+     0,   204,     0,     0,   196,   197,     0,     0,     0,    79,
+   206,   207,   208,   209,     0,     0,   210,   211,   198,     0,
+     0,     0,     0,     0,   199,     0,   581,     0,     0,     0,
+     0,   200,     0,     0,     0,   201,     0,     0,     0,     0,
+     0,    81,     0,     0,    82,    21,     0,     0,   202,   203,
+     0,   671,   204,     0,     0,     0,     0,     0,     0,     0,
+     0,   206,   207,   208,   209,     0,     0,   210,   211,  -287,
+  -287,  -287,     0,     0,     0,  -287,     0,     0,     0,     0,
+     0,     0,     0,     0,  -287,     0,     0,     0,     0,     0,
+  -287,     0,     0,   733,     0,   196,   197,  -287,     0,     0,
+    79,  -287,     0,     0,     0,     0,     0,  -287,     0,   198,
+  -287,  -287,     0,     0,     0,   199,     0,     0,  -287,     0,
+   194,   195,   200,     0,  -287,     0,   201,  -287,  -287,  -287,
+  -287,     0,    81,  -287,  -287,    82,    21,   196,   197,     0,
+     0,     0,    79,   280,  -295,     0,     0,     0,     0,     0,
+     0,   198,   206,   207,   208,   209,     0,   199,   210,   211,
+   669,     0,   196,   197,   200,     0,     0,    79,   201,     0,
+     0,     0,     0,     0,    81,     0,   198,    82,    21,     0,
+     0,     0,   199,     0,     0,   280,  -295,   194,   195,   200,
+     0,     0,     0,   201,   206,   207,   208,   209,     0,    81,
+   210,   211,    82,    21,   196,   197,   202,   203,     0,    79,
+   204,     0,   205,   359,     0,     0,     0,     0,   198,   206,
+   207,   208,   209,     0,   199,   210,   211,     0,     0,   196,
+   197,   200,     0,     0,    79,   201,     0,     0,   194,   195,
+     0,    81,     0,   198,    82,    21,     0,     0,     0,   199,
+     0,     0,   280,     0,     0,     0,   200,     0,     0,     0,
+   201,   206,   207,   208,   209,     0,    81,   210,   211,    82,
+    21,     0,     0,   202,   203,     0,     0,   204,   493,     0,
+   196,   197,     0,     0,     0,    79,   206,   207,   208,   209,
+     0,     0,   210,   211,   198,     0,     0,     0,     0,     0,
+   199,     0,     0,   194,   195,     0,     0,   200,     0,     0,
+     0,   201,     0,     0,     0,     0,     0,    81,     0,     0,
+    82,    21,     0,     0,   202,   203,     0,     0,   204,   635,
+     0,     0,     0,     0,     0,     0,     0,   206,   207,   208,
+   209,     0,     0,   210,   211,   196,   197,     0,     0,     0,
+    79,     0,     0,     0,   194,   195,     0,     0,     0,   198,
+     0,     0,     0,     0,     0,   199,     0,     0,     0,     0,
+     0,     0,   200,     0,     0,     0,   201,     0,     0,     0,
+     0,     0,    81,     0,     0,    82,    21,     0,     0,   202,
+   203,     0,     0,   204,   677,     0,   196,   197,     0,     0,
+     0,    79,   206,   207,   208,   209,     0,     0,   210,   211,
+   198,     0,     0,     0,     0,     0,   199,     0,     0,   194,
+   195,     0,     0,   200,     0,     0,     0,   201,     0,     0,
+     0,     0,     0,    81,     0,     0,    82,    21,     0,     0,
+   202,   203,     0,     0,   204,   692,     0,     0,     0,     0,
+     0,     0,     0,   206,   207,   208,   209,     0,     0,   210,
+   211,   196,   197,     0,     0,     0,    79,     0,     0,     0,
+     0,     0,     0,     0,     0,   198,     0,     0,     0,     0,
+     0,   199,     0,     0,     0,     0,     0,     0,   200,     0,
+     0,     0,   201,     2,     0,     0,     0,     0,    81,    79,
+     0,    82,    21,     0,     0,   202,   203,     0,    80,   204,
+     4,     2,   196,   197,     0,     0,     5,    79,   206,   207,
+   208,   209,     0,     0,   210,   211,   198,     0,     0,     0,
+     0,    81,   199,     0,    82,    21,     0,     0,     0,   200,
+     0,     0,    79,   201,     0,   127,     0,     0,     0,    81,
+     0,   198,    82,    21,     0,     0,     0,   199,     0,     0,
+   280,     0,     0,     0,   200,     0,     0,     0,   201,   206,
+   207,   208,   209,     0,    81,   210,   211,    82,    21,     0,
+     0,   202,   203,     0,     0,   204,     0,     0,     0,     0,
+     0,     0,     0,     0,   206,   207,   208,   209,     0,     0,
+   210,   211
 };
 
 static const short yycheck[] = {     3,
-   132,   129,     6,   133,   330,   174,   123,    62,   203,   677,
-   178,   134,     1,   290,   441,   488,   561,     1,     1,   564,
-   192,   193,   194,   195,   349,     1,   117,     1,   200,   201,
-     1,   356,   357,   161,    89,     1,   669,    47,    42,    94,
-   168,    62,    46,     1,    94,   297,   310,     1,    53,   129,
-    86,   101,    62,   305,   481,   307,     1,    42,    62,   150,
-    64,    46,   153,     1,   129,    69,     1,     4,     5,    95,
-     1,     1,    44,    94,   129,   198,     1,     9,   133,    64,
-   171,   161,     1,   510,    69,    89,    96,   648,    15,    61,
-    94,   100,    97,    67,     1,    67,   161,   730,   643,    36,
-    37,    33,   770,    40,   159,     0,   161,   101,   129,    93,
-    99,   779,   101,    50,     9,    10,    11,   101,   101,   648,
-   648,     1,     1,    99,   128,   129,   256,   182,    99,   133,
-   134,   648,     1,    99,   262,    30,    94,     1,    33,    34,
-   161,    95,    79,   128,     1,    99,    83,   275,   709,   134,
-   475,   712,   625,   478,    99,   159,    51,   161,     1,    94,
-    87,    99,   100,   331,   281,   100,   257,    62,    99,    99,
-   174,   101,     1,     1,    99,   100,    95,     1,   182,   606,
-   709,   709,     1,   712,   712,   122,   123,    94,   192,   193,
-   194,   195,   709,   100,   198,   712,   200,   201,   202,    94,
-   330,   256,   139,   375,   376,   377,     1,   634,     1,   332,
-     1,     1,     1,   198,    94,     1,   777,   644,    62,    98,
-   100,   782,     1,   784,     1,   786,    95,     1,    94,     1,
-    94,    97,   287,   660,   129,     1,   100,   174,   133,   408,
-     1,   178,    99,    86,     1,    89,     0,     1,   777,   777,
-    94,     1,   256,   782,   782,   784,   784,   786,   786,     1,
-   777,    97,     1,     1,    93,   782,   161,   784,     1,   786,
-    94,    99,     1,    45,    46,   330,   100,    97,     1,   174,
-    99,   101,     5,   287,   221,   129,   290,   564,    67,   133,
-    44,    86,    92,   297,     1,   490,    86,    97,    98,    88,
-   477,   305,   479,   307,    99,    98,   310,    61,    99,    99,
-   482,     1,    98,    67,    86,   159,    88,   161,   745,    91,
-    92,    93,    99,   440,    98,    97,   330,   653,   332,   101,
-   174,     1,    98,   270,   598,     1,   600,    98,   182,     1,
-   277,    98,     1,     1,   281,    99,     1,   332,    98,    88,
-    72,     1,    94,   290,   198,     0,     1,    95,   202,   174,
-   297,   256,    95,    86,    86,   174,   643,    83,   305,    98,
-   307,   375,   376,   377,   378,   379,   380,   381,   382,   383,
+   133,   130,     6,   330,   290,   205,   180,   124,   674,   134,
+     0,    53,   175,   487,   440,   135,     1,     1,     1,     9,
+    10,    11,     1,   349,    97,    63,    15,   310,   101,     1,
+   356,   357,     1,   162,     1,    72,   118,     1,   666,    43,
+   169,    31,    63,    47,    34,    35,    86,     1,    94,    86,
+   297,    97,    90,     1,   480,    97,     1,    95,   305,    63,
+   307,    65,    52,     1,    99,   100,    70,    43,     1,   151,
+   130,    47,   154,    63,    95,     1,   194,   195,   196,   197,
+   200,     1,     9,   509,   202,   203,    90,     1,     1,    65,
+   172,    95,   130,    95,    70,   175,   134,     1,    87,   727,
+    67,   767,   162,    86,     1,    95,   100,    34,     0,   130,
+   776,    95,     1,     1,    99,    99,   101,     9,    10,    11,
+    99,   100,   160,     1,   162,   129,   130,    99,     4,     5,
+   134,   135,   101,   258,   263,    99,     1,   101,     1,    31,
+   130,   162,    34,    35,   134,    99,   184,   276,   474,   623,
+    98,   477,     1,   129,    99,    93,   160,   331,   162,   135,
+    52,    37,    38,   101,   281,    41,    99,   100,    94,     1,
+     1,   175,   162,   645,   100,    51,     1,   259,   604,    99,
+   184,    94,    86,     1,    98,   175,     1,   100,    52,     1,
+   194,   195,   196,   197,     1,    99,   200,    94,   202,   203,
+   204,   645,     1,   100,    80,   330,   632,     1,    84,    98,
+   290,    99,   332,    63,     1,   559,   642,   297,   562,   101,
+   258,    99,     1,    86,   200,   305,     1,   307,     1,    94,
+   310,   657,     1,   100,   706,   100,    99,   709,   130,     1,
+    90,     1,    45,    46,   407,    95,     1,   123,   124,   287,
+    99,     1,     1,    97,   258,     1,   130,   375,   376,   377,
+     1,    97,   706,    94,   140,   709,    98,    92,   258,    94,
+   162,     1,    97,    98,    99,   100,   562,   175,     1,    94,
+   130,    99,   645,   287,   134,   100,   290,    99,   162,   489,
+    95,    98,   330,   297,    97,    94,   645,   641,   101,   175,
+   290,   305,   774,   307,   180,    99,   310,   779,    95,   781,
+   160,   783,   162,   596,     1,   598,   742,    63,    93,    98,
+   310,    94,   439,   650,    98,   175,   330,   407,   332,    98,
+   774,    86,     1,    63,   184,   779,    98,   781,    98,   783,
+   330,     1,     1,   706,     1,    94,   709,   223,    98,    95,
+   200,    93,     1,    94,   204,   641,   332,   706,     1,     1,
+   709,    94,     1,   481,     1,    95,   175,     1,   101,     1,
+    93,   375,   376,   377,   378,   379,   380,   381,   382,   383,
    384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
-   394,    98,   561,    63,   331,   290,   648,    52,    97,    44,
-    52,     1,   101,    93,   408,    63,   122,   123,     0,   346,
-    55,    97,   256,   677,    94,   310,    61,     9,    10,    11,
-   100,     9,    67,    11,    86,    95,     1,   100,    94,   366,
-    75,   368,     0,     1,    93,   330,     1,    95,    30,     1,
-    95,    33,    34,   287,    94,    33,   290,   129,    95,     1,
-   578,   623,     1,   581,    99,   732,   174,   709,     1,    51,
-   712,    94,    93,     1,     1,    47,   310,   100,     0,     1,
-    62,   408,     0,     1,    98,   290,    44,   159,   482,   161,
-    62,   290,   297,   735,   488,     1,   330,    55,   297,     1,
-   305,     1,   307,    61,    94,   310,   305,   749,   307,    67,
-   437,   310,    94,   440,     1,   637,   770,    96,     1,     1,
-     1,   763,    44,   408,    96,   779,    44,    93,    93,     0,
-     1,     1,     1,   653,    86,   777,     1,    55,    93,    61,
-   782,    99,   784,    61,   786,    67,    99,   129,     1,    67,
-    92,    93,    52,   387,    93,    97,    98,    99,   100,    95,
-    93,   679,   174,    63,   686,    93,    93,   561,    53,    52,
-   564,     0,     1,    44,   408,    44,   698,    99,     1,   161,
-    63,    99,   290,    95,    55,    97,    92,     1,    94,   297,
-    61,    97,    98,    99,   100,    95,    67,   305,    67,   307,
-     0,     1,   310,   408,     1,    86,    93,     1,   653,   408,
-   475,    93,    95,   478,    67,    44,    86,     1,     1,    72,
-   742,    86,    44,    76,    93,     1,     1,     1,    99,   623,
-    44,   625,    61,    86,   561,    65,    50,   564,    67,     1,
-     1,   100,    72,   101,    44,    59,   640,    61,    50,   643,
-    94,    94,   101,    67,   648,    64,   100,   100,     1,   653,
-    69,    61,     1,    86,     1,     1,     1,    67,    82,    95,
-    99,    85,    86,    99,    50,   669,   561,   107,   290,   564,
-    82,    95,    44,    85,    86,   297,     1,    97,    50,    86,
-   174,     1,    86,   305,     1,   307,     1,   101,   310,    99,
-   408,     1,    86,    86,    95,    96,    82,    44,    99,    85,
-    86,    86,    86,    50,   641,   709,   643,    11,   712,   128,
-    82,   648,    12,    85,    86,    86,    65,   561,    67,    44,
-   564,     1,    94,    72,    44,    50,   730,    76,   732,    13,
-    50,   735,   669,    86,    59,    82,    61,    86,    85,    86,
-    86,    86,    67,    10,     1,   749,   561,    97,   643,   564,
-    94,   101,   561,    97,    14,   564,   174,    82,   653,   763,
-    85,    86,    82,    30,    96,    85,    86,    34,   100,    86,
-    50,    86,   709,   777,   669,   712,    86,    60,   782,    95,
-   784,    64,   786,   598,    51,   600,   408,    94,    99,   598,
-    97,   600,    93,   730,   101,   732,   290,    93,   735,   643,
-    99,   709,    82,   297,   712,    85,    86,    99,    65,   653,
-    67,   305,   749,   307,    93,    72,   310,    44,    97,    76,
-    97,    94,   101,    50,    94,   669,   763,   100,   643,    86,
-   100,    99,   100,   648,   643,   730,    99,   732,    67,   648,
-   777,    99,   100,   561,    98,   782,   564,   784,    99,   786,
-    45,    46,    45,    46,   669,    82,    91,    92,    85,    86,
-   669,   100,   677,   383,   384,   385,   386,    94,   677,   777,
-    91,    92,   290,    95,   782,    66,   784,   174,   786,   297,
-   598,    93,   600,     5,     6,     7,   730,   305,   732,   307,
-    45,    46,   310,    93,   709,    16,    17,   712,     3,     4,
-   709,     1,    97,   712,    97,    88,   101,    93,   101,    99,
-    18,    19,    20,    21,   408,   730,    94,   732,   174,   101,
-   735,   730,    86,   732,   101,   643,   735,    91,    92,    93,
-   648,    91,    92,    97,   749,    45,    46,   101,    99,   561,
-   749,     1,   564,    93,     8,     9,    10,    94,   763,    57,
-    94,   669,    45,    46,   763,   770,    97,    98,    99,   677,
-    97,   770,   777,     1,   779,    97,    98,   782,   777,   784,
-   779,   786,    95,   782,    94,   784,   598,   786,   600,   378,
-   379,    44,   380,   381,   382,   100,    44,    50,   388,   389,
-   408,   709,    50,   290,   712,    56,    59,    95,    61,    56,
-   297,    59,    99,    61,    67,    91,    92,    93,   305,    67,
-   307,    97,   730,   310,   732,   101,    94,   735,    94,    82,
-     1,   643,    85,    86,    82,    94,   648,    85,    86,     1,
-    56,   749,    95,    96,   290,    94,     0,    95,    96,     0,
-    94,   297,    94,    99,    99,   763,   387,   669,    11,   305,
-    54,   307,   770,    75,   310,   677,   139,    44,   161,   777,
-   256,   779,    52,    50,   782,   159,   784,   561,   786,   408,
-   564,    94,    59,   290,    61,   140,   264,    44,   310,   310,
-    67,   667,   667,    50,   349,   390,   392,   709,   391,   579,
-   712,   579,    59,   640,    61,    82,   394,    -1,    85,    86,
-    67,    -1,   393,   398,   598,    -1,   600,    -1,   730,    96,
-   732,   408,    -1,   735,    -1,    82,    -1,    86,    85,    86,
-     1,    -1,    91,    92,    93,    -1,    -1,   749,    97,    96,
-    -1,    -1,   101,    -1,    91,    92,    93,   202,   203,    -1,
-    97,   763,    -1,   561,   101,    -1,   564,    -1,   770,   643,
-    -1,    -1,   408,    -1,   648,   777,    -1,   779,    -1,    -1,
-   782,    86,   784,    -1,   786,    -1,    91,    92,    93,    50,
-    -1,    -1,    97,    -1,    -1,   669,   101,    -1,    59,    -1,
-   598,    -1,   600,   677,    65,    -1,    91,    92,    93,    -1,
-    -1,    72,    97,    -1,    -1,    76,   101,    -1,    -1,    -1,
-    -1,    82,    -1,   268,    85,    86,   271,    -1,    89,    90,
-    -1,    -1,    93,    -1,   279,   709,    -1,    -1,   712,    -1,
-    -1,   102,   103,   104,   105,   643,    -1,   108,   109,    -1,
-   648,    -1,    -1,    -1,    -1,    -1,   730,    -1,   732,    -1,
-    -1,   735,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,   669,    -1,    -1,    -1,   749,    -1,    -1,    -1,   677,
-    -1,    -1,    -1,    -1,   561,    -1,    -1,   564,    -1,   763,
-    -1,    -1,    -1,    -1,    -1,    -1,   770,    -1,    -1,    -1,
-    -1,    -1,    -1,   777,    -1,   779,    -1,    -1,   782,    -1,
-   784,   709,   786,    -1,   712,    -1,    -1,    -1,    -1,    -1,
-   365,   598,    -1,   600,   369,   561,    -1,    -1,   564,    -1,
-    -1,    -1,   730,    -1,   732,    -1,    -1,   735,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-   395,   749,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,   598,    -1,   600,   763,   643,    -1,   413,    -1,
-    -1,   648,   770,    -1,   192,   193,   194,   195,   423,   777,
-   425,   779,   200,   201,   782,    -1,   784,    -1,   786,    -1,
-    -1,   436,   669,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-   677,    -1,    -1,    -1,    -1,    -1,    -1,   643,   192,   193,
-   194,   195,   648,   458,    -1,   460,   200,   201,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   474,
-    -1,    -1,   709,   669,    -1,   712,    -1,    -1,    -1,    -1,
-   485,   677,    -1,    -1,    -1,   490,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,   730,    -1,   732,    -1,    -1,   735,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,   749,   709,    -1,    -1,   712,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,   763,    -1,    -1,    -1,
-    -1,    -1,    -1,   770,   730,    -1,   732,    -1,    -1,   735,
-   777,    -1,   779,    -1,    -1,   782,    -1,   784,    -1,   786,
-    -1,    -1,    -1,   749,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,   763,    -1,    -1,
-    -1,    -1,    -1,    -1,   770,    -1,    -1,    -1,    -1,    -1,
-    -1,   777,    -1,   779,    -1,    -1,   782,    -1,   784,    -1,
-   786,    -1,    -1,    -1,    -1,    -1,    -1,   375,   376,   377,
-   378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
-   388,   389,   390,   391,   392,   393,   394,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,     1,    -1,   631,    -1,    -1,    -1,
+   394,   674,   290,    52,     1,   271,   559,     1,   645,   297,
+     1,     1,   278,   407,    63,   281,    93,   305,   258,   307,
+     1,   774,   310,    52,   290,    52,   779,   407,   781,     1,
+   783,   297,     1,     1,    63,   774,    95,     1,    96,   305,
+   779,   307,   781,    95,   783,    95,    95,   287,    95,     1,
+   290,     1,    93,   729,    93,    88,     1,   576,     1,     1,
+   579,    93,    86,     0,     1,   331,    95,    53,    95,   706,
+   310,    93,   709,    67,     1,   175,    44,    94,     1,     1,
+   346,     1,     5,   100,     1,    94,    44,   481,    97,   559,
+   330,   290,   562,   487,   767,   732,    93,    88,   297,    67,
+   366,     1,   368,   776,     1,    86,   305,    44,   307,   746,
+    97,   310,   635,   621,    86,     1,     1,    86,    55,   407,
+    95,     1,    97,   760,    61,    93,   596,    65,   598,    93,
+    67,   101,    70,    94,    86,   650,    86,   774,    75,   100,
+    67,   407,   779,     0,   781,    72,   783,   387,    93,    76,
+    93,    93,     9,    10,    11,     1,     1,   676,     1,    86,
+   683,     1,    99,    86,    86,   559,    86,   407,   562,    86,
+   436,   641,   695,   439,    31,   645,   100,    34,    35,   559,
+     1,     1,   562,    97,    93,   101,    86,   101,    97,    86,
+   290,   129,   101,   101,    95,    52,   666,   297,    99,   175,
+    86,    86,    45,    46,   674,   305,    63,   307,   407,    11,
+   310,    47,    92,    93,    12,    47,   739,    97,    98,    99,
+   100,    13,   650,   130,     0,     1,    62,   621,    14,   623,
+    62,     0,     1,     0,     1,   476,   706,   478,    95,   709,
+    86,    86,    95,    86,   638,    88,    86,   641,    91,    92,
+    93,   645,    93,   160,    97,   162,   650,   727,   101,   729,
+    96,   641,   732,    94,    96,    86,    86,    93,    44,   100,
+   650,   559,   666,   130,   562,    44,   746,    44,    10,    55,
+    99,    94,    66,     0,     1,    61,   666,   100,    55,    73,
+   760,    67,    61,   559,    61,    99,   562,   767,    67,    31,
+    67,    84,   175,    35,   774,   162,   776,   407,   596,   779,
+   598,   781,   706,   783,   290,   709,    45,    46,    97,   559,
+    52,   297,   562,    99,   108,    44,     9,    44,    11,   305,
+    99,   307,    99,   727,   310,   729,    94,    99,   732,    97,
+   123,   124,    61,   101,    61,    99,   100,   727,    67,   729,
+    67,    34,   746,   641,    91,    92,    92,   645,     0,     1,
+   559,    97,    98,   562,    94,    96,   760,    67,    97,   100,
+   100,     1,   101,   639,    98,   641,    66,    97,   666,   645,
+   774,   101,    99,    95,    60,   779,   674,   781,    64,   783,
+    18,    19,    20,    21,   175,   474,   100,   596,   477,   598,
+   666,   641,    44,     0,     1,   175,    94,     0,     1,    93,
+   650,    93,   100,    55,    44,     1,     1,   290,   706,    61,
+    50,   709,    91,    92,   297,    67,   666,    45,    46,    57,
+    88,   407,   305,    93,   307,     3,     4,   310,    94,   727,
+   706,   729,   641,   709,   732,     1,   645,    44,   101,    50,
+   101,    44,    82,    16,    17,    85,    86,    99,   746,   559,
+    93,   727,   562,   729,    61,    50,   732,   666,    61,    94,
+    67,    94,   760,     1,    67,   674,    91,    92,     1,   767,
+   746,    82,   378,   379,    85,    86,   774,   727,   776,   729,
+    99,   779,    97,   781,   760,   783,   596,    82,   598,    95,
+    85,    86,    99,     5,     6,     7,    99,   706,   774,   290,
+   709,    45,    46,   779,     1,   781,   297,   783,    45,    46,
+   290,    94,    50,   100,   305,     1,   307,   297,   727,   310,
+   729,   141,    56,   732,   407,   305,    56,   307,    97,    98,
+   310,   641,    65,    95,    67,   645,    99,   746,    94,    72,
+     1,    95,    96,    76,    82,    99,    94,    85,    86,   388,
+   389,   760,     1,    86,     1,    94,   666,     1,   767,   383,
+   384,   385,   386,    94,   674,   774,    56,   776,    94,    94,
+   779,    99,   781,   559,   783,    99,   562,     1,     0,    65,
+     0,    67,   387,    11,   204,   205,    72,    55,    76,    50,
+    76,     8,     9,    10,   162,   140,   706,    44,    59,   709,
+    86,   258,   160,    50,    65,    97,    98,    99,   407,   265,
+   596,    72,   598,    53,    95,    76,   407,   727,   290,   729,
+    44,    82,   732,   310,    85,    86,    50,   407,    89,    90,
+   706,   664,    93,   709,   664,    82,   746,   310,    85,    86,
+   349,   102,   103,   104,   105,   390,     1,   108,   109,   269,
+   760,     1,   272,   391,   577,   641,   577,   767,    82,   645,
+   280,    85,    86,   394,   774,   393,   776,   392,   638,   779,
+    94,   781,   398,   783,    -1,    -1,   559,    -1,    -1,   562,
+   666,   380,   381,   382,    44,    -1,    86,    -1,   674,    44,
+    50,    91,    92,    93,    44,    50,    -1,    97,   774,    -1,
+    50,   101,    -1,   779,    59,   781,    61,   783,    -1,    59,
+    -1,    61,    67,   596,    -1,   598,    -1,    67,    -1,    -1,
+   706,    -1,    82,   709,    -1,    85,    86,    82,    -1,    -1,
+    85,    86,    82,    -1,    94,    85,    86,    -1,    -1,    -1,
+    95,   727,    -1,   729,    -1,   365,   732,    -1,    86,   369,
+    -1,    -1,    -1,    91,    92,    93,    -1,    -1,   641,    97,
+   746,    -1,   645,   101,    -1,    -1,    -1,    -1,   559,    -1,
+    -1,   562,    -1,    -1,   760,   395,    -1,    -1,    -1,   559,
+    -1,   767,   562,   666,    -1,    -1,    -1,    -1,   774,    -1,
+   776,   674,   412,   779,    -1,   781,    -1,   783,    -1,    -1,
+    -1,    -1,   422,    -1,   424,   596,    86,   598,    -1,    -1,
+    -1,    91,    92,    93,    -1,   435,   596,    97,   598,    -1,
+    -1,   101,    -1,   706,    -1,    -1,   709,    -1,    -1,    -1,
+    -1,    -1,    -1,   194,   195,   196,   197,   457,    -1,   459,
+    -1,   202,   203,    -1,   727,    -1,   729,    -1,    -1,   732,
+   641,    -1,    -1,   473,   645,    -1,    91,    92,    93,    -1,
+    -1,   641,    97,   746,   484,   645,   101,    -1,    -1,   489,
+   194,   195,   196,   197,    -1,   666,    -1,   760,   202,   203,
+    -1,    -1,    44,   674,   767,    -1,   666,    -1,    50,    -1,
+    -1,   774,    -1,   776,   674,    -1,   779,    59,   781,    61,
+   783,    -1,    44,    -1,    -1,    67,    -1,    -1,    50,    -1,
+    -1,    -1,    -1,    -1,    -1,   706,    -1,    59,   709,    61,
+    82,    -1,    -1,    85,    86,    67,   706,    -1,    -1,   709,
+    -1,    -1,    -1,    95,    96,    -1,   727,    99,   729,    -1,
+    82,   732,    -1,    85,    86,    -1,    -1,   727,    -1,   729,
+    -1,    -1,   732,    95,    96,   746,    -1,    99,    91,    92,
+    93,    91,    92,    93,    97,    -1,   746,    97,   101,   760,
+    -1,   101,    -1,    -1,    -1,    -1,   767,    -1,    -1,    -1,
+   760,    -1,    -1,   774,    -1,   776,    -1,   767,   779,    -1,
+   781,    -1,   783,    -1,   774,    -1,   776,    -1,    -1,   779,
+    -1,   781,    -1,   783,    -1,    -1,    -1,    -1,    -1,   629,
+    -1,    -1,    -1,    -1,   375,   376,   377,   378,   379,   380,
+   381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
+   391,   392,   393,   394,    -1,    -1,    -1,    -1,     1,    -1,
+    -1,    -1,   662,    -1,    -1,    -1,    -1,    -1,   668,    -1,
     -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
    384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
    394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-   665,    -1,    -1,    -1,    -1,    -1,   671,    44,    45,    46,
-    47,    48,    49,    50,    51,    -1,    -1,    54,    -1,    -1,
-    -1,    58,    59,    -1,    -1,    62,    -1,    -1,    65,    66,
-    67,    68,    -1,    70,    71,    72,    73,    -1,    -1,    76,
-    -1,    -1,    -1,    -1,   482,    82,     1,    -1,    85,    86,
-   488,    -1,    -1,    -1,    -1,    -1,    93,    -1,    95,    96,
-    -1,    -1,    99,    -1,    -1,   102,   103,   104,   105,    -1,
-    -1,   108,   109,    -1,    -1,    -1,    -1,    -1,   482,    -1,
-    -1,    -1,    -1,   748,   488,    -1,    -1,   752,    -1,    44,
-    45,    46,    47,    48,    49,    50,    51,    -1,    -1,    54,
-    -1,    -1,    -1,    58,    59,    -1,    -1,    62,    -1,    -1,
-    65,    66,    67,    68,    -1,    70,    71,    72,    73,    -1,
-    50,    76,    -1,    -1,    -1,    -1,    -1,    82,    -1,    59,
-    85,    86,    -1,    -1,    -1,    65,    -1,    -1,    93,    -1,
-    95,    96,    72,    -1,    99,    -1,    76,   102,   103,   104,
-   105,    -1,    82,   108,   109,    85,    86,    -1,    -1,    89,
-    90,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
+    -1,    54,    -1,    -1,    -1,    58,    59,    -1,    -1,    62,
+    -1,    -1,    65,    66,    67,    68,    -1,    70,    71,    72,
+    73,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,
+   481,     1,    85,    86,    -1,   745,   487,    -1,    -1,   749,
+    93,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,   102,
+   103,   104,   105,    -1,    -1,   108,   109,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,   481,    -1,    -1,
+    -1,    -1,    -1,   487,    44,    45,    46,    47,    48,    49,
+    50,    51,    -1,    -1,    54,    -1,    -1,    -1,    58,    59,
+    -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,
+    70,    71,    72,    73,    -1,    -1,    76,    -1,    -1,    -1,
+     1,    -1,    82,    -1,    -1,    85,    86,    -1,    -1,    -1,
+    -1,    -1,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     -1,    -1,   102,   103,   104,   105,    -1,    -1,   108,   109,
-     1,    -1,    -1,    -1,    -1,   623,    -1,   625,    -1,    -1,
     -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,   640,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   623,
-    -1,   625,    -1,    44,    45,    46,    47,    48,    49,    50,
-    51,    -1,    -1,    54,    -1,    -1,   640,    58,    59,    -1,
-    -1,    62,    -1,    -1,    65,    66,    67,    68,     1,    70,
-    71,    72,    73,    -1,    -1,    76,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    44,    45,    46,    47,    48,    49,    50,
+    51,    -1,    -1,    54,    -1,    -1,    -1,    58,    59,    -1,
+   621,    62,   623,    -1,    65,    66,    67,    68,     1,    70,
+    71,    72,    73,    -1,    -1,    76,    -1,   638,    -1,    -1,
     -1,    82,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
-    -1,    -1,    93,    -1,    95,    96,    -1,    -1,    99,    -1,
+    -1,    -1,    93,    -1,    95,    96,    -1,   621,    99,   623,
     -1,   102,   103,   104,   105,    -1,    -1,   108,   109,    -1,
-    -1,    44,    45,    46,    -1,    48,    49,    50,    51,    -1,
+    -1,    44,    45,    46,   638,    48,    49,    50,    51,    -1,
     -1,    54,    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,
     -1,    -1,    65,    66,    67,    68,     1,    70,    71,    72,
     73,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,
@@ -2022,12 +1985,12 @@ static const short yycheck[] = {     3,
     -1,   108,   109,    44,    45,    46,    -1,    48,    49,    50,
     51,    -1,    -1,    54,    -1,    -1,    -1,    58,    59,    -1,
     -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    70,
-    71,    72,    73,    -1,     1,    76,     3,     4,    -1,    -1,
-    -1,    82,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
-    -1,    -1,    93,    -1,    95,    -1,    -1,    -1,    99,    -1,
+    71,    72,    73,    44,     1,    76,     3,     4,    -1,    50,
+    -1,    82,    -1,    -1,    85,    86,    -1,    -1,    59,    -1,
+    61,    -1,    93,    -1,    95,    -1,    67,    -1,    99,    -1,
     -1,   102,   103,   104,   105,    -1,    -1,   108,   109,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
-    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    82,    -1,    -1,    85,    86,    -1,    -1,    45,    46,
+    -1,    -1,    -1,    50,    -1,    96,    -1,    -1,    -1,    -1,
     -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,     1,
     -1,     3,     4,    -1,    -1,    72,    -1,    -1,    -1,    76,
     -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    85,    86,
@@ -2377,15 +2340,18 @@ static const short yycheck[] = {     3,
    109,    45,    46,    -1,    -1,    -1,    50,    -1,    -1,    -1,
     -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
     -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,
-    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,    -1,
-    -1,    85,    86,    -1,    -1,    89,    90,    -1,    -1,    93,
-    -1,    44,    45,    46,    -1,    -1,    -1,    50,   102,   103,
+    -1,    -1,    76,    44,    -1,    -1,    -1,    -1,    82,    50,
+    -1,    85,    86,    -1,    -1,    89,    90,    -1,    59,    93,
+    61,    44,    45,    46,    -1,    -1,    67,    50,   102,   103,
    104,   105,    -1,    -1,   108,   109,    59,    -1,    -1,    -1,
-    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    72,
-    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,
-    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
-    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
-   103,   104,   105,    -1,    -1,   108,   109
+    -1,    82,    65,    -1,    85,    86,    -1,    -1,    -1,    72,
+    -1,    -1,    50,    76,    -1,    96,    -1,    -1,    -1,    82,
+    -1,    59,    85,    86,    -1,    -1,    -1,    65,    -1,    -1,
+    93,    -1,    -1,    -1,    72,    -1,    -1,    -1,    76,   102,
+   103,   104,   105,    -1,    82,   108,   109,    85,    86,    -1,
+    -1,    89,    90,    -1,    -1,    93,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,   102,   103,   104,   105,    -1,    -1,
+   108,   109
 };
 #define YYPURE 1
 
@@ -3060,25 +3026,21 @@ case 52:
 #line 757 "./parse.y"
 { end_class_declaration (0); ;
     break;}
-case 53:
-#line 759 "./parse.y"
-{ yyval.node = NULL; ;
-    break;}
 case 54:
-#line 761 "./parse.y"
+#line 760 "./parse.y"
 {
 		  YYERROR_NOW;
 		  yyerror ("Class or interface declaration expected");
 		;
     break;}
 case 55:
-#line 772 "./parse.y"
+#line 771 "./parse.y"
 {
 		  yyval.value = (1 << yyvsp[0].value);
 		;
     break;}
 case 56:
-#line 776 "./parse.y"
+#line 775 "./parse.y"
 {
 		  int acc = (1 << yyvsp[0].value);
 		  if (yyval.value & acc)
@@ -3092,83 +3054,83 @@ case 56:
 		;
     break;}
 case 57:
-#line 792 "./parse.y"
+#line 791 "./parse.y"
 { create_class (yyvsp[-4].value, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
 case 59:
-#line 795 "./parse.y"
+#line 794 "./parse.y"
 { create_class (0, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
 case 61:
-#line 798 "./parse.y"
+#line 797 "./parse.y"
 {yyerror ("Missing class name"); RECOVER;;
     break;}
 case 62:
-#line 800 "./parse.y"
+#line 799 "./parse.y"
 {yyerror ("Missing class name"); RECOVER;;
     break;}
 case 63:
-#line 802 "./parse.y"
+#line 801 "./parse.y"
 {
 		  if (!ctxp->class_err) yyerror ("'{' expected"); 
 		  DRECOVER(class1);
 		;
     break;}
 case 64:
-#line 807 "./parse.y"
+#line 806 "./parse.y"
 {if (!ctxp->class_err) yyerror ("'{' expected"); RECOVER;;
     break;}
 case 65:
-#line 811 "./parse.y"
+#line 810 "./parse.y"
 { yyval.node = NULL; ;
     break;}
 case 66:
-#line 813 "./parse.y"
+#line 812 "./parse.y"
 { yyval.node = yyvsp[0].node; ;
     break;}
 case 67:
-#line 815 "./parse.y"
+#line 814 "./parse.y"
 {yyerror ("'{' expected"); ctxp->class_err=1;;
     break;}
 case 68:
-#line 817 "./parse.y"
+#line 816 "./parse.y"
 {yyerror ("Missing super class name"); ctxp->class_err=1;;
     break;}
 case 69:
-#line 821 "./parse.y"
+#line 820 "./parse.y"
 { yyval.node = NULL_TREE; ;
     break;}
 case 70:
-#line 823 "./parse.y"
+#line 822 "./parse.y"
 { yyval.node = yyvsp[0].node; ;
     break;}
 case 71:
-#line 825 "./parse.y"
+#line 824 "./parse.y"
 {
 		  ctxp->class_err=1;
 		  yyerror ("Missing interface name"); 
 		;
     break;}
 case 72:
-#line 833 "./parse.y"
+#line 832 "./parse.y"
 { 
 		  ctxp->interface_number = 1;
 		  yyval.node = build_tree_list (yyvsp[0].node, NULL_TREE);
 		;
     break;}
 case 73:
-#line 838 "./parse.y"
+#line 837 "./parse.y"
 { 
 		  ctxp->interface_number++;
 		  yyval.node = chainon (yyvsp[-2].node, build_tree_list (yyvsp[0].node, NULL_TREE));
 		;
     break;}
 case 74:
-#line 843 "./parse.y"
+#line 842 "./parse.y"
 {yyerror ("Missing interface name"); RECOVER;;
     break;}
 case 75:
-#line 848 "./parse.y"
+#line 847 "./parse.y"
 { 
 		  /* Store the location of the `}' when doing xrefs */
 		  if (flag_emit_xref)
@@ -3178,7 +3140,7 @@ case 75:
 		;
     break;}
 case 76:
-#line 856 "./parse.y"
+#line 855 "./parse.y"
 { 
 		  /* Store the location of the `}' when doing xrefs */
 		  if (flag_emit_xref)
@@ -3188,30 +3150,26 @@ case 76:
 		;
     break;}
 case 82:
-#line 875 "./parse.y"
+#line 874 "./parse.y"
 {
 		  TREE_CHAIN (yyvsp[0].node) = CPC_INSTANCE_INITIALIZER_STMT (ctxp);
 		  SET_CPC_INSTANCE_INITIALIZER_STMT (ctxp, yyvsp[0].node);
 		;
     break;}
-case 84:
+case 85:
 #line 884 "./parse.y"
-{ yyval.node = yyvsp[-1].node; ;
-    break;}
-case 86:
-#line 887 "./parse.y"
 { end_class_declaration (1); ;
     break;}
-case 87:
-#line 889 "./parse.y"
+case 86:
+#line 886 "./parse.y"
 { end_class_declaration (1); ;
     break;}
 case 88:
-#line 895 "./parse.y"
+#line 893 "./parse.y"
 { register_fields (0, yyvsp[-2].node, yyvsp[-1].node); ;
     break;}
 case 89:
-#line 897 "./parse.y"
+#line 895 "./parse.y"
 {
 		  check_modifiers 
 		    ("Illegal modifier `%s' for field declaration",
@@ -3221,19 +3179,19 @@ case 89:
 		;
     break;}
 case 91:
-#line 910 "./parse.y"
+#line 908 "./parse.y"
 { yyval.node = chainon (yyvsp[-2].node, yyvsp[0].node); ;
     break;}
 case 92:
-#line 912 "./parse.y"
+#line 910 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
 case 93:
-#line 917 "./parse.y"
+#line 915 "./parse.y"
 { yyval.node = build_tree_list (yyvsp[0].node, NULL_TREE); ;
     break;}
 case 94:
-#line 919 "./parse.y"
+#line 917 "./parse.y"
 { 
 		  if (java_error_count)
 		    yyvsp[0].node = NULL_TREE;
@@ -3242,7 +3200,7 @@ case 94:
 		;
     break;}
 case 95:
-#line 926 "./parse.y"
+#line 924 "./parse.y"
 {
 		  yyerror ("Missing variable initializer");
 		  yyval.node = build_tree_list (yyvsp[-2].node, NULL_TREE);
@@ -3250,7 +3208,7 @@ case 95:
 		;
     break;}
 case 96:
-#line 932 "./parse.y"
+#line 930 "./parse.y"
 {
 		  yyerror ("';' expected");
 		  yyval.node = build_tree_list (yyvsp[-3].node, NULL_TREE);
@@ -3258,23 +3216,23 @@ case 96:
 		;
     break;}
 case 98:
-#line 942 "./parse.y"
+#line 940 "./parse.y"
 { yyval.node = build_unresolved_array_type (yyvsp[-2].node); ;
     break;}
 case 99:
-#line 944 "./parse.y"
+#line 942 "./parse.y"
 {yyerror ("Invalid declaration"); DRECOVER(vdi);;
     break;}
 case 100:
-#line 946 "./parse.y"
+#line 944 "./parse.y"
 {yyerror ("']' expected"); DRECOVER(vdi);;
     break;}
 case 101:
-#line 948 "./parse.y"
+#line 946 "./parse.y"
 {yyerror ("Unbalanced ']'"); DRECOVER(vdi);;
     break;}
 case 104:
-#line 959 "./parse.y"
+#line 957 "./parse.y"
 {
 		  current_function_decl = yyvsp[0].node;
 		  if (current_function_decl
@@ -3285,68 +3243,68 @@ case 104:
 		;
     break;}
 case 105:
-#line 968 "./parse.y"
+#line 966 "./parse.y"
 { finish_method_declaration (yyvsp[0].node); ;
     break;}
 case 106:
-#line 970 "./parse.y"
+#line 968 "./parse.y"
 {YYNOT_TWICE yyerror ("'{' expected"); RECOVER;;
     break;}
 case 107:
-#line 975 "./parse.y"
+#line 973 "./parse.y"
 { yyval.node = method_header (0, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
 case 108:
-#line 977 "./parse.y"
+#line 975 "./parse.y"
 { yyval.node = method_header (0, void_type_node, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
 case 109:
-#line 979 "./parse.y"
+#line 977 "./parse.y"
 { yyval.node = method_header (yyvsp[-3].value, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
 case 110:
-#line 981 "./parse.y"
+#line 979 "./parse.y"
 { yyval.node = method_header (yyvsp[-3].value, void_type_node, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
 case 111:
-#line 983 "./parse.y"
+#line 981 "./parse.y"
 {
 		  yyerror ("Invalid method declaration, method name required");
 		  RECOVER;
 		;
     break;}
 case 112:
-#line 988 "./parse.y"
+#line 986 "./parse.y"
 {RECOVER;;
     break;}
 case 113:
-#line 990 "./parse.y"
+#line 988 "./parse.y"
 {yyerror ("Identifier expected"); RECOVER;;
     break;}
 case 114:
-#line 992 "./parse.y"
+#line 990 "./parse.y"
 {yyerror ("Identifier expected"); RECOVER;;
     break;}
 case 115:
-#line 994 "./parse.y"
+#line 992 "./parse.y"
 {
 		  yyerror ("Invalid method declaration, return type required");
 		  RECOVER;
 		;
     break;}
 case 116:
-#line 1002 "./parse.y"
+#line 1000 "./parse.y"
 { 
 		  ctxp->formal_parameter_number = 0;
 		  yyval.node = method_declarator (yyvsp[-2].node, NULL_TREE);
 		;
     break;}
 case 117:
-#line 1007 "./parse.y"
+#line 1005 "./parse.y"
 { yyval.node = method_declarator (yyvsp[-3].node, yyvsp[-1].node); ;
     break;}
 case 118:
-#line 1009 "./parse.y"
+#line 1007 "./parse.y"
 {
 		  EXPR_WFL_LINECOL (wfl_operator) = yyvsp[-1].operator.location;
 		  TREE_PURPOSE (yyvsp[-2].node) = 
@@ -3357,59 +3315,59 @@ case 118:
 		;
     break;}
 case 119:
-#line 1018 "./parse.y"
+#line 1016 "./parse.y"
 {yyerror ("')' expected"); DRECOVER(method_declarator);;
     break;}
 case 120:
-#line 1020 "./parse.y"
+#line 1018 "./parse.y"
 {yyerror ("']' expected"); RECOVER;;
     break;}
 case 121:
-#line 1025 "./parse.y"
+#line 1023 "./parse.y"
 {
 		  ctxp->formal_parameter_number = 1;
 		;
     break;}
 case 122:
-#line 1029 "./parse.y"
+#line 1027 "./parse.y"
 {
 		  ctxp->formal_parameter_number += 1;
 		  yyval.node = chainon (yyvsp[-2].node, yyvsp[0].node);
 		;
     break;}
 case 123:
-#line 1034 "./parse.y"
+#line 1032 "./parse.y"
 { yyerror ("Missing formal parameter term"); RECOVER; ;
     break;}
 case 124:
-#line 1039 "./parse.y"
+#line 1037 "./parse.y"
 {
 		  yyval.node = build_tree_list (yyvsp[0].node, yyvsp[-1].node);
 		;
     break;}
 case 125:
-#line 1043 "./parse.y"
+#line 1041 "./parse.y"
 { 
 		  yyval.node = build_tree_list (yyvsp[0].node, yyvsp[-1].node);
 		  ARG_FINAL_P (yyval.node) = 1;
 		;
     break;}
 case 126:
-#line 1048 "./parse.y"
+#line 1046 "./parse.y"
 {
 		  yyerror ("Missing identifier"); RECOVER;
 		  yyval.node = NULL_TREE;
 		;
     break;}
 case 127:
-#line 1053 "./parse.y"
+#line 1051 "./parse.y"
 {
 		  yyerror ("Missing identifier"); RECOVER;
 		  yyval.node = NULL_TREE;
 		;
     break;}
 case 128:
-#line 1061 "./parse.y"
+#line 1059 "./parse.y"
 {
 		  check_modifiers ("Illegal modifier `%s'. Only `final' was expected here",
 				   yyvsp[0].value, ACC_FINAL);
@@ -3418,49 +3376,42 @@ case 128:
 		;
     break;}
 case 129:
-#line 1070 "./parse.y"
+#line 1068 "./parse.y"
 { yyval.node = NULL_TREE; ;
     break;}
 case 130:
-#line 1072 "./parse.y"
+#line 1070 "./parse.y"
 { yyval.node = yyvsp[0].node; ;
     break;}
 case 131:
-#line 1074 "./parse.y"
+#line 1072 "./parse.y"
 {yyerror ("Missing class type term"); RECOVER;;
     break;}
 case 132:
-#line 1079 "./parse.y"
+#line 1077 "./parse.y"
 { yyval.node = build_tree_list (yyvsp[0].node, yyvsp[0].node); ;
     break;}
 case 133:
-#line 1081 "./parse.y"
+#line 1079 "./parse.y"
 { yyval.node = tree_cons (yyvsp[0].node, yyvsp[0].node, yyvsp[-2].node); ;
     break;}
 case 134:
-#line 1083 "./parse.y"
+#line 1081 "./parse.y"
 {yyerror ("Missing class type term"); RECOVER;;
     break;}
-case 137:
-#line 1090 "./parse.y"
+case 136:
+#line 1086 "./parse.y"
 { yyval.node = NULL_TREE; ;
     break;}
-case 138:
-#line 1096 "./parse.y"
+case 137:
+#line 1092 "./parse.y"
 {
 		  TREE_CHAIN (yyvsp[0].node) = CPC_STATIC_INITIALIZER_STMT (ctxp);
 		  SET_CPC_STATIC_INITIALIZER_STMT (ctxp, yyvsp[0].node);
 		;
     break;}
-case 139:
-#line 1101 "./parse.y"
-{
-		  TREE_CHAIN (yyvsp[-1].node) = CPC_STATIC_INITIALIZER_STMT (ctxp);
-		  SET_CPC_STATIC_INITIALIZER_STMT (ctxp, yyvsp[-1].node);
-		;
-    break;}
-case 140:
-#line 1109 "./parse.y"
+case 138:
+#line 1100 "./parse.y"
 {
 		  check_modifiers ("Illegal modifier `%s' for static initializer", yyvsp[0].value, ACC_STATIC);
 		  /* Can't have a static initializer in an innerclass */
@@ -3473,199 +3424,199 @@ case 140:
 		  SOURCE_FRONTEND_DEBUG (("Modifiers: %d", yyvsp[0].value));
 		;
     break;}
-case 141:
-#line 1125 "./parse.y"
+case 139:
+#line 1116 "./parse.y"
 {
 		  current_function_decl = yyvsp[0].node;
 		  source_start_java_method (current_function_decl);
 		;
     break;}
-case 142:
-#line 1130 "./parse.y"
+case 140:
+#line 1121 "./parse.y"
 { finish_method_declaration (yyvsp[0].node); ;
     break;}
-case 143:
-#line 1135 "./parse.y"
+case 141:
+#line 1126 "./parse.y"
 { yyval.node = method_header (0, NULL_TREE, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
-case 144:
-#line 1137 "./parse.y"
+case 142:
+#line 1128 "./parse.y"
 { yyval.node = method_header (yyvsp[-2].value, NULL_TREE, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
-case 145:
-#line 1142 "./parse.y"
+case 143:
+#line 1133 "./parse.y"
 { 
 		  ctxp->formal_parameter_number = 0;  
 		  yyval.node = method_declarator (yyvsp[-2].node, NULL_TREE);
 		;
     break;}
-case 146:
-#line 1147 "./parse.y"
+case 144:
+#line 1138 "./parse.y"
 { yyval.node = method_declarator (yyvsp[-3].node, yyvsp[-1].node); ;
     break;}
-case 147:
-#line 1155 "./parse.y"
+case 145:
+#line 1146 "./parse.y"
 { 
 		  BLOCK_EXPR_BODY (yyvsp[0].node) = empty_stmt_node;
 		  yyval.node = yyvsp[0].node;
 		;
     break;}
-case 148:
-#line 1160 "./parse.y"
+case 146:
+#line 1151 "./parse.y"
 { yyval.node = yyvsp[0].node; ;
     break;}
-case 149:
-#line 1162 "./parse.y"
+case 147:
+#line 1153 "./parse.y"
 { yyval.node = yyvsp[0].node; ;
     break;}
-case 150:
-#line 1164 "./parse.y"
+case 148:
+#line 1155 "./parse.y"
 { yyval.node = yyvsp[0].node; ;
     break;}
-case 153:
-#line 1174 "./parse.y"
+case 150:
+#line 1165 "./parse.y"
 { 
 		  yyval.node = build_method_invocation (yyvsp[-3].node, NULL_TREE); 
 		  yyval.node = build_debugable_stmt (EXPR_WFL_LINECOL (yyvsp[-3].node), yyval.node);
 		  yyval.node = java_method_add_stmt (current_function_decl, yyval.node);
 		;
     break;}
-case 154:
-#line 1180 "./parse.y"
+case 151:
+#line 1171 "./parse.y"
 { 
 		  yyval.node = build_method_invocation (yyvsp[-4].node, yyvsp[-2].node); 
 		  yyval.node = build_debugable_stmt (EXPR_WFL_LINECOL (yyvsp[-4].node), yyval.node);
 		  yyval.node = java_method_add_stmt (current_function_decl, yyval.node);
 		;
     break;}
-case 155:
-#line 1188 "./parse.y"
+case 152:
+#line 1179 "./parse.y"
 {yyval.node = parse_jdk1_1_error ("explicit constructor invocation"); ;
     break;}
-case 156:
-#line 1190 "./parse.y"
+case 153:
+#line 1181 "./parse.y"
 {yyval.node = parse_jdk1_1_error ("explicit constructor invocation"); ;
     break;}
-case 157:
-#line 1195 "./parse.y"
+case 154:
+#line 1186 "./parse.y"
 {
 		  tree wfl = build_wfl_node (this_identifier_node);
 		  EXPR_WFL_LINECOL (wfl) = yyvsp[0].operator.location;
 		  yyval.node = wfl;
 		;
     break;}
-case 158:
-#line 1201 "./parse.y"
+case 155:
+#line 1192 "./parse.y"
 {
 		  tree wfl = build_wfl_node (super_identifier_node);
 		  EXPR_WFL_LINECOL (wfl) = yyvsp[0].operator.location;
 		  yyval.node = wfl;
 		;
     break;}
-case 159:
-#line 1212 "./parse.y"
+case 156:
+#line 1203 "./parse.y"
 { create_interface (0, yyvsp[0].node, NULL_TREE); ;
     break;}
-case 161:
-#line 1215 "./parse.y"
+case 158:
+#line 1206 "./parse.y"
 { create_interface (yyvsp[-2].value, yyvsp[0].node, NULL_TREE); ;
     break;}
-case 163:
-#line 1218 "./parse.y"
+case 160:
+#line 1209 "./parse.y"
 { create_interface (0, yyvsp[-1].node, yyvsp[0].node);	;
     break;}
-case 165:
-#line 1221 "./parse.y"
+case 162:
+#line 1212 "./parse.y"
 { create_interface (yyvsp[-3].value, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
-case 167:
-#line 1224 "./parse.y"
+case 164:
+#line 1215 "./parse.y"
 {yyerror ("'{' expected"); RECOVER;;
     break;}
-case 168:
-#line 1226 "./parse.y"
+case 165:
+#line 1217 "./parse.y"
 {yyerror ("'{' expected"); RECOVER;;
     break;}
-case 169:
-#line 1231 "./parse.y"
+case 166:
+#line 1222 "./parse.y"
 { 
 		  ctxp->interface_number = 1;
 		  yyval.node = build_tree_list (yyvsp[0].node, NULL_TREE);
 		;
     break;}
-case 170:
-#line 1236 "./parse.y"
+case 167:
+#line 1227 "./parse.y"
 { 
 		  ctxp->interface_number++;
 		  yyval.node = chainon (yyvsp[-2].node, build_tree_list (yyvsp[0].node, NULL_TREE));
 		;
     break;}
-case 171:
-#line 1241 "./parse.y"
+case 168:
+#line 1232 "./parse.y"
 {yyerror ("Invalid interface type"); RECOVER;;
     break;}
-case 172:
-#line 1243 "./parse.y"
+case 169:
+#line 1234 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 173:
-#line 1248 "./parse.y"
+case 170:
+#line 1239 "./parse.y"
 { yyval.node = NULL_TREE; ;
     break;}
-case 174:
-#line 1250 "./parse.y"
+case 171:
+#line 1241 "./parse.y"
 { yyval.node = NULL_TREE; ;
     break;}
-case 179:
-#line 1262 "./parse.y"
+case 176:
+#line 1253 "./parse.y"
 { end_class_declaration (1); ;
     break;}
-case 180:
-#line 1264 "./parse.y"
+case 177:
+#line 1255 "./parse.y"
 { end_class_declaration (1); ;
     break;}
-case 182:
-#line 1273 "./parse.y"
+case 179:
+#line 1264 "./parse.y"
 { 
 		  check_abstract_method_header (yyvsp[-1].node);
 		  current_function_decl = NULL_TREE; /* FIXME ? */
 		;
     break;}
-case 183:
-#line 1278 "./parse.y"
+case 180:
+#line 1269 "./parse.y"
 {yyerror ("';' expected"); RECOVER;;
     break;}
-case 184:
-#line 1284 "./parse.y"
+case 181:
+#line 1275 "./parse.y"
 { yyval.node = build_new_array_init (yyvsp[-1].operator.location, NULL_TREE); ;
     break;}
-case 185:
-#line 1286 "./parse.y"
+case 182:
+#line 1277 "./parse.y"
 { yyval.node = build_new_array_init (yyvsp[-2].operator.location, yyvsp[-1].node); ;
     break;}
-case 186:
-#line 1288 "./parse.y"
+case 183:
+#line 1279 "./parse.y"
 { yyval.node = build_new_array_init (yyvsp[-3].operator.location, yyvsp[-2].node); ;
     break;}
-case 187:
-#line 1293 "./parse.y"
+case 184:
+#line 1284 "./parse.y"
 { 
 		  yyval.node = tree_cons (maybe_build_array_element_wfl (yyvsp[0].node), 
 				  yyvsp[0].node, NULL_TREE);
 		;
     break;}
-case 188:
-#line 1298 "./parse.y"
+case 185:
+#line 1289 "./parse.y"
 {
 		  yyval.node = tree_cons (maybe_build_array_element_wfl (yyvsp[0].node), yyvsp[0].node, yyvsp[-2].node);
 		;
     break;}
-case 189:
-#line 1302 "./parse.y"
+case 186:
+#line 1293 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 190:
-#line 1308 "./parse.y"
+case 187:
+#line 1299 "./parse.y"
 { 
 		  /* Store the location of the `}' when doing xrefs */
 		  if (current_function_decl && flag_emit_xref)
@@ -3674,16 +3625,16 @@ case 190:
 		  yyval.node = empty_stmt_node; 
 		;
     break;}
-case 191:
-#line 1316 "./parse.y"
+case 188:
+#line 1307 "./parse.y"
 { yyval.node = yyvsp[0].node; ;
     break;}
-case 192:
-#line 1321 "./parse.y"
+case 189:
+#line 1312 "./parse.y"
 { enter_block (); ;
     break;}
-case 193:
-#line 1326 "./parse.y"
+case 190:
+#line 1317 "./parse.y"
 { 
 		  maybe_absorb_scoping_blocks ();
 		  /* Store the location of the `}' when doing xrefs */
@@ -3695,39 +3646,46 @@ case 193:
 		    BLOCK_SUBBLOCKS (yyval.node) = empty_stmt_node;
 		;
     break;}
-case 197:
-#line 1346 "./parse.y"
+case 194:
+#line 1337 "./parse.y"
 { java_method_add_stmt (current_function_decl, yyvsp[0].node); ;
     break;}
-case 198:
-#line 1348 "./parse.y"
+case 195:
+#line 1339 "./parse.y"
 { 
 		  LOCAL_CLASS_P (TREE_TYPE (GET_CPC ())) = 1;
 		  end_class_declaration (1);
 		;
     break;}
-case 200:
-#line 1360 "./parse.y"
+case 197:
+#line 1351 "./parse.y"
 { declare_local_variables (0, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
-case 201:
-#line 1362 "./parse.y"
+case 198:
+#line 1353 "./parse.y"
 { declare_local_variables (yyvsp[-2].value, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
-case 207:
-#line 1372 "./parse.y"
+case 204:
+#line 1363 "./parse.y"
 { yyval.node = exit_block (); ;
     break;}
-case 212:
-#line 1381 "./parse.y"
+case 209:
+#line 1372 "./parse.y"
 { yyval.node = exit_block (); ;
     break;}
-case 224:
-#line 1400 "./parse.y"
-{ yyval.node = empty_stmt_node; ;
+case 221:
+#line 1391 "./parse.y"
+{ 
+		  if (flag_extraneous_semicolon)
+		    {
+		      EXPR_WFL_SET_LINECOL (wfl_operator, lineno, -1);
+		      parse_warning_context (wfl_operator, "An empty declaration is a deprecated feature that should not be used");
+		    }
+		  yyval.node = empty_stmt_node;
+		;
     break;}
-case 225:
-#line 1405 "./parse.y"
+case 222:
+#line 1403 "./parse.y"
 {
 		  yyval.node = build_labeled_block (EXPR_WFL_LINECOL (yyvsp[-1].node), 
 					    EXPR_WFL_NODE (yyvsp[-1].node));
@@ -3736,20 +3694,20 @@ case 225:
 		  PUSH_LABELED_BLOCK (yyval.node);
 		;
     break;}
-case 226:
-#line 1416 "./parse.y"
+case 223:
+#line 1414 "./parse.y"
 { yyval.node = finish_labeled_statement (yyvsp[-1].node, yyvsp[0].node); ;
     break;}
-case 227:
-#line 1418 "./parse.y"
+case 224:
+#line 1416 "./parse.y"
 {yyerror ("':' expected"); RECOVER;;
     break;}
-case 228:
-#line 1423 "./parse.y"
+case 225:
+#line 1421 "./parse.y"
 { yyval.node = finish_labeled_statement (yyvsp[-1].node, yyvsp[0].node); ;
     break;}
-case 229:
-#line 1430 "./parse.y"
+case 226:
+#line 1428 "./parse.y"
 {
 		  /* We have a statement. Generate a WFL around it so
 		     we can debug it */
@@ -3759,107 +3717,107 @@ case 229:
 		  yyval.node = JAVA_MAYBE_GENERATE_DEBUG_INFO (yyval.node);
 		;
     break;}
-case 230:
-#line 1439 "./parse.y"
+case 227:
+#line 1437 "./parse.y"
 {
 		  if (ctxp->prevent_ese != lineno)
 		    yyerror ("Invalid expression statement");
 		  DRECOVER (expr_stmt);
 		;
     break;}
-case 231:
-#line 1445 "./parse.y"
+case 228:
+#line 1443 "./parse.y"
 {
 		  if (ctxp->prevent_ese != lineno)
 		    yyerror ("Invalid expression statement");
 		  DRECOVER (expr_stmt);
 		;
     break;}
-case 232:
-#line 1451 "./parse.y"
+case 229:
+#line 1449 "./parse.y"
 {
 		  if (ctxp->prevent_ese != lineno)
 		    yyerror ("Invalid expression statement");
 		  DRECOVER (expr_stmt);
 		;
     break;}
-case 233:
-#line 1457 "./parse.y"
+case 230:
+#line 1455 "./parse.y"
 {yyerror ("')' expected"); RECOVER;;
     break;}
-case 234:
-#line 1459 "./parse.y"
+case 231:
+#line 1457 "./parse.y"
 {
 		  parse_ctor_invocation_error ();
 		  RECOVER;
 		;
     break;}
-case 235:
-#line 1464 "./parse.y"
+case 232:
+#line 1462 "./parse.y"
 {yyerror ("')' expected"); RECOVER;;
     break;}
-case 236:
-#line 1466 "./parse.y"
+case 233:
+#line 1464 "./parse.y"
 {
 		  parse_ctor_invocation_error ();
 		  RECOVER;
 		;
     break;}
-case 237:
-#line 1471 "./parse.y"
+case 234:
+#line 1469 "./parse.y"
 {yyerror ("'(' expected"); RECOVER;;
     break;}
-case 238:
-#line 1473 "./parse.y"
+case 235:
+#line 1471 "./parse.y"
 {yyerror ("')' expected"); RECOVER;;
     break;}
-case 239:
-#line 1475 "./parse.y"
+case 236:
+#line 1473 "./parse.y"
 {yyerror ("')' expected"); RECOVER;;
     break;}
-case 240:
-#line 1477 "./parse.y"
+case 237:
+#line 1475 "./parse.y"
 {yyerror ("';' expected"); RECOVER;;
     break;}
-case 241:
-#line 1479 "./parse.y"
+case 238:
+#line 1477 "./parse.y"
 {yyerror ("';' expected"); RECOVER;;
     break;}
-case 249:
-#line 1494 "./parse.y"
+case 246:
+#line 1492 "./parse.y"
 { 
 		  yyval.node = build_if_else_statement (yyvsp[-3].operator.location, yyvsp[-2].node, 
 						yyvsp[0].node, NULL_TREE);
 		;
     break;}
-case 250:
-#line 1499 "./parse.y"
+case 247:
+#line 1497 "./parse.y"
 {yyerror ("'(' expected"); RECOVER;;
     break;}
-case 251:
-#line 1501 "./parse.y"
+case 248:
+#line 1499 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 252:
-#line 1503 "./parse.y"
+case 249:
+#line 1501 "./parse.y"
 {yyerror ("')' expected"); RECOVER;;
     break;}
-case 253:
-#line 1508 "./parse.y"
+case 250:
+#line 1506 "./parse.y"
 { yyval.node = build_if_else_statement (yyvsp[-5].operator.location, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;
     break;}
-case 254:
-#line 1513 "./parse.y"
+case 251:
+#line 1511 "./parse.y"
 { yyval.node = build_if_else_statement (yyvsp[-5].operator.location, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;
     break;}
-case 255:
-#line 1518 "./parse.y"
+case 252:
+#line 1516 "./parse.y"
 {
 		  enter_block ();
 		;
     break;}
-case 256:
-#line 1522 "./parse.y"
+case 253:
+#line 1520 "./parse.y"
 { 
 		  /* Make into "proper list" of COMPOUND_EXPRs.
 		     I.e. make the last statment also have its own
@@ -3869,117 +3827,117 @@ case 256:
 		  yyval.node = build_debugable_stmt (EXPR_WFL_LINECOL (yyvsp[-2].node), yyvsp[-2].node);
 		;
     break;}
-case 257:
-#line 1534 "./parse.y"
+case 254:
+#line 1532 "./parse.y"
 { 
 		  yyval.node = build (SWITCH_EXPR, NULL_TREE, yyvsp[-1].node, NULL_TREE);
 		  EXPR_WFL_LINECOL (yyval.node) = yyvsp[-2].operator.location;
 		;
     break;}
-case 258:
-#line 1539 "./parse.y"
+case 255:
+#line 1537 "./parse.y"
 {yyerror ("'(' expected"); RECOVER;;
     break;}
-case 259:
-#line 1541 "./parse.y"
+case 256:
+#line 1539 "./parse.y"
 {yyerror ("Missing term or ')'"); DRECOVER(switch_statement);;
     break;}
-case 260:
-#line 1543 "./parse.y"
+case 257:
+#line 1541 "./parse.y"
 {yyerror ("'{' expected"); RECOVER;;
     break;}
-case 261:
+case 258:
+#line 1549 "./parse.y"
+{ yyval.node = NULL_TREE; ;
+    break;}
+case 259:
 #line 1551 "./parse.y"
 { yyval.node = NULL_TREE; ;
     break;}
-case 262:
+case 260:
 #line 1553 "./parse.y"
 { yyval.node = NULL_TREE; ;
     break;}
-case 263:
+case 261:
 #line 1555 "./parse.y"
 { yyval.node = NULL_TREE; ;
     break;}
-case 264:
-#line 1557 "./parse.y"
-{ yyval.node = NULL_TREE; ;
-    break;}
-case 270:
-#line 1576 "./parse.y"
+case 267:
+#line 1574 "./parse.y"
 { 
 		  tree lab = build1 (CASE_EXPR, NULL_TREE, yyvsp[-1].node);
 		  EXPR_WFL_LINECOL (lab) = yyvsp[-2].operator.location;
 		  java_method_add_stmt (current_function_decl, lab);
 		;
     break;}
-case 271:
-#line 1582 "./parse.y"
+case 268:
+#line 1580 "./parse.y"
 { 
 		  tree lab = build1 (DEFAULT_EXPR, NULL_TREE, NULL_TREE);
 		  EXPR_WFL_LINECOL (lab) = yyvsp[-1].operator.location;
 		  java_method_add_stmt (current_function_decl, lab);
 		;
     break;}
-case 272:
-#line 1588 "./parse.y"
+case 269:
+#line 1586 "./parse.y"
 {yyerror ("Missing or invalid constant expression"); RECOVER;;
     break;}
-case 273:
-#line 1590 "./parse.y"
+case 270:
+#line 1588 "./parse.y"
 {yyerror ("':' expected"); RECOVER;;
     break;}
-case 274:
-#line 1592 "./parse.y"
+case 271:
+#line 1590 "./parse.y"
 {yyerror ("':' expected"); RECOVER;;
     break;}
-case 275:
-#line 1597 "./parse.y"
+case 272:
+#line 1595 "./parse.y"
 { 
 		  tree body = build_loop_body (yyvsp[-2].operator.location, yyvsp[-1].node, 0);
 		  yyval.node = build_new_loop (body);
 		;
     break;}
-case 276:
-#line 1605 "./parse.y"
+case 273:
+#line 1603 "./parse.y"
 { yyval.node = finish_loop_body (0, NULL_TREE, yyvsp[0].node, 0); ;
     break;}
-case 277:
-#line 1607 "./parse.y"
+case 274:
+#line 1605 "./parse.y"
 {YYERROR_NOW; yyerror ("'(' expected"); RECOVER;;
     break;}
-case 278:
-#line 1609 "./parse.y"
+case 275:
+#line 1607 "./parse.y"
 {yyerror ("Missing term and ')' expected"); RECOVER;;
     break;}
-case 279:
-#line 1611 "./parse.y"
+case 276:
+#line 1609 "./parse.y"
 {yyerror ("')' expected"); RECOVER;;
     break;}
-case 280:
-#line 1616 "./parse.y"
+case 277:
+#line 1614 "./parse.y"
 { yyval.node = finish_loop_body (0, NULL_TREE, yyvsp[0].node, 0); ;
     break;}
-case 281:
-#line 1621 "./parse.y"
+case 278:
+#line 1619 "./parse.y"
 { 
 		  tree body = build_loop_body (0, NULL_TREE, 1);
 		  yyval.node = build_new_loop (body);
 		;
     break;}
-case 282:
-#line 1630 "./parse.y"
+case 279:
+#line 1628 "./parse.y"
 { yyval.node = finish_loop_body (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[-5].node, 1); ;
     break;}
-case 283:
-#line 1635 "./parse.y"
+case 280:
+#line 1633 "./parse.y"
 {
 		  if (TREE_CODE_CLASS (TREE_CODE (yyvsp[-4].node)) == 'c')
 		    yyvsp[-4].node = build_wfl_node (yyvsp[-4].node);
 		  yyval.node = finish_for_loop (EXPR_WFL_LINECOL (yyvsp[-4].node), yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node);
 		;
     break;}
-case 284:
-#line 1641 "./parse.y"
+case 281:
+#line 1639 "./parse.y"
 { 
 		  yyval.node = finish_for_loop (0, NULL_TREE, yyvsp[-2].node, yyvsp[0].node);
 		  /* We have not condition, so we get rid of the EXIT_EXPR */
@@ -3987,24 +3945,24 @@ case 284:
 		    empty_stmt_node;
 		;
     break;}
-case 285:
-#line 1648 "./parse.y"
+case 282:
+#line 1646 "./parse.y"
 {yyerror ("Invalid control expression"); RECOVER;;
     break;}
-case 286:
-#line 1650 "./parse.y"
+case 283:
+#line 1648 "./parse.y"
 {yyerror ("Invalid update expression"); RECOVER;;
     break;}
-case 287:
-#line 1652 "./parse.y"
+case 284:
+#line 1650 "./parse.y"
 {yyerror ("Invalid update expression"); RECOVER;;
     break;}
-case 288:
-#line 1657 "./parse.y"
+case 285:
+#line 1655 "./parse.y"
 { yyval.node = finish_for_loop (EXPR_WFL_LINECOL (yyvsp[-4].node), yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node);;
     break;}
-case 289:
-#line 1659 "./parse.y"
+case 286:
+#line 1657 "./parse.y"
 { 
 		  yyval.node = finish_for_loop (0, NULL_TREE, yyvsp[-2].node, yyvsp[0].node);
 		  /* We have not condition, so we get rid of the EXIT_EXPR */
@@ -4012,24 +3970,24 @@ case 289:
 		    empty_stmt_node;
 		;
     break;}
-case 290:
-#line 1669 "./parse.y"
+case 287:
+#line 1667 "./parse.y"
 { 
 		  /* This scope defined for local variable that may be
                      defined within the scope of the for loop */
 		  enter_block (); 
 		;
     break;}
-case 291:
-#line 1675 "./parse.y"
+case 288:
+#line 1673 "./parse.y"
 {yyerror ("'(' expected"); DRECOVER(for_1);;
     break;}
-case 292:
-#line 1677 "./parse.y"
+case 289:
+#line 1675 "./parse.y"
 {yyerror ("Invalid init statement"); RECOVER;;
     break;}
-case 293:
-#line 1682 "./parse.y"
+case 290:
+#line 1680 "./parse.y"
 { 
 		  /* We now declare the loop body. The loop is
                      declared as a for loop. */
@@ -4041,139 +3999,139 @@ case 293:
 		  java_method_add_stmt (current_function_decl, yyval.node);
 		;
     break;}
-case 294:
-#line 1694 "./parse.y"
+case 291:
+#line 1692 "./parse.y"
 { yyval.node = empty_stmt_node; ;
     break;}
-case 295:
-#line 1696 "./parse.y"
+case 292:
+#line 1694 "./parse.y"
 { 
 		  /* Init statement recorded within the previously
                      defined block scope */
 		  yyval.node = java_method_add_stmt (current_function_decl, yyvsp[0].node);
 		;
     break;}
-case 296:
-#line 1702 "./parse.y"
+case 293:
+#line 1700 "./parse.y"
 { 
 		  /* Local variable are recorded within the previously
 		     defined block scope */
 		  yyval.node = NULL_TREE;
 		;
     break;}
-case 297:
-#line 1708 "./parse.y"
+case 294:
+#line 1706 "./parse.y"
 {yyerror ("';' expected"); DRECOVER(for_init_1);;
     break;}
-case 298:
-#line 1712 "./parse.y"
+case 295:
+#line 1710 "./parse.y"
 {yyval.node = empty_stmt_node;;
     break;}
-case 299:
-#line 1714 "./parse.y"
+case 296:
+#line 1712 "./parse.y"
 { yyval.node = build_debugable_stmt (BUILD_LOCATION (), yyvsp[0].node); ;
     break;}
-case 300:
-#line 1719 "./parse.y"
+case 297:
+#line 1717 "./parse.y"
 { yyval.node = add_stmt_to_compound (NULL_TREE, NULL_TREE, yyvsp[0].node); ;
     break;}
-case 301:
-#line 1721 "./parse.y"
+case 298:
+#line 1719 "./parse.y"
 { yyval.node = add_stmt_to_compound (yyvsp[-2].node, NULL_TREE, yyvsp[0].node); ;
     break;}
-case 302:
-#line 1723 "./parse.y"
+case 299:
+#line 1721 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 303:
-#line 1728 "./parse.y"
+case 300:
+#line 1726 "./parse.y"
 { yyval.node = build_bc_statement (yyvsp[-1].operator.location, 1, NULL_TREE); ;
     break;}
-case 304:
-#line 1730 "./parse.y"
+case 301:
+#line 1728 "./parse.y"
 { yyval.node = build_bc_statement (yyvsp[-2].operator.location, 1, yyvsp[-1].node); ;
     break;}
-case 305:
-#line 1732 "./parse.y"
+case 302:
+#line 1730 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 306:
-#line 1734 "./parse.y"
+case 303:
+#line 1732 "./parse.y"
 {yyerror ("';' expected"); RECOVER;;
     break;}
-case 307:
-#line 1739 "./parse.y"
+case 304:
+#line 1737 "./parse.y"
 { yyval.node = build_bc_statement (yyvsp[-1].operator.location, 0, NULL_TREE); ;
     break;}
-case 308:
-#line 1741 "./parse.y"
+case 305:
+#line 1739 "./parse.y"
 { yyval.node = build_bc_statement (yyvsp[-2].operator.location, 0, yyvsp[-1].node); ;
     break;}
-case 309:
-#line 1743 "./parse.y"
+case 306:
+#line 1741 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 310:
-#line 1745 "./parse.y"
+case 307:
+#line 1743 "./parse.y"
 {yyerror ("';' expected"); RECOVER;;
     break;}
-case 311:
-#line 1750 "./parse.y"
+case 308:
+#line 1748 "./parse.y"
 { yyval.node = build_return (yyvsp[-1].operator.location, NULL_TREE); ;
     break;}
-case 312:
-#line 1752 "./parse.y"
+case 309:
+#line 1750 "./parse.y"
 { yyval.node = build_return (yyvsp[-2].operator.location, yyvsp[-1].node); ;
     break;}
-case 313:
-#line 1754 "./parse.y"
+case 310:
+#line 1752 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 314:
-#line 1756 "./parse.y"
+case 311:
+#line 1754 "./parse.y"
 {yyerror ("';' expected"); RECOVER;;
     break;}
-case 315:
-#line 1761 "./parse.y"
+case 312:
+#line 1759 "./parse.y"
 { 
 		  yyval.node = build1 (THROW_EXPR, NULL_TREE, yyvsp[-1].node);
 		  EXPR_WFL_LINECOL (yyval.node) = yyvsp[-2].operator.location;
 		;
     break;}
-case 316:
-#line 1766 "./parse.y"
+case 313:
+#line 1764 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 317:
-#line 1768 "./parse.y"
+case 314:
+#line 1766 "./parse.y"
 {yyerror ("';' expected"); RECOVER;;
     break;}
-case 318:
-#line 1773 "./parse.y"
+case 315:
+#line 1771 "./parse.y"
 { 
 		  yyval.node = build (SYNCHRONIZED_EXPR, NULL_TREE, yyvsp[-2].node, yyvsp[0].node);
 		  EXPR_WFL_LINECOL (yyval.node) = 
 		    EXPR_WFL_LINECOL (MODIFIER_WFL (SYNCHRONIZED_TK));
 		;
     break;}
-case 319:
-#line 1779 "./parse.y"
+case 316:
+#line 1777 "./parse.y"
 {yyerror ("'{' expected"); RECOVER;;
     break;}
-case 320:
-#line 1781 "./parse.y"
+case 317:
+#line 1779 "./parse.y"
 {yyerror ("'(' expected"); RECOVER;;
     break;}
-case 321:
-#line 1783 "./parse.y"
+case 318:
+#line 1781 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 322:
-#line 1785 "./parse.y"
+case 319:
+#line 1783 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 323:
-#line 1790 "./parse.y"
+case 320:
+#line 1788 "./parse.y"
 {
 		  check_modifiers (
              "Illegal modifier `%s'. Only `synchronized' was expected here",
@@ -4183,42 +4141,42 @@ case 323:
 		      build_wfl_node (NULL_TREE);
 		;
     break;}
-case 324:
-#line 1802 "./parse.y"
+case 321:
+#line 1800 "./parse.y"
 { yyval.node = build_try_statement (yyvsp[-2].operator.location, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
-case 325:
-#line 1804 "./parse.y"
+case 322:
+#line 1802 "./parse.y"
 { yyval.node = build_try_finally_statement (yyvsp[-2].operator.location, yyvsp[-1].node, yyvsp[0].node); ;
     break;}
-case 326:
-#line 1806 "./parse.y"
+case 323:
+#line 1804 "./parse.y"
 { yyval.node = build_try_finally_statement 
 		    (yyvsp[-3].operator.location, build_try_statement (yyvsp[-3].operator.location,
 						       yyvsp[-2].node, yyvsp[-1].node), yyvsp[0].node);
 		;
     break;}
-case 327:
-#line 1811 "./parse.y"
+case 324:
+#line 1809 "./parse.y"
 {yyerror ("'{' expected"); DRECOVER (try_statement);;
     break;}
-case 329:
-#line 1817 "./parse.y"
+case 326:
+#line 1815 "./parse.y"
 { 
 		  TREE_CHAIN (yyvsp[0].node) = yyvsp[-1].node;
 		  yyval.node = yyvsp[0].node;
 		;
     break;}
-case 330:
-#line 1825 "./parse.y"
+case 327:
+#line 1823 "./parse.y"
 { 
 		  java_method_add_stmt (current_function_decl, yyvsp[0].node);
 		  exit_block ();
 		  yyval.node = yyvsp[-1].node;
 		;
     break;}
-case 331:
-#line 1833 "./parse.y"
+case 328:
+#line 1831 "./parse.y"
 { 
 		  /* We add a block to define a scope for
 		     formal_parameter (CCBP). The formal parameter is
@@ -4235,141 +4193,141 @@ case 331:
 		  EXPR_WFL_LINECOL (yyval.node) = yyvsp[-3].operator.location;
 		;
     break;}
-case 332:
-#line 1849 "./parse.y"
+case 329:
+#line 1847 "./parse.y"
 {yyerror ("'(' expected"); RECOVER; yyval.node = NULL_TREE;;
     break;}
-case 333:
-#line 1851 "./parse.y"
+case 330:
+#line 1849 "./parse.y"
 {
 		  yyerror ("Missing term or ')' expected"); 
 		  RECOVER; yyval.node = NULL_TREE;
 		;
     break;}
-case 334:
-#line 1856 "./parse.y"
+case 331:
+#line 1854 "./parse.y"
 {yyerror ("Missing term"); RECOVER; yyval.node = NULL_TREE;;
     break;}
-case 335:
-#line 1861 "./parse.y"
+case 332:
+#line 1859 "./parse.y"
 { yyval.node = yyvsp[0].node; ;
     break;}
-case 336:
-#line 1863 "./parse.y"
+case 333:
+#line 1861 "./parse.y"
 {yyerror ("'{' expected"); RECOVER; ;
     break;}
-case 340:
-#line 1875 "./parse.y"
+case 337:
+#line 1873 "./parse.y"
 { yyval.node = build_this (yyvsp[0].operator.location); ;
     break;}
-case 341:
-#line 1877 "./parse.y"
+case 338:
+#line 1875 "./parse.y"
 {yyval.node = yyvsp[-1].node;;
     break;}
-case 347:
-#line 1887 "./parse.y"
+case 344:
+#line 1885 "./parse.y"
 { 
 		  tree wfl = build_wfl_node (this_identifier_node);
 		  yyval.node = make_qualified_primary (yyvsp[-2].node, wfl, EXPR_WFL_LINECOL (yyvsp[-2].node));
 		;
     break;}
-case 348:
-#line 1892 "./parse.y"
+case 345:
+#line 1890 "./parse.y"
 {yyerror ("')' expected"); RECOVER;;
     break;}
-case 349:
-#line 1894 "./parse.y"
+case 346:
+#line 1892 "./parse.y"
 {yyerror ("'class' or 'this' expected" ); RECOVER;;
     break;}
-case 350:
-#line 1896 "./parse.y"
+case 347:
+#line 1894 "./parse.y"
 {yyerror ("'class' expected" ); RECOVER;;
     break;}
-case 351:
-#line 1898 "./parse.y"
+case 348:
+#line 1896 "./parse.y"
 {yyerror ("'class' expected" ); RECOVER;;
     break;}
-case 352:
-#line 1906 "./parse.y"
+case 349:
+#line 1904 "./parse.y"
 { 
 		  yyval.node = build_java_array_type (yyvsp[-2].node, -1);
 		  CLASS_LOADED_P (yyval.node) = 1;
 		;
     break;}
-case 353:
-#line 1911 "./parse.y"
+case 350:
+#line 1909 "./parse.y"
 { yyval.node = build_unresolved_array_type (yyvsp[-2].node); ;
     break;}
-case 354:
-#line 1921 "./parse.y"
+case 351:
+#line 1919 "./parse.y"
 { yyval.node = build_incomplete_class_ref (yyvsp[-1].operator.location, yyvsp[-2].node); ;
     break;}
-case 355:
-#line 1923 "./parse.y"
+case 352:
+#line 1921 "./parse.y"
 { yyval.node = build_incomplete_class_ref (yyvsp[-1].operator.location, yyvsp[-2].node); ;
     break;}
-case 356:
-#line 1925 "./parse.y"
+case 353:
+#line 1923 "./parse.y"
 { yyval.node = build_class_ref (yyvsp[-2].node); ;
     break;}
-case 357:
-#line 1927 "./parse.y"
+case 354:
+#line 1925 "./parse.y"
 { yyval.node = build_class_ref (void_type_node); ;
     break;}
-case 358:
-#line 1932 "./parse.y"
+case 355:
+#line 1930 "./parse.y"
 { yyval.node = build_new_invocation (yyvsp[-3].node, yyvsp[-1].node); ;
     break;}
-case 359:
-#line 1934 "./parse.y"
+case 356:
+#line 1932 "./parse.y"
 { yyval.node = build_new_invocation (yyvsp[-2].node, NULL_TREE); ;
     break;}
-case 361:
-#line 1940 "./parse.y"
+case 358:
+#line 1938 "./parse.y"
 { 
 		  tree ctor = build_new_invocation (yyvsp[-2].node, NULL_TREE);
 		  yyval.node = make_qualified_primary (yyvsp[-3].node, ctor, 
 					       EXPR_WFL_LINECOL (yyvsp[-3].node));
 		;
     break;}
-case 363:
-#line 1947 "./parse.y"
+case 360:
+#line 1945 "./parse.y"
 { 
 		  tree ctor = build_new_invocation (yyvsp[-3].node, yyvsp[-1].node);
 		  yyval.node = make_qualified_primary (yyvsp[-4].node, ctor, 
 					       EXPR_WFL_LINECOL (yyvsp[-4].node));
 		;
     break;}
-case 365:
-#line 1954 "./parse.y"
+case 362:
+#line 1952 "./parse.y"
 {yyerror ("'(' expected"); DRECOVER(new_1);;
     break;}
-case 366:
-#line 1956 "./parse.y"
+case 363:
+#line 1954 "./parse.y"
 {yyerror ("'(' expected"); RECOVER;;
     break;}
-case 367:
-#line 1958 "./parse.y"
+case 364:
+#line 1956 "./parse.y"
 {yyerror ("')' or term expected"); RECOVER;;
     break;}
-case 368:
-#line 1960 "./parse.y"
+case 365:
+#line 1958 "./parse.y"
 {yyerror ("')' expected"); RECOVER;;
     break;}
-case 369:
-#line 1962 "./parse.y"
+case 366:
+#line 1960 "./parse.y"
 {YYERROR_NOW; yyerror ("Identifier expected"); RECOVER;;
     break;}
-case 370:
-#line 1964 "./parse.y"
+case 367:
+#line 1962 "./parse.y"
 {yyerror ("'(' expected"); RECOVER;;
     break;}
-case 371:
-#line 1974 "./parse.y"
+case 368:
+#line 1972 "./parse.y"
 { create_anonymous_class (yyvsp[-4].operator.location, yyvsp[-3].node); ;
     break;}
-case 372:
-#line 1976 "./parse.y"
+case 369:
+#line 1974 "./parse.y"
 { 
 		  tree id = build_wfl_node (DECL_NAME (GET_CPC ()));
 		  EXPR_WFL_LINECOL (id) = EXPR_WFL_LINECOL (yyvsp[-5].node);
@@ -4401,12 +4359,12 @@ case 372:
 
 		;
     break;}
-case 373:
-#line 2007 "./parse.y"
+case 370:
+#line 2005 "./parse.y"
 { create_anonymous_class (yyvsp[-3].operator.location, yyvsp[-2].node); ;
     break;}
-case 374:
-#line 2009 "./parse.y"
+case 371:
+#line 2007 "./parse.y"
 { 
 		  tree id = build_wfl_node (DECL_NAME (GET_CPC ()));
 		  EXPR_WFL_LINECOL (id) = EXPR_WFL_LINECOL (yyvsp[-4].node);
@@ -4420,50 +4378,50 @@ case 374:
 		  yyval.node = build_new_invocation (id, NULL_TREE);
 		;
     break;}
-case 375:
-#line 2025 "./parse.y"
+case 372:
+#line 2023 "./parse.y"
 { yyval.node = yyvsp[-2].node; ;
     break;}
-case 376:
-#line 2027 "./parse.y"
+case 373:
+#line 2025 "./parse.y"
 { yyval.node = yyvsp[-2].node; ;
     break;}
-case 377:
-#line 2032 "./parse.y"
+case 374:
+#line 2030 "./parse.y"
 { 
 		  yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, NULL_TREE);
 		  ctxp->formal_parameter_number = 1; 
 		;
     break;}
-case 378:
-#line 2037 "./parse.y"
+case 375:
+#line 2035 "./parse.y"
 {
 		  ctxp->formal_parameter_number += 1;
 		  yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, yyvsp[-2].node);
 		;
     break;}
-case 379:
-#line 2042 "./parse.y"
+case 376:
+#line 2040 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 380:
-#line 2047 "./parse.y"
+case 377:
+#line 2045 "./parse.y"
 { yyval.node = build_newarray_node (yyvsp[-1].node, yyvsp[0].node, 0); ;
     break;}
-case 381:
-#line 2049 "./parse.y"
+case 378:
+#line 2047 "./parse.y"
 { yyval.node = build_newarray_node (yyvsp[-1].node, yyvsp[0].node, 0); ;
     break;}
-case 382:
-#line 2051 "./parse.y"
+case 379:
+#line 2049 "./parse.y"
 { yyval.node = build_newarray_node (yyvsp[-2].node, yyvsp[-1].node, CURRENT_OSB (ctxp));;
     break;}
-case 383:
-#line 2053 "./parse.y"
+case 380:
+#line 2051 "./parse.y"
 { yyval.node = build_newarray_node (yyvsp[-2].node, yyvsp[-1].node, CURRENT_OSB (ctxp));;
     break;}
-case 384:
-#line 2057 "./parse.y"
+case 381:
+#line 2055 "./parse.y"
 {
 		  char *sig;
 		  while (CURRENT_OSB (ctxp)--)
@@ -4473,8 +4431,8 @@ case 384:
 			      yyvsp[-2].node, get_identifier (sig), yyvsp[0].node);
 		;
     break;}
-case 385:
-#line 2066 "./parse.y"
+case 382:
+#line 2064 "./parse.y"
 { 
 		  tree type = yyvsp[-2].node;
 		  while (CURRENT_OSB (ctxp)--)
@@ -4483,24 +4441,24 @@ case 385:
 			      build_pointer_type (type), NULL_TREE, yyvsp[0].node);
 		;
     break;}
-case 386:
-#line 2074 "./parse.y"
+case 383:
+#line 2072 "./parse.y"
 {yyerror ("'[' expected"); DRECOVER ("]");;
     break;}
-case 387:
-#line 2076 "./parse.y"
+case 384:
+#line 2074 "./parse.y"
 {yyerror ("']' expected"); RECOVER;;
     break;}
-case 388:
-#line 2081 "./parse.y"
+case 385:
+#line 2079 "./parse.y"
 { yyval.node = build_tree_list (NULL_TREE, yyvsp[0].node); ;
     break;}
-case 389:
-#line 2083 "./parse.y"
+case 386:
+#line 2081 "./parse.y"
 { yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, yyval.node); ;
     break;}
-case 390:
-#line 2088 "./parse.y"
+case 387:
+#line 2086 "./parse.y"
 { 
 		  if (JNUMERIC_TYPE_P (TREE_TYPE (yyvsp[-1].node)))
 		    {
@@ -4511,20 +4469,20 @@ case 390:
 		  yyval.node = yyvsp[-1].node;
 		;
     break;}
-case 391:
-#line 2098 "./parse.y"
+case 388:
+#line 2096 "./parse.y"
 {yyerror ("']' expected"); RECOVER;;
     break;}
-case 392:
-#line 2100 "./parse.y"
+case 389:
+#line 2098 "./parse.y"
 {
 		  yyerror ("Missing term");
 		  yyerror ("']' expected");
 		  RECOVER;
 		;
     break;}
-case 393:
-#line 2109 "./parse.y"
+case 390:
+#line 2107 "./parse.y"
 { 
 		  int allocate = 0;
 		  /* If not initialized, allocate memory for the osb
@@ -4551,20 +4509,20 @@ case 393:
 		  CURRENT_OSB (ctxp) = 1;
 		;
     break;}
-case 394:
-#line 2135 "./parse.y"
+case 391:
+#line 2133 "./parse.y"
 { CURRENT_OSB (ctxp)++; ;
     break;}
-case 395:
-#line 2137 "./parse.y"
+case 392:
+#line 2135 "./parse.y"
 { yyerror ("']' expected"); RECOVER;;
     break;}
-case 396:
-#line 2142 "./parse.y"
+case 393:
+#line 2140 "./parse.y"
 { yyval.node = make_qualified_primary (yyvsp[-2].node, yyvsp[0].node, yyvsp[-1].operator.location); ;
     break;}
-case 397:
-#line 2146 "./parse.y"
+case 394:
+#line 2144 "./parse.y"
 {
 		  tree super_wfl = 
 		    build_wfl_node (super_identifier_node);
@@ -4572,20 +4530,20 @@ case 397:
 		  yyval.node = make_qualified_name (super_wfl, yyvsp[0].node, yyvsp[-1].operator.location);
 		;
     break;}
-case 398:
-#line 2153 "./parse.y"
+case 395:
+#line 2151 "./parse.y"
 {yyerror ("Field expected"); DRECOVER (super_field_acces);;
     break;}
-case 399:
-#line 2158 "./parse.y"
+case 396:
+#line 2156 "./parse.y"
 { yyval.node = build_method_invocation (yyvsp[-2].node, NULL_TREE); ;
-    break;}
-case 400:
-#line 2160 "./parse.y"
+    break;}
+case 397:
+#line 2158 "./parse.y"
 { yyval.node = build_method_invocation (yyvsp[-3].node, yyvsp[-1].node); ;
     break;}
-case 401:
-#line 2162 "./parse.y"
+case 398:
+#line 2160 "./parse.y"
 { 
 		  if (TREE_CODE (yyvsp[-4].node) == THIS_EXPR)
 		    yyval.node = build_this_super_qualified_invocation 
@@ -4597,8 +4555,8 @@ case 401:
 		    }
 		;
     break;}
-case 402:
-#line 2173 "./parse.y"
+case 399:
+#line 2171 "./parse.y"
 { 
 		  if (TREE_CODE (yyvsp[-5].node) == THIS_EXPR)
 		    yyval.node = build_this_super_qualified_invocation 
@@ -4610,122 +4568,122 @@ case 402:
 		    }
 		;
     break;}
-case 403:
-#line 2184 "./parse.y"
+case 400:
+#line 2182 "./parse.y"
 { 
 		  yyval.node = build_this_super_qualified_invocation 
 		    (0, yyvsp[-2].node, NULL_TREE, yyvsp[-4].operator.location, yyvsp[-3].operator.location);
 		;
     break;}
-case 404:
-#line 2189 "./parse.y"
+case 401:
+#line 2187 "./parse.y"
 {
 		  yyval.node = build_this_super_qualified_invocation 
 		    (0, yyvsp[-3].node, yyvsp[-1].node, yyvsp[-5].operator.location, yyvsp[-4].operator.location);
 		;
     break;}
-case 405:
-#line 2198 "./parse.y"
+case 402:
+#line 2196 "./parse.y"
 { yyerror ("'(' expected"); DRECOVER (method_invocation); ;
     break;}
-case 406:
-#line 2200 "./parse.y"
+case 403:
+#line 2198 "./parse.y"
 { yyerror ("'(' expected"); DRECOVER (method_invocation); ;
     break;}
-case 407:
-#line 2205 "./parse.y"
+case 404:
+#line 2203 "./parse.y"
 { yyval.node = build_array_ref (yyvsp[-2].operator.location, yyvsp[-3].node, yyvsp[-1].node); ;
     break;}
-case 408:
-#line 2207 "./parse.y"
+case 405:
+#line 2205 "./parse.y"
 { yyval.node = build_array_ref (yyvsp[-2].operator.location, yyvsp[-3].node, yyvsp[-1].node); ;
     break;}
-case 409:
-#line 2209 "./parse.y"
+case 406:
+#line 2207 "./parse.y"
 {
 		  yyerror ("Missing term and ']' expected");
 		  DRECOVER(array_access);
 		;
     break;}
-case 410:
-#line 2214 "./parse.y"
+case 407:
+#line 2212 "./parse.y"
 {
 		  yyerror ("']' expected");
 		  DRECOVER(array_access);
 		;
     break;}
-case 411:
-#line 2219 "./parse.y"
+case 408:
+#line 2217 "./parse.y"
 {
 		  yyerror ("Missing term and ']' expected");
 		  DRECOVER(array_access);
 		;
     break;}
-case 412:
-#line 2224 "./parse.y"
+case 409:
+#line 2222 "./parse.y"
 {
 		  yyerror ("']' expected");
 		  DRECOVER(array_access);
 		;
     break;}
-case 417:
-#line 2239 "./parse.y"
+case 414:
+#line 2237 "./parse.y"
 { yyval.node = build_incdec (yyvsp[0].operator.token, yyvsp[0].operator.location, yyvsp[-1].node, 1); ;
     break;}
-case 418:
-#line 2244 "./parse.y"
+case 415:
+#line 2242 "./parse.y"
 { yyval.node = build_incdec (yyvsp[0].operator.token, yyvsp[0].operator.location, yyvsp[-1].node, 1); ;
     break;}
-case 421:
-#line 2251 "./parse.y"
+case 418:
+#line 2249 "./parse.y"
 {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;
     break;}
-case 422:
-#line 2253 "./parse.y"
+case 419:
+#line 2251 "./parse.y"
 {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;
     break;}
-case 424:
-#line 2256 "./parse.y"
+case 421:
+#line 2254 "./parse.y"
 {yyerror ("Missing term"); RECOVER;
     break;}
-case 425:
-#line 2258 "./parse.y"
+case 422:
+#line 2256 "./parse.y"
 {yyerror ("Missing term"); RECOVER;
     break;}
-case 426:
-#line 2263 "./parse.y"
+case 423:
+#line 2261 "./parse.y"
 {yyval.node = build_incdec (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node, 0); ;
     break;}
-case 427:
-#line 2265 "./parse.y"
+case 424:
+#line 2263 "./parse.y"
 {yyerror ("Missing term"); RECOVER;
     break;}
-case 428:
-#line 2270 "./parse.y"
+case 425:
+#line 2268 "./parse.y"
 {yyval.node = build_incdec (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node, 0); ;
     break;}
-case 429:
-#line 2272 "./parse.y"
+case 426:
+#line 2270 "./parse.y"
 {yyerror ("Missing term"); RECOVER;
     break;}
-case 431:
-#line 2278 "./parse.y"
+case 428:
+#line 2276 "./parse.y"
 {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;
     break;}
-case 432:
-#line 2280 "./parse.y"
+case 429:
+#line 2278 "./parse.y"
 {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;
     break;}
-case 434:
-#line 2283 "./parse.y"
+case 431:
+#line 2281 "./parse.y"
 {yyerror ("Missing term"); RECOVER;
     break;}
-case 435:
-#line 2285 "./parse.y"
+case 432:
+#line 2283 "./parse.y"
 {yyerror ("Missing term"); RECOVER;
     break;}
-case 436:
-#line 2290 "./parse.y"
+case 433:
+#line 2288 "./parse.y"
 { 
 		  tree type = yyvsp[-3].node;
 		  while (CURRENT_OSB (ctxp)--)
@@ -4734,16 +4692,16 @@ case 436:
 		  yyval.node = build_cast (yyvsp[-4].operator.location, type, yyvsp[0].node); 
 		;
     break;}
-case 437:
-#line 2298 "./parse.y"
+case 434:
+#line 2296 "./parse.y"
 { yyval.node = build_cast (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[0].node); ;
     break;}
-case 438:
-#line 2300 "./parse.y"
+case 435:
+#line 2298 "./parse.y"
 { yyval.node = build_cast (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[0].node); ;
     break;}
-case 439:
-#line 2302 "./parse.y"
+case 436:
+#line 2300 "./parse.y"
 { 
 		  const char *ptr;
 		  while (CURRENT_OSB (ctxp)--)
@@ -4757,276 +4715,276 @@ case 439:
 		  yyval.node = build_cast (yyvsp[-4].operator.location, yyvsp[-3].node, yyvsp[0].node);
 		;
     break;}
-case 440:
-#line 2315 "./parse.y"
+case 437:
+#line 2313 "./parse.y"
 {yyerror ("']' expected, invalid type expression");;
     break;}
-case 441:
-#line 2317 "./parse.y"
+case 438:
+#line 2315 "./parse.y"
 {
 	          if (ctxp->prevent_ese != lineno)
 		    yyerror ("Invalid type expression"); RECOVER;
 		  RECOVER;
 		;
     break;}
-case 442:
-#line 2323 "./parse.y"
+case 439:
+#line 2321 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 443:
-#line 2325 "./parse.y"
+case 440:
+#line 2323 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 444:
-#line 2327 "./parse.y"
+case 441:
+#line 2325 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 446:
-#line 2333 "./parse.y"
+case 443:
+#line 2331 "./parse.y"
 { 
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), 
 				    yyvsp[-1].operator.location, yyvsp[-2].node, yyvsp[0].node);
 		;
     break;}
-case 447:
-#line 2338 "./parse.y"
+case 444:
+#line 2336 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 448:
-#line 2343 "./parse.y"
+case 445:
+#line 2341 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 449:
-#line 2348 "./parse.y"
+case 446:
+#line 2346 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 450:
-#line 2350 "./parse.y"
+case 447:
+#line 2348 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 451:
-#line 2352 "./parse.y"
+case 448:
+#line 2350 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 453:
-#line 2358 "./parse.y"
+case 450:
+#line 2356 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 454:
-#line 2363 "./parse.y"
+case 451:
+#line 2361 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 455:
-#line 2368 "./parse.y"
+case 452:
+#line 2366 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 456:
-#line 2370 "./parse.y"
+case 453:
+#line 2368 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 458:
-#line 2376 "./parse.y"
+case 455:
+#line 2374 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 459:
-#line 2381 "./parse.y"
+case 456:
+#line 2379 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 460:
-#line 2386 "./parse.y"
+case 457:
+#line 2384 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 461:
-#line 2391 "./parse.y"
+case 458:
+#line 2389 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 462:
-#line 2393 "./parse.y"
+case 459:
+#line 2391 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 463:
-#line 2395 "./parse.y"
+case 460:
+#line 2393 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 465:
-#line 2401 "./parse.y"
+case 462:
+#line 2399 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 466:
-#line 2406 "./parse.y"
+case 463:
+#line 2404 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 467:
-#line 2411 "./parse.y"
+case 464:
+#line 2409 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 468:
-#line 2416 "./parse.y"
+case 465:
+#line 2414 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 469:
-#line 2421 "./parse.y"
+case 466:
+#line 2419 "./parse.y"
 { yyval.node = build_binop (INSTANCEOF_EXPR, yyvsp[-1].operator.location, yyvsp[-2].node, yyvsp[0].node); ;
     break;}
-case 470:
+case 467:
+#line 2421 "./parse.y"
+{yyerror ("Missing term"); RECOVER;;
+    break;}
+case 468:
 #line 2423 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 471:
+case 469:
 #line 2425 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 472:
+case 470:
 #line 2427 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
-case 473:
+case 471:
 #line 2429 "./parse.y"
-{yyerror ("Missing term"); RECOVER;;
-    break;}
-case 474:
-#line 2431 "./parse.y"
 {yyerror ("Invalid reference type"); RECOVER;;
     break;}
-case 476:
-#line 2437 "./parse.y"
+case 473:
+#line 2435 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 477:
-#line 2442 "./parse.y"
+case 474:
+#line 2440 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
-case 478:
+case 475:
+#line 2445 "./parse.y"
+{yyerror ("Missing term"); RECOVER;;
+    break;}
+case 476:
 #line 2447 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
+case 478:
+#line 2453 "./parse.y"
+{
+		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
+				    yyvsp[-2].node, yyvsp[0].node); 
+		;
+    break;}
 case 479:
-#line 2449 "./parse.y"
+#line 2458 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
 case 481:
-#line 2455 "./parse.y"
+#line 2464 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
 case 482:
-#line 2460 "./parse.y"
+#line 2469 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
 case 484:
-#line 2466 "./parse.y"
+#line 2475 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
 case 485:
-#line 2471 "./parse.y"
+#line 2480 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
 case 487:
-#line 2477 "./parse.y"
+#line 2486 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
 case 488:
-#line 2482 "./parse.y"
+#line 2491 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
 case 490:
-#line 2488 "./parse.y"
+#line 2497 "./parse.y"
 {
 		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
 				    yyvsp[-2].node, yyvsp[0].node); 
 		;
     break;}
 case 491:
-#line 2493 "./parse.y"
+#line 2502 "./parse.y"
 {yyerror ("Missing term"); RECOVER;;
     break;}
 case 493:
-#line 2499 "./parse.y"
-{
-		  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,
-				    yyvsp[-2].node, yyvsp[0].node); 
-		;
-    break;}
-case 494:
-#line 2504 "./parse.y"
-{yyerror ("Missing term"); RECOVER;;
-    break;}
-case 496:
-#line 2510 "./parse.y"
+#line 2508 "./parse.y"
 {
 		  yyval.node = build (CONDITIONAL_EXPR, NULL_TREE, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node);
 		  EXPR_WFL_LINECOL (yyval.node) = yyvsp[-3].operator.location;
 		;
     break;}
-case 497:
-#line 2515 "./parse.y"
+case 494:
+#line 2513 "./parse.y"
 {
 		  YYERROR_NOW;
 		  yyerror ("Missing term");
 		  DRECOVER (1);
 		;
     break;}
-case 498:
-#line 2521 "./parse.y"
+case 495:
+#line 2519 "./parse.y"
 {yyerror ("Missing term"); DRECOVER (2);;
     break;}
-case 499:
-#line 2523 "./parse.y"
+case 496:
+#line 2521 "./parse.y"
 {yyerror ("Missing term"); DRECOVER (3);;
     break;}
-case 502:
-#line 2533 "./parse.y"
+case 499:
+#line 2531 "./parse.y"
 { yyval.node = build_assignment (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[-2].node, yyvsp[0].node); ;
     break;}
-case 503:
-#line 2535 "./parse.y"
+case 500:
+#line 2533 "./parse.y"
 {
 		  if (ctxp->prevent_ese != lineno)
 		    yyerror ("Missing term");
@@ -5255,7 +5213,7 @@ yyerrhandle:
     }
   return 1;
 }
-#line 2561 "./parse.y"
+#line 2559 "./parse.y"
 
 
 
@@ -5465,7 +5423,7 @@ java_parser_context_push_initialized_fie
 }
 
 /* Pop the lists of initialized field. If this lists aren't empty,
-   remember them so we can use it to create and populate the $finit$
+   remember them so we can use it to create and populate the finit$
    or <clinit> functions. */
 
 static void
@@ -5963,10 +5921,8 @@ build_unresolved_array_type (type_or_wfl
 		 IDENTIFIER_POINTER (EXPR_WFL_NODE (type_or_wfl)),
 		 IDENTIFIER_LENGTH (EXPR_WFL_NODE (type_or_wfl)));
   ptr = obstack_finish (&temporary_obstack);
-  return build_expr_wfl (get_identifier (ptr),
-			 EXPR_WFL_FILENAME (type_or_wfl),
-			 EXPR_WFL_LINENO (type_or_wfl),
-			 EXPR_WFL_COLNO (type_or_wfl));
+  EXPR_WFL_NODE (type_or_wfl) = get_identifier (ptr);
+  return type_or_wfl;
 }
 
 static void
@@ -6001,7 +5957,8 @@ check_class_interface_creation (is_inter
        - Can't be imported by a single type import
        - Can't already exists in the package */
   if (IS_A_SINGLE_IMPORT_CLASSFILE_NAME_P (raw_name)
-      && (node = find_name_in_single_imports (raw_name)))
+      && (node = find_name_in_single_imports (raw_name))
+      && !CPC_INNER_P ())
     {
       parse_error_context 
 	(cl, "%s name `%s' clashes with imported type `%s'",
@@ -6560,7 +6517,7 @@ create_class (flags, id, super, interfac
 }
 
 /* End a class declaration: register the statements used to create
-   $finit$ and <clinit>, pop the current class and resume the prior
+   finit$ and <clinit>, pop the current class and resume the prior
    parser context if necessary.  */
 
 static void
@@ -6618,9 +6575,9 @@ add_inner_class_fields (class_decl, fct_
 	  wfl = build_wfl_node (get_identifier (name));
 	  init = build_wfl_node (get_identifier (pname));
 	  /* Build an initialization for the field: it will be
-	     initialized by a parameter added to $finit$, bearing a
+	     initialized by a parameter added to finit$, bearing a
 	     mangled name of the field itself (param$<n>.) The
-	     parameter is provided to $finit$ by the constructor
+	     parameter is provided to finit$ by the constructor
 	     invoking it (hence the constructor will also feature a
 	     hidden parameter, set to the value of the outer context
 	     local at the time the inner class is created.)
@@ -6629,7 +6586,7 @@ add_inner_class_fields (class_decl, fct_
 	     be accessed by the inner class. It's actually not trivial
 	     to minimize these aliases down to the ones really
 	     used. One way to do that would be to expand all regular
-	     methods first, then $finit$ to get a picture of what's
+	     methods first, then finit$ to get a picture of what's
 	     used.  It works with the exception that we would have to
 	     go back on all constructor invoked in regular methods to
 	     have their invokation reworked (to include the right amount
@@ -6641,7 +6598,7 @@ add_inner_class_fields (class_decl, fct_
 	     use.
 	     
 	     On the other hand, it only affect local inner classes,
-	     whose constructors (and $finit$ call) will be featuring
+	     whose constructors (and finit$ call) will be featuring
 	     unecessary arguments. It's easy for a developper to keep
 	     this number of parameter down by using the `final'
 	     keyword only when necessary. For the time being, we can
@@ -6847,7 +6804,7 @@ register_fields (flags, type, variable_l
 
       /* If the couple initializer/initialized is marked ARG_FINAL_P, we
 	 mark the created field FIELD_LOCAL_ALIAS, so that we can 
-	 hide parameters to this inner class $finit$ and constructors. */
+	 hide parameters to this inner class finit$ and constructors. */
       if (ARG_FINAL_P (current))
 	FIELD_LOCAL_ALIAS (field_decl) = 1;
       
@@ -6888,8 +6845,8 @@ register_fields (flags, type, variable_l
   lineno = saved_lineno;
 }
 
-/* Generate $finit$, using the list of initialized fields to populate
-   its body. $finit$'s parameter(s) list is adjusted to include the
+/* Generate finit$, using the list of initialized fields to populate
+   its body. finit$'s parameter(s) list is adjusted to include the
    one(s) used to initialized the field(s) caching outer context
    local(s). */
 
@@ -6958,14 +6915,18 @@ method_header (flags, type, mdecl, throw
      int flags;
      tree type, mdecl, throws;
 {
-  tree meth = TREE_VALUE (mdecl);
-  tree id = TREE_PURPOSE (mdecl);
   tree type_wfl = NULL_TREE;
   tree meth_name = NULL_TREE;
   tree current, orig_arg, this_class = NULL;
+  tree id, meth;
   int saved_lineno;
   int constructor_ok = 0, must_chain;
   int count;
+
+  if (mdecl == error_mark_node)
+    return error_mark_node;
+  meth = TREE_VALUE (mdecl);
+  id = TREE_PURPOSE (mdecl);
   
   check_modifiers_consistency (flags);
 
@@ -7363,6 +7324,9 @@ method_declarator (id, list)
 
   patch_stage = JDEP_NO_PATCH;
 
+  if (GET_CPC () == error_mark_node)
+    return error_mark_node;
+
   /* If we're dealing with an inner class constructor, we hide the
      this$<n> decl in the name field of its parameter declaration.  We
      also might have to hide the outer context local alias
@@ -7695,7 +7659,7 @@ java_check_circular_reference ()
    count is kept of the number of crafted parameters. MODE governs
    what eventually gets created: something suitable for a function
    creation or a function invocation, either the constructor or
-   $finit$.  */
+   finit$.  */
 
 static tree
 build_alias_initializer_parameter_list (mode, class_type, parm, artificial)
@@ -7704,10 +7668,12 @@ build_alias_initializer_parameter_list (
     int *artificial;
 {
   tree field;
+  tree additional_parms = NULL_TREE;
+
   for (field = TYPE_FIELDS (class_type); field; field = TREE_CHAIN (field))
     if (FIELD_LOCAL_ALIAS (field))
       {
-	char *buffer = IDENTIFIER_POINTER (DECL_NAME (field));
+	const char *buffer = IDENTIFIER_POINTER (DECL_NAME (field));
 	tree purpose = NULL_TREE, value = NULL_TREE, name = NULL_TREE;
 
 	switch (mode)
@@ -7754,11 +7720,19 @@ build_alias_initializer_parameter_list (
 	      }
 	    break;
 	  }
-	parm = tree_cons (purpose, value, parm);
+	additional_parms = tree_cons (purpose, value, additional_parms);
 	if (artificial)
 	  *artificial +=1;
       }
-  return parm;
+  if (additional_parms)
+    {
+      if (ANONYMOUS_CLASS_P (class_type) 
+          && mode == AIPL_FUNCTION_CTOR_INVOCATION)
+        additional_parms = nreverse (additional_parms);
+      parm = chainon (additional_parms, parm);
+    }
+
+   return parm;
 }
 
 /* Craft a constructor for CLASS_DECL -- what we should do when none
@@ -8079,7 +8053,10 @@ resolve_class (enclosing, class_type, de
   while (name[0] == '[')
     name++;
   if (base != name)
-    TYPE_NAME (class_type) = get_identifier (name);
+    {
+      TYPE_NAME (class_type) = get_identifier (name);
+      WFL_STRIP_BRACKET (cl, cl);
+    }
 
   /* 2- Resolve the bare type */
   if (!(resolved_type_decl = do_resolve_class (enclosing, class_type, 
@@ -8250,7 +8227,7 @@ resolve_and_layout (something, cl)
      tree something;
      tree cl;
 {
-  tree decl;
+  tree decl, decl_type;
 
   /* Don't do that on the current class */
   if (something == current_class)
@@ -8293,13 +8270,14 @@ resolve_and_layout (something, cl)
     return NULL_TREE;
 
   /* Resolve and layout if necessary */
-  layout_class_methods (TREE_TYPE (decl));
-  /* Check methods, but only once */
-  if (CLASS_FROM_SOURCE_P (TREE_TYPE (decl)) 
-      && !CLASS_LOADED_P (TREE_TYPE (decl)))
-    CHECK_METHODS (decl);
-  if (TREE_TYPE (decl) != current_class && !CLASS_LOADED_P (TREE_TYPE (decl)))
-    safe_layout_class (TREE_TYPE (decl));
+  decl_type = TREE_TYPE (decl);
+  layout_class_methods (decl_type);
+  /* Check methods */
+  if (CLASS_FROM_SOURCE_P (decl_type))
+    java_check_methods (decl);
+  /* Layout the type if necessary */ 
+  if (decl_type != current_class && !CLASS_LOADED_P (decl_type))
+    safe_layout_class (decl_type);
 
   return decl;
 }
@@ -8476,7 +8454,7 @@ check_method_redefinition (class, method
   tree redef, name;
   tree cl = DECL_NAME (method);
   tree sig = TYPE_ARGUMENT_SIGNATURE (TREE_TYPE (method));
-  /* decl name of artificial <clinit> and $finit$ doesn't need to be
+  /* decl name of artificial <clinit> and finit$ doesn't need to be
      fixed and checked */
 
   /* Reset the method name before running the check. If it returns 1,
@@ -8503,13 +8481,15 @@ check_method_redefinition (class, method
   return 0;
 }
 
-static void
+/* Return 1 if check went ok, 0 otherwise.  */
+static int
 check_abstract_method_definitions (do_interface, class_decl, type)
      int do_interface;
      tree class_decl, type;
 {
   tree class = TREE_TYPE (class_decl);
   tree method, end_type;
+  int ok = 1;
 
   end_type = (do_interface ? object_type_node : type);
   for (method = TYPE_METHODS (type); method; method = TREE_CHAIN (method))
@@ -8582,13 +8562,27 @@ check_abstract_method_definitions (do_in
 	     IDENTIFIER_POINTER (ccn),
 	     (CLASS_INTERFACE (class_decl) ? "interface" : "class"),
 	     IDENTIFIER_POINTER (DECL_NAME (class_decl)));
-	  
+	  ok = 0;
 	  free (t);
-	  
+
 	  if (saved_wfl)
 	    DECL_NAME (method) = saved_wfl;
 	}
     }
+
+  if (ok && do_interface)
+    {
+      /* Check for implemented interfaces. */
+      int i;
+      tree vector = TYPE_BINFO_BASETYPES (type);
+      for (i = 1; ok && vector && i < TREE_VEC_LENGTH (vector); i++)
+	{
+	  tree super = BINFO_TYPE (TREE_VEC_ELT (vector, i));
+	  ok = check_abstract_method_definitions (1, class_decl, super);
+	}
+    }
+
+  return ok;
 }
 
 /* Check that CLASS_DECL somehow implements all inherited abstract
@@ -8645,6 +8639,23 @@ check_method_types_complete (decl)
   return 1;
 }
 
+/* Visible interface to check methods contained in CLASS_DECL */
+
+void
+java_check_methods (class_decl)
+     tree class_decl;
+{
+  if (CLASS_METHOD_CHECKED_P (TREE_TYPE (class_decl)))
+    return;
+
+  if (CLASS_INTERFACE (class_decl))
+    java_check_abstract_methods (class_decl);
+  else
+    java_check_regular_methods (class_decl);
+  
+  CLASS_METHOD_CHECKED_P (TREE_TYPE (class_decl)) = 1;
+}
+
 /* Check all the methods of CLASS_DECL. Methods are first completed
    then checked according to regular method existance rules.  If no
    constructor for CLASS_DECL were encountered, then build its
@@ -9976,7 +9987,7 @@ java_layout_classes ()
   /* Then check the methods of all parsed classes */
   for (current = ctxp->gclass_list; current; current = TREE_CHAIN (current))
     if (CLASS_FROM_SOURCE_P (TREE_TYPE (TREE_VALUE (current))))
-      CHECK_METHODS (TREE_VALUE (current));
+      java_check_methods (TREE_VALUE (current));
   java_parse_abort_on_error ();
 
   for (current = ctxp->gclass_list; current; current = TREE_CHAIN (current))
@@ -10041,7 +10052,7 @@ java_complete_expand_class (outer)
    we expand regular methods first. This allows us get an estimate on
    how outer context local alias fields are really used so we can add
    to the constructor just enough code to initialize them properly (it
-   also lets us generate $finit$ correctly.) Then we expand the
+   also lets us generate finit$ correctly.) Then we expand the
    constructors and then <clinit>.  */
 
 static void
@@ -10062,7 +10073,7 @@ java_complete_expand_methods (class_decl
   first_decl = TYPE_METHODS (current_class);
   clinit = maybe_generate_pre_expand_clinit (current_class);
 
-  /* Then generate $finit$ (if we need to) because constructor will
+  /* Then generate finit$ (if we need to) because constructor will
    try to use it.*/
   if (TYPE_FINIT_STMT_LIST (current_class))
     {
@@ -10211,12 +10222,14 @@ maybe_yank_clinit (mdecl)
   
   if (!DECL_CLINIT_P (mdecl))
     return 0;
-  
-  /* If the body isn't empty, then we keep <clinit> */
+
+  /* If the body isn't empty, then we keep <clinit>. Note that if
+     we're emitting classfiles, this isn't enough not to rule it
+     out. */
   fbody = DECL_FUNCTION_BODY (mdecl);
   if ((bbody = BLOCK_EXPR_BODY (fbody)))
     bbody = BLOCK_EXPR_BODY (bbody);
-  if (bbody && bbody != empty_stmt_node)
+  if (bbody && ! flag_emit_class_files && bbody != empty_stmt_node)
     return 0;
   
   type = DECL_CONTEXT (mdecl);
@@ -10224,9 +10237,34 @@ maybe_yank_clinit (mdecl)
 
   for (current = (current ? TREE_CHAIN (current) : current); 
        current; current = TREE_CHAIN (current))
-    if (!(FIELD_STATIC (current) && FIELD_FINAL (current)
-	  && DECL_INITIAL (current) && TREE_CONSTANT (DECL_INITIAL (current))))
-      break;
+    {
+      tree f_init;
+
+      /* We're not interested in non static field */
+      if (!FIELD_STATIC (current))
+	continue;
+
+      /* Anything that isn't String or a basic type is ruled out -- or
+	 if we now how to deal with it (when doing things natively) we
+	 should generated an empty <clinit> so that SUID are computed
+	 correctly. */
+      if (! JSTRING_TYPE_P (TREE_TYPE (current))
+	  && ! JNUMERIC_TYPE_P (TREE_TYPE (current)))
+	break;
+	  
+      f_init = DECL_INITIAL (current);
+      /* If we're emitting native code, we want static final fields to
+	 have constant initializers. If we don't meet these
+	 conditions, we keep <clinit> */
+      if (!flag_emit_class_files
+	  && !(FIELD_FINAL (current) && f_init && TREE_CONSTANT (f_init)))
+	break;
+      /* If we're emitting bytecode, we want static fields to have
+	 constant initializers or no initializer. If we don't meet
+	 these conditions, we keep <clinit> */
+      if (flag_emit_class_files && f_init && !TREE_CONSTANT (f_init))
+	break;
+    }
 
   if (current)
     return 0;
@@ -10349,7 +10387,7 @@ build_outer_field_access (id, decl)
   tree ctx = TREE_TYPE (DECL_CONTEXT (TYPE_NAME (current_class)));
 
   /* If decl's class is the direct outer class of the current_class,
-     build the access as `this$<n>.<field>'. Not that we will break
+     build the access as `this$<n>.<field>'. Note that we will break
      the `private' barrier if we're not emitting bytecodes. */
   if (ctx == DECL_CONTEXT (decl) 
       && (!FIELD_PRIVATE (decl) || !flag_emit_class_files ))
@@ -10365,7 +10403,7 @@ build_outer_field_access (id, decl)
       int lc = EXPR_WFL_LINECOL (id);
 
       /* Now we chain the required number of calls to the access$0 to
-	 get a hold to the enclosing instance we need, and the we
+	 get a hold to the enclosing instance we need, and then we
 	 build the field access. */
       access = build_access_to_thisn (ctx, DECL_CONTEXT (decl), lc);
 
@@ -10957,14 +10995,21 @@ build_dot_class_method (class)
 }
 
 static tree
-build_dot_class_method_invocation (name)
-     tree name;
+build_dot_class_method_invocation (type)
+     tree type;
 {
-  tree s = make_node (STRING_CST);
-  TREE_STRING_LENGTH (s) = IDENTIFIER_LENGTH (name);
+  tree sig_id, s;
+
+  if (TYPE_ARRAY_P (type))
+    sig_id = build_java_signature (type);
+  else
+    sig_id = DECL_NAME (TYPE_NAME (type));
+
+  s = make_node (STRING_CST);
+  TREE_STRING_LENGTH (s) = IDENTIFIER_LENGTH (sig_id);
   TREE_STRING_POINTER (s) = obstack_alloc (expression_obstack,
 					   TREE_STRING_LENGTH (s)+1);
-  strcpy (TREE_STRING_POINTER (s), IDENTIFIER_POINTER (name));
+  strcpy (TREE_STRING_POINTER (s), IDENTIFIER_POINTER (sig_id));
   return build_method_invocation (build_wfl_node (get_identifier ("class$")),
 				  build_tree_list (NULL_TREE, s));
 }
@@ -11006,6 +11051,11 @@ fix_constructors (mdecl)
 	 CLASSNAME() constructor */
       start_artificial_method_body (mdecl);
       
+      /* Insert an assignment to the this$<n> hidden field, if
+         necessary */
+      if ((thisn_assign = build_thisn_assign ()))
+	java_method_add_stmt (mdecl, thisn_assign);
+
       /* We don't generate a super constructor invocation if we're
 	 compiling java.lang.Object. build_super_invocation takes care
 	 of that. */
@@ -11015,11 +11065,6 @@ fix_constructors (mdecl)
          super invocation. */
       add_instance_initializer (mdecl);
 
-      /* Insert an assignment to the this$<n> hidden field, if
-         necessary */
-      if ((thisn_assign = build_thisn_assign ()))
-	java_method_add_stmt (mdecl, thisn_assign);
-
       end_artificial_method_body (mdecl);
     }
   /* Search for an explicit constructor invocation */
@@ -11051,14 +11096,14 @@ fix_constructors (mdecl)
 	compound = add_stmt_to_compound (compound, NULL_TREE,
                                          build_super_invocation (mdecl));
       
-      /* Insert the instance initializer block right here, after the
-         super invocation. */
-      add_instance_initializer (mdecl);
-
       /* Generate the assignment to this$<n>, if necessary */
       if ((thisn_assign = build_thisn_assign ()))
         compound = add_stmt_to_compound (compound, NULL_TREE, thisn_assign);
 
+      /* Insert the instance initializer block right here, after the
+         super invocation. */
+      add_instance_initializer (mdecl);
+
       /* Fix the constructor main block if we're adding extra stmts */
       if (compound)
 	{
@@ -11605,8 +11650,10 @@ resolve_qualified_expression_name (wfl, 
 	     instantiation using a primary qualified by a `new' */
 	  RESTORE_THIS_AND_CURRENT_CLASS;
 
-	  /* EH check */
-	  if (location)
+	  /* EH check. No check on access$<n> functions */
+	  if (location 
+	      && !OUTER_FIELD_ACCESS_IDENTIFIER_P 
+	            (DECL_NAME (current_function_decl)))
 	    check_thrown_exceptions (location, ret_decl);
 
 	  /* If the previous call was static and this one is too,
@@ -11858,6 +11905,8 @@ resolve_qualified_expression_name (wfl, 
 					  current_class);
 			  return 1;
 			}
+                      if (outer_field_access_p (current_class, decl))
+                        decl = build_outer_field_access (qual_wfl, decl);
 		    }
 		  else
 		    {
@@ -12435,11 +12484,7 @@ patch_method_invocation (patch, primary,
       args = build_alias_initializer_parameter_list
 	(AIPL_FUNCTION_CTOR_INVOCATION, DECL_CONTEXT (list), args, NULL);
 
-      /* We have to reverse things. Find out why. FIXME */
-      if (ANONYMOUS_CLASS_P (DECL_CONTEXT (list)))
-	args = nreverse (args);
-      
-      /* Secretely pass the current_this/primary as a second argument */
+      /* Secretly pass the current_this/primary as a second argument */
       if (primary || current_this)
 	args = tree_cons (NULL_TREE, (primary ? primary : current_this), args);
       else
@@ -12498,7 +12543,7 @@ patch_method_invocation (patch, primary,
     {
       tree finit_parms, finit_call;
       
-      /* Prepare to pass hidden parameters to $finit$, if any. */
+      /* Prepare to pass hidden parameters to finit$, if any. */
       finit_parms = build_alias_initializer_parameter_list 
 	(AIPL_FUNCTION_FINIT_INVOCATION, current_class, NULL_TREE, NULL);
 
@@ -13360,12 +13405,14 @@ static int
 breakdown_qualified (left, right, source)
     tree *left, *right, source;
 {
-  char *p = IDENTIFIER_POINTER (source), *base;
+  char *p, *base;
   int   l = IDENTIFIER_LENGTH (source);
 
+  base = alloca (l + 1);
+  memcpy (base, IDENTIFIER_POINTER (source), l + 1);
+
   /* Breakdown NAME into REMAINDER . IDENTIFIER */
-  base = p;
-  p += (l-1);
+  p = base + l - 1;
   while (*p != '.' && p != base)
     p--;
 
@@ -13376,8 +13423,7 @@ breakdown_qualified (left, right, source
   *p = '\0';
   if (right)
     *right = get_identifier (p+1);
-  *left = get_identifier (IDENTIFIER_POINTER (source));
-  *p = '.';
+  *left = get_identifier (base);
   
   return 0;
 }
@@ -13644,6 +13690,8 @@ java_complete_lhs (node)
       /* Multiple instance of a case label bearing the same
 	 value is checked during code generation. The case
 	 expression is allright so far. */
+      if (TREE_CODE (cn) == VAR_DECL)
+	cn = DECL_INITIAL (cn);
       TREE_OPERAND (node, 0) = cn;
       TREE_TYPE (node) = void_type_node;
       CAN_COMPLETE_NORMALLY (node) = 1;
@@ -14693,6 +14741,19 @@ patch_assignment (node, wfl_op1, wfl_op2
 	}
     }
 
+  /* Final locals can be used as case values in switch
+     statement. Prepare them for this eventuality. */
+  if (TREE_CODE (lvalue) == VAR_DECL 
+      && LOCAL_FINAL (lvalue)
+      && TREE_CONSTANT (new_rhs)
+      && IDENTIFIER_LOCAL_VALUE (DECL_NAME (lvalue))
+      && JINTEGRAL_TYPE_P (TREE_TYPE (lvalue))
+      )
+    {
+      TREE_CONSTANT (lvalue) = 1;
+      DECL_INITIAL (lvalue) = new_rhs;
+    }
+
   TREE_OPERAND (node, 0) = lvalue;
   TREE_OPERAND (node, 1) = new_rhs;
   TREE_TYPE (node) = lhs_type;
@@ -14772,7 +14833,7 @@ try_builtin_assignconv (wfl_op1, lhs_typ
 }
 
 /* Return 1 if RHS_TYPE can be converted to LHS_TYPE by identity
-   conversion (5.1.1) or widening primitve conversion (5.1.2).  Return
+   conversion (5.1.1) or widening primitive conversion (5.1.2).  Return
    0 is the conversion test fails.  This implements parts the method
    invocation convertion (5.3).  */
 
@@ -15490,20 +15551,26 @@ do_merge_string_cste (cste, string, stri
      const char *string;
      int string_len, after;
 {
-  int len = TREE_STRING_LENGTH (cste) + string_len;
   const char *old = TREE_STRING_POINTER (cste);
+  int old_len = TREE_STRING_LENGTH (cste);
+  int len = old_len + string_len;
+  char *new;
+  
+  cste = make_node (STRING_CST);
   TREE_STRING_LENGTH (cste) = len;
-  TREE_STRING_POINTER (cste) = obstack_alloc (expression_obstack, len+1);
+  new = TREE_STRING_POINTER (cste) = obstack_alloc (expression_obstack, len+1);
+
   if (after)
     {
-      strcpy (TREE_STRING_POINTER (cste), string);
-      strcat (TREE_STRING_POINTER (cste), old);
+      memcpy (new, string, string_len);
+      memcpy (&new [string_len], old, old_len);
     }
   else
     {
-      strcpy (TREE_STRING_POINTER (cste), old);
-      strcat (TREE_STRING_POINTER (cste), string);
+      memcpy (new, old, old_len);
+      memcpy (&new [old_len], string, string_len);
     }
+  new [len] = '\0';
   return cste;
 }
 
@@ -15806,8 +15873,7 @@ patch_incomplete_class_ref (node)
      synthetic static method `class$'. */
   if (!TYPE_DOT_CLASS (current_class))
       build_dot_class_method (current_class);
-  ref_type = 
-    build_dot_class_method_invocation (DECL_NAME (TYPE_NAME (ref_type)));
+  ref_type = build_dot_class_method_invocation (ref_type);
   return java_complete_tree (ref_type);
 }
 
@@ -17026,7 +17092,7 @@ patch_switch_statement (node)
   se_type = TREE_TYPE (se);
   /* The type of the switch expression must be char, byte, short or
      int */
-  if (!JINTEGRAL_TYPE_P (se_type))
+  if (! JINTEGRAL_TYPE_P (se_type) || se_type == long_type_node)
     {
       EXPR_WFL_LINECOL (wfl_operator) = EXPR_WFL_LINECOL (node);
       parse_error_context (wfl_operator,
--- gcc/java/parse-scan.c.jj	Thu Jul 13 15:27:20 2000
+++ gcc/java/parse-scan.c	Tue Aug  5 15:58:05 2003
@@ -142,12 +142,11 @@ static int absorber;
 #define USE_ABSORBER absorber = 0
 
 /* Keep track of the current class name and package name.  */
-static const char *current_class;
+static char *current_class;
 static const char *package_name;
 
 /* Keep track of the current inner class qualifier. */
-static char *inner_qualifier;
-static int   inner_qualifier_length;
+static int current_class_length;
 
 /* Keep track of whether things have be listed before.  */
 static int previous_output;
@@ -155,10 +154,13 @@ static int previous_output;
 /* Record modifier uses  */
 static int modifier_value;
 
-/* Keep track of number of bracket pairs after a variable declarator
+/* Keeps track of number of bracket pairs after a variable declarator
    id.  */
 static int bracket_count; 
 
+/* Numbers anonymous classes */
+static int anonymous_count;
+
 /* Record a method declaration  */
 struct method_declarator {
   const char *method_name;
@@ -181,13 +183,13 @@ static void pop_class_context PARAMS ((v
 #include "lex.h"
 #include "parse.h"
 
-#line 106 "./parse-scan.y"
+#line 108 "./parse-scan.y"
 typedef union {
   char *node;
   struct method_declarator *declarator;
   int value;			/* For modifiers */
 } YYSTYPE;
-#line 112 "./parse-scan.y"
+#line 114 "./parse-scan.y"
 
 #include "lex.c"
 #ifndef YYDEBUG
@@ -204,11 +206,11 @@ typedef union {
 
 
 
-#define	YYFINAL		605
+#define	YYFINAL		608
 #define	YYFLAG		-32768
 #define	YYNTBASE	110
 
-#define YYTRANSLATE(x) ((unsigned)(x) <= 363 ? yytranslate[x] : 257)
+#define YYTRANSLATE(x) ((unsigned)(x) <= 363 ? yytranslate[x] : 260)
 
 static const char yytranslate[] = {     0,
      2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
@@ -277,16 +279,16 @@ static const short yyprhs[] = {     0,
    672,   675,   679,   682,   686,   689,   693,   697,   703,   709,
    711,   715,   719,   724,   726,   729,   735,   738,   740,   742,
    744,   746,   750,   752,   754,   756,   758,   762,   766,   770,
-   774,   780,   785,   792,   798,   803,   809,   815,   822,   826,
-   830,   832,   836,   840,   844,   848,   853,   858,   863,   868,
-   870,   873,   877,   880,   884,   888,   892,   896,   901,   907,
-   914,   920,   927,   932,   937,   939,   941,   943,   945,   948,
-   951,   953,   955,   958,   961,   963,   966,   969,   971,   974,
-   977,   979,   985,   990,   995,  1001,  1003,  1007,  1011,  1015,
-  1017,  1021,  1025,  1027,  1031,  1035,  1039,  1041,  1045,  1049,
-  1053,  1057,  1061,  1063,  1067,  1071,  1073,  1077,  1079,  1083,
-  1085,  1089,  1091,  1095,  1097,  1101,  1103,  1109,  1111,  1113,
-  1117,  1119,  1121,  1123,  1125,  1127,  1129
+   774,   780,   785,   787,   792,   798,   804,   811,   812,   819,
+   820,   828,   832,   836,   838,   842,   846,   850,   854,   859,
+   864,   869,   874,   876,   879,   883,   886,   890,   894,   898,
+   902,   907,   913,   920,   926,   933,   938,   943,   945,   947,
+   949,   951,   954,   957,   959,   961,   964,   967,   969,   972,
+   975,   977,   980,   983,   985,   991,   996,  1001,  1007,  1009,
+  1013,  1017,  1021,  1023,  1027,  1031,  1033,  1037,  1041,  1045,
+  1047,  1051,  1055,  1059,  1063,  1067,  1069,  1073,  1077,  1079,
+  1083,  1085,  1089,  1091,  1095,  1097,  1101,  1103,  1107,  1109,
+  1115,  1117,  1119,  1123,  1125,  1127,  1129,  1131,  1133,  1135
 };
 
 static const short yyrhs[] = {   123,
@@ -310,7 +312,7 @@ static const short yyrhs[] = {   123,
      0,   132,     0,   162,     0,   112,   143,    99,     0,   131,
    112,   143,    99,     0,   144,     0,   143,   100,   144,     0,
    145,     0,   145,    92,   146,     0,   122,     0,   145,    97,
-    98,     0,   255,     0,   173,     0,   148,   154,     0,   112,
+    98,     0,   258,     0,   173,     0,   148,   154,     0,   112,
    149,   152,     0,    59,   149,   152,     0,   131,   112,   149,
    152,     0,   131,    59,   149,   152,     0,   122,    93,    94,
      0,   122,    93,   150,    94,     0,   149,    97,    98,     0,
@@ -323,7 +325,7 @@ static const short yyrhs[] = {   123,
     93,    94,     0,   120,    93,   150,    94,     0,    95,    96,
      0,    95,   160,    96,     0,    95,   176,    96,     0,    95,
    160,   176,    96,     0,   161,    93,    94,    99,     0,   161,
-    93,   224,    94,    99,     0,   119,   101,    65,    93,   224,
+    93,   227,    94,    99,     0,   119,   101,    65,    93,   227,
     94,    99,     0,   119,   101,    65,    93,    94,    99,     0,
     76,     0,    65,     0,     0,    61,   122,   163,   168,     0,
      0,   131,    61,   122,   164,   168,     0,     0,    61,   122,
@@ -342,108 +344,109 @@ static const short yyrhs[] = {   123,
    187,     0,   192,     0,   202,     0,   210,     0,   211,     0,
    212,     0,   214,     0,   213,     0,   216,     0,    99,     0,
    122,    88,     0,   184,   180,     0,   184,   181,     0,   188,
-    99,     0,   252,     0,   236,     0,   237,     0,   233,     0,
-   234,     0,   230,     0,   222,     0,    48,    93,   255,    94,
-   180,     0,    48,    93,   255,    94,   181,    56,   180,     0,
-    48,    93,   255,    94,   181,    56,   181,     0,    68,    93,
-   255,    94,   193,     0,    95,    96,     0,    95,   196,    96,
+    99,     0,   255,     0,   239,     0,   240,     0,   236,     0,
+   237,     0,   233,     0,   222,     0,    48,    93,   258,    94,
+   180,     0,    48,    93,   258,    94,   181,    56,   180,     0,
+    48,    93,   258,    94,   181,    56,   181,     0,    68,    93,
+   258,    94,   193,     0,    95,    96,     0,    95,   196,    96,
      0,    95,   194,    96,     0,    95,   194,   196,    96,     0,
    195,     0,   194,   195,     0,   196,   176,     0,   197,     0,
-   196,   197,     0,    62,   256,    88,     0,    47,    88,     0,
-    66,    93,   255,    94,     0,   198,   180,     0,   198,   181,
-     0,    51,     0,   201,   180,    66,    93,   255,    94,    99,
-     0,   206,    99,   255,    99,   208,    94,   180,     0,   206,
-    99,    99,   208,    94,   180,     0,   206,    99,   255,    99,
+   196,   197,     0,    62,   259,    88,     0,    47,    88,     0,
+    66,    93,   258,    94,     0,   198,   180,     0,   198,   181,
+     0,    51,     0,   201,   180,    66,    93,   258,    94,    99,
+     0,   206,    99,   258,    99,   208,    94,   180,     0,   206,
+    99,    99,   208,    94,   180,     0,   206,    99,   258,    99,
    208,    94,   181,     0,   206,    99,    99,   208,    94,   181,
      0,    71,    93,     0,   205,   207,     0,     0,   209,     0,
    179,     0,     0,   209,     0,   188,     0,   209,   100,   188,
      0,    54,    99,     0,    54,   122,    99,     0,    73,    99,
-     0,    73,   122,    99,     0,    58,    99,     0,    58,   255,
-    99,     0,    49,   255,    99,     0,   215,    93,   255,    94,
-   175,     0,   215,    93,   255,    94,     1,     0,    44,     0,
+     0,    73,   122,    99,     0,    58,    99,     0,    58,   258,
+    99,     0,    49,   258,    99,     0,   215,    93,   258,    94,
+   175,     0,   215,    93,   258,    94,     1,     0,    44,     0,
     70,   175,   217,     0,    70,   175,   219,     0,    70,   175,
    217,   219,     0,   218,     0,   217,   218,     0,    60,    93,
-   151,    94,   175,     0,    64,   175,     0,   221,     0,   225,
-     0,   111,     0,    76,     0,    93,   255,    94,     0,   222,
-     0,   229,     0,   230,     0,   231,     0,   119,   101,    67,
+   151,    94,   175,     0,    64,   175,     0,   221,     0,   228,
+     0,   111,     0,    76,     0,    93,   258,    94,     0,   222,
+     0,   232,     0,   233,     0,   234,     0,   119,   101,    67,
      0,   113,   101,    67,     0,    59,   101,    67,     0,   119,
-   101,    76,     0,    72,   116,    93,   224,    94,     0,    72,
-   116,    93,    94,     0,    72,   116,    93,   224,    94,   138,
-     0,    72,   116,    93,    94,   138,     0,   223,   122,    93,
-    94,     0,   223,   122,    93,    94,   138,     0,   223,   122,
-    93,   224,    94,     0,   223,   122,    93,   224,    94,   138,
-     0,   119,   101,    72,     0,   220,   101,    72,     0,   255,
-     0,   224,   100,   255,     0,   224,   100,     1,     0,    72,
-   113,   226,     0,    72,   115,   226,     0,    72,   113,   226,
-   228,     0,    72,   115,   226,   228,     0,    72,   115,   228,
-   173,     0,    72,   113,   228,   173,     0,   227,     0,   226,
-   227,     0,    97,   255,    98,     0,    97,    98,     0,   228,
-    97,    98,     0,   220,   101,   122,     0,    65,   101,   122,
-     0,   119,    93,    94,     0,   119,    93,   224,    94,     0,
-   220,   101,   122,    93,    94,     0,   220,   101,   122,    93,
-   224,    94,     0,    65,   101,   122,    93,    94,     0,    65,
-   101,   122,    93,   224,    94,     0,   119,    97,   255,    98,
-     0,   221,    97,   255,    98,     0,   220,     0,   119,     0,
-   233,     0,   234,     0,   232,    46,     0,   232,    45,     0,
-   236,     0,   237,     0,     3,   235,     0,     4,   235,     0,
-   238,     0,    46,   235,     0,    45,   235,     0,   232,     0,
-    89,   235,     0,    90,   235,     0,   239,     0,    93,   113,
-   228,    94,   235,     0,    93,   113,    94,   235,     0,    93,
-   255,    94,   238,     0,    93,   119,   228,    94,   238,     0,
-   235,     0,   240,     5,   235,     0,   240,     6,   235,     0,
-   240,     7,   235,     0,   240,     0,   241,     3,   240,     0,
-   241,     4,   240,     0,   241,     0,   242,     8,   241,     0,
-   242,     9,   241,     0,   242,    10,   241,     0,   242,     0,
-   243,    20,   242,     0,   243,    18,   242,     0,   243,    21,
-   242,     0,   243,    19,   242,     0,   243,    57,   114,     0,
-   243,     0,   244,    16,   243,     0,   244,    17,   243,     0,
-   244,     0,   245,    11,   244,     0,   245,     0,   246,    12,
-   245,     0,   246,     0,   247,    13,   246,     0,   247,     0,
-   248,    14,   247,     0,   248,     0,   249,    15,   248,     0,
-   249,     0,   249,    87,   255,    88,   250,     0,   250,     0,
-   252,     0,   253,   254,   251,     0,   119,     0,   229,     0,
-   231,     0,    91,     0,    92,     0,   251,     0,   255,     0
+   101,    76,     0,    72,   116,    93,   227,    94,     0,    72,
+   116,    93,    94,     0,   223,     0,   226,   122,    93,    94,
+     0,   226,   122,    93,    94,   138,     0,   226,   122,    93,
+   227,    94,     0,   226,   122,    93,   227,    94,   138,     0,
+     0,    72,   116,    93,    94,   224,   138,     0,     0,    72,
+   116,    93,   227,    94,   225,   138,     0,   119,   101,    72,
+     0,   220,   101,    72,     0,   258,     0,   227,   100,   258,
+     0,   227,   100,     1,     0,    72,   113,   229,     0,    72,
+   115,   229,     0,    72,   113,   229,   231,     0,    72,   115,
+   229,   231,     0,    72,   115,   231,   173,     0,    72,   113,
+   231,   173,     0,   230,     0,   229,   230,     0,    97,   258,
+    98,     0,    97,    98,     0,   231,    97,    98,     0,   220,
+   101,   122,     0,    65,   101,   122,     0,   119,    93,    94,
+     0,   119,    93,   227,    94,     0,   220,   101,   122,    93,
+    94,     0,   220,   101,   122,    93,   227,    94,     0,    65,
+   101,   122,    93,    94,     0,    65,   101,   122,    93,   227,
+    94,     0,   119,    97,   258,    98,     0,   221,    97,   258,
+    98,     0,   220,     0,   119,     0,   236,     0,   237,     0,
+   235,    46,     0,   235,    45,     0,   239,     0,   240,     0,
+     3,   238,     0,     4,   238,     0,   241,     0,    46,   238,
+     0,    45,   238,     0,   235,     0,    89,   238,     0,    90,
+   238,     0,   242,     0,    93,   113,   231,    94,   238,     0,
+    93,   113,    94,   238,     0,    93,   258,    94,   241,     0,
+    93,   119,   231,    94,   241,     0,   238,     0,   243,     5,
+   238,     0,   243,     6,   238,     0,   243,     7,   238,     0,
+   243,     0,   244,     3,   243,     0,   244,     4,   243,     0,
+   244,     0,   245,     8,   244,     0,   245,     9,   244,     0,
+   245,    10,   244,     0,   245,     0,   246,    20,   245,     0,
+   246,    18,   245,     0,   246,    21,   245,     0,   246,    19,
+   245,     0,   246,    57,   114,     0,   246,     0,   247,    16,
+   246,     0,   247,    17,   246,     0,   247,     0,   248,    11,
+   247,     0,   248,     0,   249,    12,   248,     0,   249,     0,
+   250,    13,   249,     0,   250,     0,   251,    14,   250,     0,
+   251,     0,   252,    15,   251,     0,   252,     0,   252,    87,
+   258,    88,   253,     0,   253,     0,   255,     0,   256,   257,
+   254,     0,   119,     0,   232,     0,   234,     0,    91,     0,
+    92,     0,   254,     0,   258,     0
 };
 
 #endif
 
 #if YYDEBUG != 0
 static const short yyrline[] = { 0,
-   181,   186,   188,   189,   190,   191,   192,   196,   198,   201,
-   207,   212,   219,   221,   224,   228,   232,   236,   238,   242,
-   249,   251,   254,   258,   265,   270,   271,   272,   273,   274,
-   275,   276,   277,   280,   282,   285,   287,   290,   295,   297,
-   300,   304,   308,   310,   311,   317,   326,   337,   344,   344,
-   347,   349,   350,   353,   354,   357,   360,   364,   367,   371,
-   373,   376,   378,   379,   380,   383,   385,   386,   387,   391,
-   394,   398,   401,   404,   406,   409,   412,   416,   418,   422,
-   426,   429,   430,   432,   439,   446,   452,   455,   457,   463,
-   479,   495,   496,   499,   502,   506,   508,   509,   513,   515,
-   518,   528,   530,   533,   535,   541,   544,   548,   550,   551,
-   552,   556,   558,   561,   563,   567,   569,   574,   578,   578,
-   581,   581,   584,   584,   587,   589,   591,   594,   597,   601,
-   603,   606,   608,   609,   610,   613,   617,   622,   624,   625,
-   626,   629,   631,   635,   637,   640,   642,   645,   647,   648,
-   651,   655,   658,   662,   664,   665,   666,   667,   668,   671,
-   673,   674,   675,   676,   679,   681,   682,   683,   684,   685,
-   686,   687,   688,   689,   690,   693,   697,   702,   706,   712,
-   716,   718,   719,   720,   721,   722,   723,   726,   730,   734,
-   738,   742,   744,   745,   746,   749,   751,   754,   759,   761,
-   764,   766,   769,   773,   777,   781,   785,   789,   791,   794,
-   796,   799,   803,   806,   807,   808,   811,   812,   815,   817,
-   820,   822,   825,   827,   830,   832,   835,   839,   841,   844,
-   849,   851,   852,   855,   857,   860,   864,   869,   871,   874,
-   876,   877,   878,   879,   880,   881,   885,   887,   889,   893,
-   897,   899,   903,   904,   908,   909,   910,   911,   914,   917,
-   920,   922,   923,   926,   928,   929,   930,   933,   934,   937,
-   939,   942,   946,   948,   951,   953,   956,   959,   961,   962,
-   963,   964,   967,   970,   973,   975,   977,   978,   981,   985,
-   989,   991,   992,   993,   994,   997,  1001,  1005,  1007,  1008,
-  1009,  1012,  1014,  1015,  1016,  1019,  1021,  1022,  1023,  1026,
-  1028,  1029,  1032,  1034,  1035,  1036,  1039,  1041,  1042,  1043,
-  1044,  1045,  1048,  1050,  1051,  1054,  1056,  1059,  1061,  1064,
-  1066,  1069,  1071,  1074,  1076,  1079,  1081,  1084,  1086,  1089,
-  1093,  1096,  1097,  1100,  1102,  1105,  1109
+   183,   188,   190,   191,   192,   193,   194,   198,   200,   203,
+   209,   214,   221,   223,   226,   230,   234,   238,   240,   244,
+   251,   253,   256,   260,   267,   272,   273,   274,   275,   276,
+   277,   278,   279,   282,   284,   287,   289,   292,   297,   299,
+   302,   306,   310,   312,   313,   319,   328,   339,   346,   346,
+   349,   351,   352,   355,   356,   359,   362,   366,   369,   373,
+   375,   378,   380,   381,   382,   385,   387,   388,   389,   393,
+   396,   400,   403,   406,   408,   411,   414,   418,   420,   424,
+   428,   431,   432,   434,   441,   448,   454,   457,   459,   465,
+   481,   497,   498,   501,   504,   508,   510,   511,   515,   517,
+   520,   530,   532,   535,   537,   543,   546,   550,   552,   553,
+   554,   558,   560,   563,   565,   569,   571,   576,   580,   580,
+   583,   583,   586,   586,   589,   591,   593,   596,   599,   603,
+   605,   608,   610,   611,   612,   615,   619,   624,   626,   627,
+   628,   631,   633,   637,   639,   642,   644,   647,   649,   650,
+   653,   657,   660,   664,   666,   667,   668,   669,   670,   673,
+   675,   676,   677,   678,   681,   683,   684,   685,   686,   687,
+   688,   689,   690,   691,   692,   695,   699,   704,   708,   714,
+   718,   720,   721,   722,   723,   724,   725,   728,   732,   736,
+   740,   744,   746,   747,   748,   751,   753,   756,   761,   763,
+   766,   768,   771,   775,   779,   783,   787,   791,   793,   796,
+   798,   801,   805,   808,   809,   810,   813,   814,   817,   819,
+   822,   824,   827,   829,   832,   834,   837,   841,   843,   846,
+   851,   853,   854,   857,   859,   862,   866,   871,   873,   876,
+   878,   879,   880,   881,   882,   883,   887,   889,   891,   895,
+   899,   901,   902,   903,   904,   905,   906,   909,   913,   913,
+   916,   918,   921,   924,   926,   927,   930,   932,   933,   934,
+   937,   938,   941,   943,   946,   950,   952,   955,   957,   960,
+   963,   965,   966,   967,   968,   971,   974,   977,   979,   981,
+   982,   985,   989,   993,   995,   996,   997,   998,  1001,  1005,
+  1009,  1011,  1012,  1013,  1016,  1018,  1019,  1020,  1023,  1025,
+  1026,  1027,  1030,  1032,  1033,  1036,  1038,  1039,  1040,  1043,
+  1045,  1046,  1047,  1048,  1049,  1052,  1054,  1055,  1058,  1060,
+  1063,  1065,  1068,  1070,  1073,  1075,  1078,  1080,  1083,  1085,
+  1088,  1090,  1093,  1097,  1100,  1101,  1104,  1106,  1109,  1113
 };
 #endif
 
@@ -490,15 +493,16 @@ static const char * const yytname[] = { 
 "for_begin","for_init","for_update","statement_expression_list","break_statement",
 "continue_statement","return_statement","throw_statement","synchronized_statement",
 "synchronized","try_statement","catches","catch_clause","finally","primary",
-"primary_no_new_array","class_instance_creation_expression","something_dot_new",
-"argument_list","array_creation_expression","dim_exprs","dim_expr","dims","field_access",
-"method_invocation","array_access","postfix_expression","post_increment_expression",
-"post_decrement_expression","unary_expression","pre_increment_expression","pre_decrement_expression",
-"unary_expression_not_plus_minus","cast_expression","multiplicative_expression",
-"additive_expression","shift_expression","relational_expression","equality_expression",
-"and_expression","exclusive_or_expression","inclusive_or_expression","conditional_and_expression",
-"conditional_or_expression","conditional_expression","assignment_expression",
-"assignment","left_hand_side","assignment_operator","expression","constant_expression", NULL
+"primary_no_new_array","class_instance_creation_expression","anonymous_class_creation",
+"@7","@8","something_dot_new","argument_list","array_creation_expression","dim_exprs",
+"dim_expr","dims","field_access","method_invocation","array_access","postfix_expression",
+"post_increment_expression","post_decrement_expression","unary_expression","pre_increment_expression",
+"pre_decrement_expression","unary_expression_not_plus_minus","cast_expression",
+"multiplicative_expression","additive_expression","shift_expression","relational_expression",
+"equality_expression","and_expression","exclusive_or_expression","inclusive_or_expression",
+"conditional_and_expression","conditional_or_expression","conditional_expression",
+"assignment_expression","assignment","left_hand_side","assignment_operator",
+"expression","constant_expression", NULL
 };
 #endif
 
@@ -528,16 +532,16 @@ static const short yyr1[] = {     0,
    210,   210,   211,   211,   212,   212,   213,   214,   214,   215,
    216,   216,   216,   217,   217,   218,   219,   220,   220,   221,
    221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
-   222,   222,   222,   222,   222,   222,   222,   222,   223,   223,
-   224,   224,   224,   225,   225,   225,   225,   225,   225,   226,
-   226,   227,   228,   228,   229,   229,   230,   230,   230,   230,
-   230,   230,   231,   231,   232,   232,   232,   232,   233,   234,
-   235,   235,   235,   235,   235,   236,   237,   238,   238,   238,
-   238,   239,   239,   239,   239,   240,   240,   240,   240,   241,
-   241,   241,   242,   242,   242,   242,   243,   243,   243,   243,
-   243,   243,   244,   244,   244,   245,   245,   246,   246,   247,
-   247,   248,   248,   249,   249,   250,   250,   251,   251,   252,
-   253,   253,   253,   254,   254,   255,   256
+   222,   222,   222,   222,   222,   222,   222,   224,   223,   225,
+   223,   226,   226,   227,   227,   227,   228,   228,   228,   228,
+   228,   228,   229,   229,   230,   231,   231,   232,   232,   233,
+   233,   233,   233,   233,   233,   234,   234,   235,   235,   235,
+   235,   236,   237,   238,   238,   238,   238,   238,   239,   240,
+   241,   241,   241,   241,   242,   242,   242,   242,   243,   243,
+   243,   243,   244,   244,   244,   245,   245,   245,   245,   246,
+   246,   246,   246,   246,   246,   247,   247,   247,   248,   248,
+   249,   249,   250,   250,   251,   251,   252,   252,   253,   253,
+   254,   254,   255,   256,   256,   256,   257,   257,   258,   259
 };
 
 static const short yyr2[] = {     0,
@@ -566,16 +570,16 @@ static const short yyr2[] = {     0,
      2,     3,     2,     3,     2,     3,     3,     5,     5,     1,
      3,     3,     4,     1,     2,     5,     2,     1,     1,     1,
      1,     3,     1,     1,     1,     1,     3,     3,     3,     3,
-     5,     4,     6,     5,     4,     5,     5,     6,     3,     3,
-     1,     3,     3,     3,     3,     4,     4,     4,     4,     1,
-     2,     3,     2,     3,     3,     3,     3,     4,     5,     6,
-     5,     6,     4,     4,     1,     1,     1,     1,     2,     2,
-     1,     1,     2,     2,     1,     2,     2,     1,     2,     2,
-     1,     5,     4,     4,     5,     1,     3,     3,     3,     1,
-     3,     3,     1,     3,     3,     3,     1,     3,     3,     3,
-     3,     3,     1,     3,     3,     1,     3,     1,     3,     1,
-     3,     1,     3,     1,     3,     1,     5,     1,     1,     3,
-     1,     1,     1,     1,     1,     1,     1
+     5,     4,     1,     4,     5,     5,     6,     0,     6,     0,
+     7,     3,     3,     1,     3,     3,     3,     3,     4,     4,
+     4,     4,     1,     2,     3,     2,     3,     3,     3,     3,
+     4,     5,     6,     5,     6,     4,     4,     1,     1,     1,
+     1,     2,     2,     1,     1,     2,     2,     1,     2,     2,
+     1,     2,     2,     1,     5,     4,     4,     5,     1,     3,
+     3,     3,     1,     3,     3,     1,     3,     3,     3,     1,
+     3,     3,     3,     3,     3,     1,     3,     3,     1,     3,
+     1,     3,     1,     3,     1,     3,     1,     3,     1,     5,
+     1,     1,     3,     1,     1,     1,     1,     1,     1,     1
 };
 
 static const short yydefact[] = {    26,
@@ -596,681 +600,674 @@ static const short yydefact[] = {    26,
     64,    92,    69,    65,    49,    85,     0,     0,     0,    88,
     94,    93,    87,    76,    73,     0,     0,     0,     0,     0,
      0,     0,   241,     0,     0,     0,     0,     6,     5,     2,
-     3,     4,     7,   240,     0,   286,    75,    79,   285,   238,
-   243,     0,   239,   244,   245,   246,   298,   287,   288,   306,
-   291,   292,   295,   301,   310,   313,   317,   323,   326,   328,
-   330,   332,   334,   336,   338,   346,   339,     0,    78,    77,
-    84,    71,    83,    46,     0,     0,   206,     0,     0,     0,
-     0,     0,     0,     0,     0,   144,   176,     0,     8,   286,
-    23,     0,   150,   165,     0,   146,   148,     0,   149,   154,
-   166,     0,   155,   167,     0,   156,   157,   168,     0,   158,
-     0,   169,   159,   214,     0,   170,   171,   172,   174,   173,
-     0,   175,   243,   245,     0,   184,   185,   182,   183,   181,
-     0,    92,    59,    61,    98,    80,    96,    99,     0,    90,
-     0,    86,     0,     0,   286,   244,   246,   293,   294,   297,
-   296,     0,     0,     0,    16,     0,   299,   300,     0,   286,
-     0,   138,     0,   142,     0,     0,     0,     0,     0,     0,
-     0,     0,   290,   289,     0,     0,     0,     0,     0,     0,
+     3,     4,     7,   240,     0,   289,    75,    79,   288,   238,
+   243,   253,     0,   239,   244,   245,   246,   301,   290,   291,
+   309,   294,   295,   298,   304,   313,   316,   320,   326,   329,
+   331,   333,   335,   337,   339,   341,   349,   342,     0,    78,
+    77,    84,    71,    83,    46,     0,     0,   206,     0,     0,
+     0,     0,     0,     0,     0,     0,   144,   176,     0,     8,
+   289,    23,     0,   150,   165,     0,   146,   148,     0,   149,
+   154,   166,     0,   155,   167,     0,   156,   157,   168,     0,
+   158,     0,   169,   159,   214,     0,   170,   171,   172,   174,
+   173,     0,   175,   243,   245,     0,   184,   185,   182,   183,
+   181,     0,    92,    59,    61,    98,    80,    96,    99,     0,
+    90,     0,    86,     0,     0,   289,   244,   246,   296,   297,
+   300,   299,     0,     0,     0,    16,     0,   302,   303,     0,
+   289,     0,   138,     0,   142,     0,     0,     0,     0,     0,
+     0,     0,     0,   293,   292,     0,     0,     0,     0,     0,
      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,   344,   345,     0,     0,     0,
-   221,     0,   225,     0,     0,     0,     0,   212,   223,     0,
-     0,   152,     0,   177,     0,   145,   147,   151,   230,   178,
-   180,   204,     0,     0,   216,   219,   213,   215,     0,     0,
-   106,     0,     0,    97,   100,     0,   102,    91,    89,    95,
-   249,   276,     0,   264,   270,     0,   265,     0,     0,     0,
-     0,     0,     0,     0,   242,   140,   139,     0,   248,   277,
-     0,   261,     0,   247,   259,   250,   260,   275,     0,     0,
-   307,   308,   309,   311,   312,   314,   315,   316,   319,   321,
-   318,   320,     0,   322,   324,   325,   327,   329,   331,   333,
-   335,     0,   340,     0,   227,   222,   226,     0,     0,     0,
-     0,   231,   234,   232,   224,   242,   153,     0,     0,   217,
-     0,     0,   107,   103,   117,   241,   108,   286,     0,     0,
-     0,   104,     0,   273,     0,   271,   266,     0,   269,   267,
-   268,   252,     0,   303,     0,     0,   304,   141,   143,   278,
-     0,   283,     0,   284,   255,     0,     0,     0,   203,     0,
-     0,   237,   235,   233,     0,   220,     0,   218,   217,     0,
-   105,     0,   109,     0,     0,   110,   281,     0,   272,   274,
-   254,   251,   302,   305,   263,   262,   279,     0,   256,   257,
-   337,     0,   188,     0,   154,     0,   161,   162,     0,   163,
-   164,     0,     0,   191,     0,     0,     0,     0,   229,   228,
-     0,   111,     0,     0,   282,   253,   280,   258,     0,     0,
-   179,   205,     0,     0,     0,   192,     0,   196,     0,   199,
-     0,     0,   209,     0,     0,   112,     0,     0,   189,   217,
-     0,   202,   347,     0,   194,   197,     0,   193,   198,   200,
-   236,   207,   208,     0,     0,   113,     0,     0,   217,   201,
-   195,   115,     0,     0,     0,     0,   114,     0,   211,     0,
-   190,   210,     0,     0,     0
+     0,     0,     0,     0,     0,     0,   347,   348,     0,     0,
+     0,   221,     0,   225,     0,     0,     0,     0,   212,   223,
+     0,     0,   152,     0,   177,     0,   145,   147,   151,   230,
+   178,   180,   204,     0,     0,   216,   219,   213,   215,     0,
+     0,   106,     0,     0,    97,   100,     0,   102,    91,    89,
+    95,   249,   279,     0,   267,   273,     0,   268,     0,     0,
+     0,     0,     0,     0,     0,   242,   140,   139,     0,   248,
+   280,     0,   264,     0,   247,   262,   250,   263,   278,     0,
+     0,   310,   311,   312,   314,   315,   317,   318,   319,   322,
+   324,   321,   323,     0,   325,   327,   328,   330,   332,   334,
+   336,   338,     0,   343,     0,   227,   222,   226,     0,     0,
+     0,     0,   231,   234,   232,   224,   242,   153,     0,     0,
+   217,     0,     0,   107,   103,   117,   241,   108,   289,     0,
+     0,     0,   104,     0,   276,     0,   274,   269,     0,   272,
+   270,   271,   252,     0,   306,     0,     0,   307,   141,   143,
+   281,     0,   286,     0,   287,   254,     0,     0,     0,   203,
+     0,     0,   237,   235,   233,     0,   220,     0,   218,   217,
+     0,   105,     0,   109,     0,     0,   110,   284,     0,   275,
+   277,     0,   251,   305,   308,   266,   265,   282,     0,   255,
+   256,   340,     0,   188,     0,   154,     0,   161,   162,     0,
+   163,   164,     0,     0,   191,     0,     0,     0,     0,   229,
+   228,     0,   111,     0,     0,   285,   259,     0,   283,   257,
+     0,     0,   179,   205,     0,     0,     0,   192,     0,   196,
+     0,   199,     0,     0,   209,     0,     0,   112,     0,   261,
+     0,   189,   217,     0,   202,   350,     0,   194,   197,     0,
+   193,   198,   200,   236,   207,   208,     0,     0,   113,     0,
+     0,   217,   201,   195,   115,     0,     0,     0,     0,   114,
+     0,   211,     0,   190,   210,     0,     0,     0
 };
 
-static const short yydefgoto[] = {   603,
-   174,   228,   175,    70,    71,    56,    49,    72,   176,    20,
+static const short yydefgoto[] = {   606,
+   174,   229,   175,    70,    71,    56,    49,    72,   176,    20,
     21,    22,     7,     8,     9,    10,    11,    12,    13,    14,
-   232,   233,   110,    87,    40,    58,    86,   108,   133,   134,
+   233,   234,   110,    87,    40,    58,    86,   108,   133,   134,
    135,    76,    94,    95,    96,   177,   137,    77,    92,   149,
-   150,   114,   152,   276,   139,   140,   141,   142,   377,   459,
-   460,    17,    37,    59,    54,    89,    38,    52,    79,    80,
-    81,    82,   178,   305,   234,   579,   236,   237,   238,   239,
-   524,   240,   241,   242,   243,   527,   244,   245,   246,   247,
-   528,   248,   534,   557,   558,   559,   560,   249,   250,   530,
-   251,   252,   253,   531,   254,   255,   367,   497,   498,   256,
-   257,   258,   259,   260,   261,   262,   442,   443,   444,   179,
-   180,   181,   182,   401,   183,   384,   385,   386,   184,   185,
-   186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
-   196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
-   206,   207,   208,   338,   402,   574
+   150,   114,   152,   277,   139,   140,   141,   142,   378,   460,
+   461,    17,    37,    59,    54,    89,    38,    52,    79,    80,
+    81,    82,   178,   306,   235,   582,   237,   238,   239,   240,
+   525,   241,   242,   243,   244,   528,   245,   246,   247,   248,
+   529,   249,   535,   559,   560,   561,   562,   250,   251,   531,
+   252,   253,   254,   532,   255,   256,   368,   498,   499,   257,
+   258,   259,   260,   261,   262,   263,   443,   444,   445,   179,
+   180,   181,   182,   512,   548,   183,   402,   184,   385,   386,
+   387,   185,   186,   187,   188,   189,   190,   191,   192,   193,
+   194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
+   204,   205,   206,   207,   208,   209,   339,   403,   577
 };
 
-static const short yypact[] = {   206,
--32768,   -59,   -59,   -59,   -59,-32768,-32768,    84,   -10,    84,
--32768,-32768,-32768,-32768,   149,-32768,-32768,-32768,   113,-32768,
--32768,-32768,   -27,    16,   155,   -10,-32768,-32768,    84,   -10,
--32768,   -59,   -59,-32768,     6,   -59,   -23,   -13,   -59,    44,
--32768,   -59,   -10,   -27,    16,    28,-32768,-32768,-32768,    55,
-   751,-32768,   -59,   -23,-32768,-32768,   -59,-32768,   -23,   -13,
-    44,-32768,-32768,   -59,-32768,-32768,-32768,   -59,    94,-32768,
--32768,   127,   179,   834,-32768,-32768,    66,-32768,   822,-32768,
--32768,-32768,-32768,-32768,-32768,    81,   134,-32768,   -23,-32768,
-   154,   -35,   154,   290,-32768,    27,   -35,   166,   177,   187,
-   -59,   -59,-32768,-32768,-32768,   -59,   485,-32768,-32768,   134,
-   207,   -59,   225,-32768,-32768,   -59,  1549,   238,-32768,-32768,
--32768,-32768,   -35,   353,   -35,-32768,   271,  2494,-32768,   293,
-   834,-32768,   579,-32768,-32768,-32768,-32768,   213,-32768,   286,
--32768,   374,-32768,-32768,-32768,-32768,   -59,    68,    21,-32768,
--32768,   336,-32768,-32768,-32768,  2296,  2296,  2296,  2296,   342,
-   363,   294,-32768,  2296,  2296,  2296,  1419,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,   366,   338,-32768,-32768,   368,   381,
--32768,   -59,-32768,   204,-32768,   419,   474,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,   443,   518,   505,   310,   508,   472,
-   479,   481,   482,     4,-32768,-32768,-32768,   436,-32768,-32768,
--32768,-32768,-32768,   405,   407,  2296,-32768,   102,  1600,   412,
-   414,   286,   440,   121,  2296,-32768,-32768,   -59,   224,   354,
-   450,   568,-32768,-32768,  2560,-32768,-32768,   456,-32768,-32768,
--32768,  2956,-32768,-32768,   458,-32768,-32768,-32768,  2956,-32768,
-  2956,-32768,-32768,  3088,   465,-32768,-32768,-32768,-32768,-32768,
-   475,-32768,   215,   284,   474,   496,   517,-32768,-32768,-32768,
-   283,   374,-32768,-32768,-32768,-32768,   467,   476,   477,   480,
-   -59,-32768,   173,   -59,   148,-32768,-32768,-32768,-32768,-32768,
--32768,   511,   -59,   486,   486,   493,-32768,-32768,   171,   369,
-   494,-32768,   483,-32768,   226,   522,  1665,  2296,     9,   100,
-  2296,   497,-32768,-32768,  2296,  2296,  2296,  2296,  2296,  2296,
-  2296,  2296,  2296,  2296,  2296,  2296,   294,  2296,  2296,  2296,
-  2296,  2296,  2296,  2296,  2296,-32768,-32768,  2296,  2296,   492,
--32768,   495,-32768,   500,  2296,  2296,   287,-32768,-32768,   503,
-   499,   504,  1716,-32768,   -59,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,   530,    68,-32768,-32768,-32768,   509,  1781,  2296,
--32768,   200,   477,-32768,-32768,  2626,   506,   480,-32768,-32768,
--32768,   515,  1832,   486,-32768,   362,   486,   362,  1897,  2296,
-   512,    52,  1832,   125,  3154,-32768,-32768,  1484,-32768,-32768,
-   203,-32768,   513,-32768,-32768,-32768,-32768,   520,   519,  1948,
--32768,-32768,-32768,   443,   443,   518,   518,   518,   505,   505,
-   505,   505,    94,-32768,   310,   310,   508,   472,   479,   481,
-   482,   527,-32768,   526,-32768,-32768,-32768,   528,   532,   531,
-   286,   287,-32768,-32768,-32768,-32768,   504,   534,  3113,  3113,
-   535,   536,-32768,   540,   363,   538,-32768,   411,  2692,   548,
-  2758,-32768,  2013,-32768,   523,-32768,   546,   547,-32768,   546,
--32768,   134,   245,-32768,  2296,  3154,-32768,-32768,-32768,-32768,
-  1368,-32768,  2064,-32768,   134,   260,  2296,  3022,-32768,   552,
-   173,-32768,-32768,-32768,  2296,-32768,   554,   509,  3113,    12,
--32768,   352,-32768,  2824,  2129,-32768,-32768,   270,-32768,-32768,
--32768,   134,-32768,-32768,-32768,-32768,-32768,   288,-32768,   134,
--32768,   558,-32768,   596,   600,  3022,-32768,-32768,  3022,-32768,
--32768,   560,    13,-32768,   566,   572,  2956,   573,-32768,-32768,
-   569,-32768,   574,   291,-32768,-32768,-32768,-32768,  2296,  2956,
--32768,-32768,  2180,   584,  2296,-32768,    20,-32768,  2362,-32768,
-   286,   578,-32768,  2956,  2245,-32768,   582,   589,-32768,  3113,
-   585,-32768,-32768,   602,-32768,-32768,  2428,-32768,  2890,-32768,
--32768,-32768,-32768,   593,   326,-32768,  3022,   599,  3113,-32768,
--32768,-32768,   597,   639,  3022,   604,-32768,  3022,-32768,  3022,
--32768,-32768,   701,   702,-32768
+static const short yypact[] = {   144,
+-32768,   -51,   -51,   -51,   -51,-32768,-32768,   157,    23,   157,
+-32768,-32768,-32768,-32768,    65,-32768,-32768,-32768,   198,-32768,
+-32768,-32768,    92,   126,   304,    23,-32768,-32768,   157,    23,
+-32768,   -51,   -51,-32768,    15,   -51,   -55,   -20,   -51,   115,
+-32768,   -51,    23,    92,   126,    97,-32768,-32768,-32768,   122,
+   579,-32768,   -51,   -55,-32768,-32768,   -51,-32768,   -55,   -20,
+   115,-32768,-32768,   -51,-32768,-32768,-32768,   -51,   142,-32768,
+-32768,   147,   189,   715,-32768,-32768,   175,-32768,   676,-32768,
+-32768,-32768,-32768,-32768,-32768,   151,   211,-32768,   -55,-32768,
+   192,   -47,   192,   104,-32768,   -64,   -47,   267,   286,   295,
+   -51,   -51,-32768,-32768,-32768,   -51,   378,-32768,-32768,   211,
+   112,   -51,   299,-32768,-32768,   -51,  1631,   325,-32768,-32768,
+-32768,-32768,   -47,   132,   -47,-32768,   216,  2576,-32768,   269,
+   715,-32768,   469,-32768,-32768,-32768,-32768,   223,-32768,   341,
+-32768,   387,-32768,-32768,-32768,-32768,   -51,   385,    37,-32768,
+-32768,   338,-32768,-32768,-32768,  2378,  2378,  2378,  2378,   350,
+   354,    29,-32768,  2378,  2378,  2378,  1499,-32768,-32768,-32768,
+-32768,-32768,-32768,-32768,   357,   557,-32768,-32768,   360,   345,
+-32768,-32768,   -51,-32768,   323,-32768,   355,   430,-32768,-32768,
+-32768,-32768,-32768,-32768,-32768,   314,   479,   321,   150,   473,
+   454,   456,   459,   464,     1,-32768,-32768,-32768,   404,-32768,
+-32768,-32768,-32768,-32768,   413,   417,  2378,-32768,    41,  1682,
+   419,   425,   341,   433,    91,  2378,-32768,-32768,   -51,   260,
+   475,   443,   399,-32768,-32768,  2642,-32768,-32768,   441,-32768,
+-32768,-32768,  3038,-32768,-32768,   447,-32768,-32768,-32768,  3038,
+-32768,  3038,-32768,-32768,  3170,   448,-32768,-32768,-32768,-32768,
+-32768,   440,-32768,   121,   277,   430,   458,   492,-32768,-32768,
+-32768,   231,   387,-32768,-32768,-32768,-32768,   451,   453,   462,
+   463,   -51,-32768,   406,   -51,   191,-32768,-32768,-32768,-32768,
+-32768,-32768,   486,   -51,   472,   472,   466,-32768,-32768,   -12,
+   600,   477,-32768,   478,-32768,   291,   506,  1747,  2378,   287,
+   100,  2378,   490,-32768,-32768,  2378,  2378,  2378,  2378,  2378,
+  2378,  2378,  2378,  2378,  2378,  2378,  2378,    29,  2378,  2378,
+  2378,  2378,  2378,  2378,  2378,  2378,-32768,-32768,  2378,  2378,
+   502,-32768,   505,-32768,   508,  2378,  2378,   332,-32768,-32768,
+   510,   491,   488,  1798,-32768,   -51,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,   523,   385,-32768,-32768,-32768,   511,  1863,
+  2378,-32768,    66,   462,-32768,-32768,  2708,   516,   463,-32768,
+-32768,-32768,   512,  1914,   472,-32768,   329,   472,   329,  1979,
+  2378,   519,   -79,  1914,   172,  3236,-32768,-32768,  1566,-32768,
+-32768,    93,-32768,   520,-32768,-32768,-32768,-32768,   517,   526,
+  2030,-32768,-32768,-32768,   314,   314,   479,   479,   479,   321,
+   321,   321,   321,   142,-32768,   150,   150,   473,   454,   456,
+   459,   464,   539,-32768,   534,-32768,-32768,-32768,   536,   537,
+   540,   341,   332,-32768,-32768,-32768,-32768,   488,   542,  3195,
+  3195,   533,   543,-32768,   535,   354,   549,-32768,   489,  2774,
+   550,  2840,-32768,  2095,-32768,   538,-32768,   547,   553,-32768,
+   547,-32768,   552,   160,-32768,  2378,  3236,-32768,-32768,-32768,
+-32768,  1429,-32768,  2146,-32768,   211,   164,  2378,  3104,-32768,
+   558,   406,-32768,-32768,-32768,  2378,-32768,   561,   511,  3195,
+    10,-32768,   238,-32768,  2906,  2211,-32768,-32768,   183,-32768,
+-32768,   211,   564,-32768,-32768,-32768,-32768,-32768,   204,-32768,
+   211,-32768,   563,-32768,   604,   607,  3104,-32768,-32768,  3104,
+-32768,-32768,   568,    -4,-32768,   574,   577,  3038,   578,-32768,
+-32768,   580,-32768,   581,   264,-32768,-32768,   211,-32768,-32768,
+  2378,  3038,-32768,-32768,  2262,   588,  2378,-32768,    56,-32768,
+  2444,-32768,   341,   582,-32768,  3038,  2327,-32768,   584,-32768,
+   591,-32768,  3195,   589,-32768,-32768,   590,-32768,-32768,  2510,
+-32768,  2972,-32768,-32768,-32768,-32768,   595,   275,-32768,  3104,
+   593,  3195,-32768,-32768,-32768,   597,   642,  3104,   605,-32768,
+  3104,-32768,  3104,-32768,-32768,   700,   702,-32768
 };
 
 static const short yypgoto[] = {-32768,
--32768,    -1,   209,   376,   -22,  -106,   -20,-32768,    78,   -79,
--32768,    -3,-32768,   694,    30,-32768,   126,-32768,-32768,   329,
-    15,   831,-32768,-32768,   660,   645,-32768,   -98,-32768,   577,
--32768,   -87,   -92,   591,  -138,  -160,-32768,   -65,    96,   445,
-  -278,   -54,-32768,-32768,-32768,-32768,-32768,   580,   341,-32768,
--32768,   -30,-32768,-32768,-32768,-32768,   673,    79,-32768,   640,
--32768,-32768,    35,-32768,   -85,  -124,  -233,-32768,   469,   -55,
-  -321,  -425,-32768,  -424,-32768,-32768,-32768,  -246,-32768,-32768,
--32768,-32768,-32768,-32768,   164,   168,  -436,  -418,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,  -296,-32768,  -496,   478,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,   289,   295,-32768,
--32768,    99,-32768,  -363,-32768,   431,    29,  -100,   973,   183,
-  1061,   230,   365,   473,     2,   557,   616,  -379,-32768,   212,
-   196,   163,   222,   398,   399,   403,   406,   402,-32768,   251,
-   408,   663,-32768,-32768,   862,-32768
+-32768,   -38,   134,   375,    47,  -107,     6,-32768,    17,   -82,
+-32768,    -3,-32768,   695,   219,-32768,   155,-32768,-32768,   233,
+   390,   401,-32768,-32768,   661,   646,-32768,  -100,-32768,   575,
+-32768,   -73,   -99,   594,  -139,  -163,-32768,   -26,    90,   437,
+  -282,   -71,-32768,-32768,-32768,-32768,-32768,   586,   337,-32768,
+-32768,   -13,-32768,-32768,-32768,-32768,   668,   -42,-32768,   636,
+-32768,-32768,    45,-32768,   -76,  -104,  -227,-32768,   467,    18,
+  -373,  -482,-32768,  -452,-32768,-32768,-32768,  -213,-32768,-32768,
+-32768,-32768,-32768,-32768,   162,   165,  -534,  -275,-32768,-32768,
+-32768,-32768,-32768,-32768,-32768,  -218,-32768,  -486,   468,-32768,
+-32768,-32768,-32768,-32768,-32768,-32768,-32768,   276,   285,-32768,
+-32768,   152,-32768,-32768,-32768,-32768,  -367,-32768,   435,    -7,
+  -224,  1091,   289,  1133,   370,   434,   541,   -23,   599,   685,
+  -375,-32768,   201,   270,   190,   213,   398,   409,   397,   402,
+   403,-32768,   245,   407,   779,-32768,-32768,  1002,-32768
 };
 
 
-#define	YYLAST		3263
+#define	YYLAST		3345
 
 
 static const short yytable[] = {    23,
-    24,   357,   538,   235,   379,   151,   304,   366,   280,   124,
-    46,   145,   539,    48,    15,   477,    55,   112,   334,   136,
-    78,   144,    15,    15,    15,   473,    18,   130,    44,    45,
-    48,    47,    83,     1,    48,    36,    85,    26,    47,    30,
-    15,   138,   119,    15,    15,   136,   486,   144,    78,    68,
-     3,   130,   277,   130,   278,   296,     4,    15,    43,   554,
-    91,   113,   525,   526,    93,    74,   554,   138,   211,   529,
-   213,    51,   102,   588,   555,   404,   143,    68,    39,    19,
-   405,   555,    25,    48,   406,   126,    53,   279,     6,    55,
-   335,    18,   596,    74,    18,    57,   514,    91,    93,   508,
-   525,   526,   143,   525,   526,    68,   128,   529,   556,   147,
-   529,    31,   154,    50,   282,   575,    50,    63,   117,   518,
-   283,   131,   580,   118,   231,   148,    62,     1,    73,   102,
-    50,    68,    84,    27,    50,   352,   347,    88,     2,   295,
-   580,   544,   378,   154,     3,   475,   281,   131,   468,    65,
-     4,    73,    66,    18,    27,    42,    73,   288,   289,   290,
-   291,   525,   526,    97,   103,   297,   298,   109,   529,   525,
-   526,   407,   525,   526,   525,   526,   529,   380,   312,   529,
-   106,   529,     6,    50,    73,    18,   360,    18,    73,    50,
-    98,   532,    31,   362,   388,   363,   123,   125,   392,   394,
-   341,   585,   496,   366,   551,   230,    18,   552,    73,    32,
-    73,    34,   535,    35,   342,    33,     1,   373,   476,   349,
-   350,   468,    63,    99,   154,    73,   263,   357,   107,   532,
-   355,   231,   532,   285,   285,   285,   285,   479,   231,    50,
-   307,   285,   285,   300,   308,   231,   111,   231,   309,     1,
-     1,   461,   366,    41,    65,    42,    63,    66,    18,    69,
-     2,    55,   447,   120,   390,   594,     3,   391,   364,   147,
-   357,   306,     4,   599,   121,   100,   601,   154,   602,    42,
-     5,   147,    69,   467,   122,   148,   470,    69,    65,   382,
-   532,    66,    18,   453,  -342,  -342,   480,   148,   532,   283,
-   146,   532,   481,   532,     6,    47,   408,   128,  -187,    73,
-   264,   275,   230,  -187,  -187,    69,   411,   412,   413,    69,
-    98,   397,   153,   366,   306,   398,     1,   323,   324,   325,
-   326,   230,    63,   263,   504,   210,   229,    28,   512,    69,
-   263,    69,   366,    63,   481,   357,   440,   263,    73,   263,
-   441,   154,   263,   520,    28,   492,    69,   265,    28,   481,
-    73,    50,   355,   545,    65,  -101,   327,    66,    18,   481,
-   294,    28,   231,   511,   299,    65,   371,  -186,    66,    18,
-   128,   547,  -186,  -186,   567,   271,   519,   481,   115,   116,
-   481,   474,   285,   285,   285,   285,   285,   285,   285,   285,
-   285,   285,   285,   285,    73,   285,   285,   285,   285,   285,
-   285,   285,   466,   546,   540,   466,   541,   264,   404,   593,
-   469,   548,   471,   405,   264,   481,   112,   406,  -341,  -341,
-   307,   264,   523,   264,   308,   284,   264,    18,   309,   -15,
-    69,    73,   292,   229,  -341,  -341,   307,   315,   316,   317,
-   353,   212,   116,   458,   309,   231,   167,   231,   468,  -341,
-  -341,   307,   229,   293,   265,   393,   306,   285,   310,   309,
-   360,   265,   285,   362,   263,   581,   513,   311,   265,    69,
-   265,   563,   330,   265,   231,   419,   420,   421,   422,   147,
-   331,    69,   266,   332,   569,   333,   -15,  -230,    47,   339,
-   231,  -341,  -341,   307,   345,   148,   346,   353,   583,  -343,
-  -343,   502,   320,   321,   322,   416,   417,   418,   313,   314,
-   318,   319,   231,   328,   329,   231,   336,   337,   127,   414,
-   415,   523,   348,   231,    63,   423,   230,   354,   230,   563,
-  -287,  -287,   569,    64,   583,     3,   231,   263,   263,   425,
-   426,     4,   285,   285,   358,   231,   361,   263,   264,   263,
-   231,  -288,  -288,   369,   285,   374,    65,   370,    73,    66,
-    18,   376,    69,   231,   375,   231,   118,   381,   396,   128,
-   129,   230,   383,   231,   229,   389,   263,   395,   399,   410,
-   435,   231,   446,   436,   231,   448,   231,   263,   437,   266,
-   267,   445,   263,   116,   462,   265,   266,   463,   449,   464,
-   482,    31,   483,   266,   487,   266,   484,    63,   266,   488,
-   509,   489,   127,   491,   263,   490,   495,   263,    63,   500,
-  -116,   264,   264,   499,    33,   263,   230,    64,   501,     3,
-   505,   264,   468,   264,   510,     4,   533,   537,   263,    65,
-   549,   550,    66,    18,   230,  -160,   230,   263,   553,   561,
-    65,   565,   263,    66,    18,   562,   564,   229,   263,   229,
-   264,   572,   566,   128,   273,   263,   582,   263,   265,   265,
-   586,   264,   587,   589,   268,   263,   264,   263,   265,   590,
-   265,   592,   595,   263,   598,   597,   263,   600,   263,    69,
-   604,   605,   424,    29,    61,    90,   155,   267,   264,   274,
-   272,   264,   229,   454,   267,   372,    60,   265,   105,   264,
-   576,   267,   365,   267,   577,   387,   267,   427,   265,   428,
-   493,   368,   264,   265,   429,   431,   494,   521,   430,     0,
-   266,   264,     0,   269,     0,   433,   264,     0,     0,     0,
-     0,     0,   264,     0,     0,   265,     0,     0,   265,   264,
-     0,   264,     0,     0,     0,     0,   265,   229,     0,   264,
-     0,   264,     0,     0,     0,     0,     0,   264,     0,   265,
-   264,     0,   264,     0,     0,   229,     0,   229,   265,     0,
-   270,   268,     0,   265,     1,     0,     0,     0,   268,   265,
-    63,     0,     0,     0,     0,   268,   265,   268,   265,    64,
-   268,     3,     0,   266,   266,     0,   265,     4,   265,     0,
-     0,     0,     0,   266,   265,   266,     0,   265,     0,   265,
-    16,     0,    65,     0,     0,    66,    18,     0,    16,    16,
-    16,     0,     0,     0,     0,     0,    67,     0,   267,     0,
-   269,     0,   266,     0,     0,     0,    16,   269,     0,    16,
-    16,     0,     0,   266,   269,     1,   269,     0,   266,   269,
-     0,    63,     0,    16,     0,     0,     0,    31,     0,     0,
-    64,    75,     3,    63,     0,     0,     0,     0,     4,     0,
-   266,     0,   101,   266,    32,     0,     0,   270,     0,     0,
-    33,   266,     0,    65,   270,     0,    66,    18,     0,    75,
-     0,   270,     0,   270,   266,    65,   270,   104,    66,    18,
-     0,   267,   267,   266,     0,     0,     0,     0,   266,     0,
-     0,   267,   268,   267,   266,     0,     0,   132,     0,     0,
-     0,   266,     0,   266,     0,     0,     0,     0,     0,     0,
-     0,   266,     0,   266,     0,     0,     0,     0,     0,   266,
-   267,     0,   266,   132,   266,     0,     0,     0,     0,     0,
-     0,   267,     0,     0,     0,     0,   267,     0,   209,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,   269,     0,     0,     0,     0,     0,     0,   267,     0,
-     0,   267,     0,     0,     0,   268,   268,     0,     0,   267,
-     0,     0,     0,     0,     0,   268,     0,   268,     0,     0,
-     0,     0,   267,     0,     0,     0,     0,   301,   209,     0,
-     0,   267,     0,     0,     0,     0,   267,     0,   270,     0,
-     0,     0,   267,     0,   268,     0,     0,     0,     0,   267,
-     0,   267,     0,     0,     0,   268,     0,     0,     0,   267,
-   268,   267,     0,     0,   269,   269,     0,   267,     0,     0,
-   267,     0,   267,     0,   269,     0,   269,   340,     0,     0,
-   344,     0,   268,     0,     0,   268,   351,     0,     0,     0,
-     0,     0,     0,   268,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,   269,     0,     0,   268,     0,     0,     0,
-     0,   270,   270,     0,   269,   268,     0,     0,     0,   269,
-   268,   270,     0,   270,     0,     0,   268,     0,   286,   286,
-   286,   286,     0,   268,     0,   268,   286,   286,     0,     0,
-     0,   269,     0,   268,   269,   268,     0,     0,     0,     0,
-   270,   268,   269,     0,   268,     0,   268,     0,     0,     0,
-     0,   270,     0,     0,     0,   269,   270,     0,     0,   403,
-     0,     0,   409,     0,   269,     0,     0,     0,     0,   269,
-     0,     0,     0,     0,     0,   269,     0,     0,   270,     0,
-     0,   270,   269,     0,   269,     0,   432,     0,     0,   270,
-   434,     0,   269,     0,   269,     0,   438,   439,     0,     0,
-   269,     0,   270,   269,   403,   269,   287,   287,   287,   287,
-     0,   270,     0,     0,   287,   287,   270,     0,     0,     0,
-   451,   452,   270,     0,     0,     0,     0,     0,     0,   270,
-     0,   270,     0,     0,   465,     0,     0,     0,     0,   270,
-     0,   270,     0,     0,   403,     0,     0,   270,     0,   209,
-   270,     0,   270,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,   286,   286,   286,
-   286,   286,   286,   286,   286,   286,   286,   286,   286,     0,
-   286,   286,   286,   286,   286,   286,   286,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   516,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,   536,     0,     0,     0,
-     0,     0,   286,     0,     0,     0,     0,   286,   515,     0,
-   156,   157,     0,     0,     0,   287,   287,   287,   287,   287,
-   287,   287,   287,   287,   287,   287,   287,     0,   287,   287,
-   287,   287,   287,   287,   287,     0,     0,     0,     0,     0,
+    24,   380,   124,   305,   151,   112,   526,   281,   358,   145,
+   540,    84,    68,   539,   476,   335,    88,   469,    19,    46,
+   478,    25,   474,   236,   130,   119,   583,   117,    44,    45,
+   144,    47,   118,   136,    18,   102,   527,    78,    47,    51,
+    68,   367,   556,   487,   526,   583,   109,   526,   130,   113,
+   130,   212,    50,   214,   297,    50,   144,   557,    83,   136,
+    91,   278,    85,   279,    93,    78,     1,    73,    68,    50,
+   280,   389,   147,    50,   527,   393,   395,   527,    63,    53,
+   138,   391,    48,     3,   392,    55,   591,   336,   307,     4,
+    73,   558,   102,   143,    68,    73,   509,    91,    93,    48,
+    18,   515,   556,    48,   128,   599,   138,   526,    31,   282,
+    65,   126,   154,    66,    18,   526,   519,   557,   526,   143,
+   526,     6,    50,    73,   232,    32,    18,    73,    50,   353,
+   283,    33,   289,   290,   291,   292,   284,   527,   545,   342,
+   298,   299,   379,   154,   231,   527,   348,    73,   527,    73,
+   527,   578,    48,   553,    36,     1,   554,    97,    55,   454,
+   468,    63,    27,   471,    73,   284,    57,   324,   325,   326,
+   327,   408,   286,   286,   286,   286,    18,   381,    50,   313,
+   286,   286,   301,    27,    69,    18,   481,     1,    39,   350,
+   123,   125,   482,    65,   356,    62,    66,    18,     2,   588,
+     1,   374,   115,   116,     3,   146,   328,    69,   296,   536,
+     4,     2,    69,   530,  -187,   343,   597,     3,     5,  -187,
+  -187,   351,    42,     4,   602,   154,    26,   604,    30,   605,
+   213,   116,   232,   147,   358,   480,   497,   367,    98,   232,
+    69,    28,     6,    99,    69,   147,   232,    43,   232,    73,
+   106,   530,   231,   513,   530,     6,   448,   521,    28,   482,
+   361,   230,    28,   482,    69,   477,    69,   363,   469,   364,
+   533,   231,   462,   103,     1,    28,   546,   358,   154,   264,
+    63,    69,   482,   308,   111,   100,   367,   309,    73,    42,
+   383,   310,   412,   413,   414,   295,    34,   549,    35,   300,
+    73,    50,   542,   482,   405,   107,    47,   409,   533,   406,
+  -101,   533,    65,   407,   530,    66,    18,   128,   316,   317,
+   318,   276,   530,    18,   372,   530,   356,   530,   321,   322,
+   323,    55,   286,   286,   286,   286,   286,   286,   286,   286,
+   286,   286,   286,   286,    73,   286,   286,   286,   286,   286,
+   286,   286,   154,   405,   358,   505,    98,   569,   406,   367,
+   307,   272,   407,   482,   120,   493,    69,   475,   596,   230,
+  -186,   533,    18,   232,   482,  -186,  -186,   467,   367,   533,
+   467,    73,   533,   121,   533,   520,   398,   264,   230,    15,
+   399,   441,   122,   459,   264,   442,   153,    15,    15,    15,
+    16,   264,    41,   264,    42,    69,   264,   286,    16,    16,
+    16,   547,   286,  -345,  -345,    15,   265,    69,    15,    15,
+   550,   127,   211,   167,   541,   469,    16,    63,    31,    16,
+    16,   470,    15,   472,    63,   128,    64,   285,     3,   112,
+    74,   312,    31,    16,     4,  -346,  -346,   570,    63,     1,
+   293,    75,   514,   147,   294,    63,   232,   307,   232,    65,
+   311,   424,    66,    18,   331,    33,    65,   332,    74,    66,
+    18,   333,   128,   129,   314,   315,   231,   334,   231,    75,
+    65,   319,   320,    66,    18,   232,   584,    65,   329,   330,
+    66,    18,   286,   286,   337,   338,   131,   266,    69,    47,
+   148,   232,  -290,  -290,   286,  -230,   524,   132,    73,   340,
+   230,   346,   127,   420,   421,   422,   423,   347,    63,   415,
+   416,   231,   131,   232,   265,   349,   232,    64,   264,     3,
+   355,   265,   371,   132,   232,     4,  -291,  -291,   265,   359,
+   265,   426,   427,   265,   361,   362,   370,   363,   232,   375,
+    65,   376,   382,    66,    18,   565,   377,   232,   390,   118,
+   -15,   267,   232,   128,   274,  -344,  -344,   308,   384,   572,
+   396,   354,   400,   397,   -15,   310,   232,   231,   232,  -344,
+  -344,   308,   411,   586,   447,   354,   232,   116,   449,   503,
+   417,   418,   419,   230,   232,   230,   231,   232,   231,   232,
+   436,   264,   264,   437,   464,   266,   438,   524,   446,   484,
+   450,   264,   266,   264,   463,   565,   465,   483,   572,   266,
+   586,   266,     1,   485,   266,    69,   488,   489,    63,   490,
+   491,   500,   492,   502,   496,   510,   501,    64,   230,     3,
+   264,  -116,   506,   469,   365,     4,  -258,  -344,  -344,   308,
+   511,   264,   534,   309,   538,   551,   264,   310,  -260,   552,
+    65,   148,  -160,    66,    18,   265,   555,   563,   268,   267,
+   564,   566,   567,   148,    67,   575,   267,   593,   264,   568,
+   585,   264,   589,   267,   590,   267,   598,   592,   267,   264,
+  -344,  -344,   308,   595,   230,   600,   394,   601,   603,   607,
+   310,   608,   425,   264,    29,    61,    90,   275,   373,   155,
+   455,    60,   264,   230,   105,   230,   273,   264,   494,     1,
+   579,   366,   369,   580,   264,    63,   269,   495,   428,   430,
+   388,   264,   522,   264,    64,   431,     3,   432,   265,   265,
+   429,   264,     4,   264,     0,   434,   266,     0,   265,   264,
+   265,     0,   264,     0,   264,     0,     0,    65,    31,     0,
+    66,    18,     0,     0,    63,     0,     0,     0,     0,     0,
+     0,   104,     0,   101,     0,    32,   268,   265,     0,     0,
+     0,    33,     0,   268,     0,     0,     0,     0,   265,     0,
+   268,     0,   268,   265,     0,   268,    65,     0,     0,    66,
+    18,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+   267,     0,   270,     0,     0,   265,     0,     0,   265,   266,
+   266,     0,     0,     0,     0,     0,   265,     0,     0,   266,
+     0,   266,     0,     0,   269,     0,     0,     0,     0,     0,
+   265,   269,     0,     0,     0,     0,     0,     0,   269,   265,
+   269,     0,     0,   269,   265,     0,     0,     0,   266,     0,
+     0,   265,     0,     0,     0,     0,     0,     0,   265,   266,
+   265,     0,     0,     0,   266,     0,     0,     0,   265,     0,
+   265,   148,     0,   267,   267,     0,   265,     0,     0,   265,
+     0,   265,     0,   267,     0,   267,   266,     0,     0,   266,
+     0,     0,     0,     0,     0,     0,   271,   266,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,   268,     0,     0,
+   270,   266,   267,     0,     0,     0,     0,   270,     0,     0,
+   266,     0,     0,   267,   270,   266,   270,     0,   267,   270,
+     0,     0,   266,     0,     0,     0,     0,     0,     0,   266,
+     0,   266,     0,     0,     0,     0,     0,     0,     0,   266,
+   267,   266,     0,   267,     0,     0,     0,   266,     0,     0,
+   266,   267,   266,     0,     0,   269,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,   267,     0,     0,     0,     0,
+   268,   268,     0,     0,   267,     0,     0,     0,     0,   267,
+   268,     0,   268,     0,     0,     0,   267,     0,     0,     0,
+     0,     0,     0,   267,   271,   267,     0,     0,     0,     0,
+     0,   271,     0,   267,     0,   267,     0,     0,   271,   268,
+   271,   267,     0,   271,   267,     0,   267,     0,     0,     0,
+   268,     0,     0,     0,     0,   268,     0,     0,   269,   269,
+     0,     0,     0,     0,     0,     0,     0,     0,   269,     0,
+   269,   270,     0,     0,     0,     0,     0,   268,     0,     0,
+   268,     0,     0,     0,     0,     0,     0,     0,   268,     0,
+     0,     0,     0,     0,     0,     0,     0,   269,     0,     0,
+     0,     0,   268,     0,     0,     0,     0,     0,   269,     0,
+     0,   268,     0,   269,     0,     0,   268,     0,     0,     0,
+     0,     0,     0,   268,     0,     0,     0,     0,   210,     0,
+   268,     0,   268,     0,     0,   269,     0,     0,   269,     0,
+   268,     0,   268,     0,   270,   270,   269,     0,   268,     0,
+     0,   268,     0,   268,   270,     0,   270,     0,     0,     0,
+   269,     0,     0,     0,     0,   271,     0,     0,     0,   269,
+     0,     0,     0,     0,   269,     0,     0,   302,   210,     0,
+     0,   269,     0,   270,     0,     0,     0,     0,   269,     0,
+   269,     0,     0,     0,   270,     0,     0,     0,   269,   270,
+   269,     0,     0,     0,     0,     0,   269,     0,     0,   269,
+     0,   269,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,   270,     0,     0,   270,     0,     0,     0,   341,     0,
+     0,   345,   270,     0,     0,     0,     0,   352,   271,   271,
+     0,     0,     0,     0,     0,     0,   270,     0,   271,     0,
+   271,     0,     0,     0,     0,   270,   287,   287,   287,   287,
+   270,     0,     0,     0,   287,   287,     0,   270,     0,     0,
+     0,     0,     0,     0,   270,     0,   270,   271,     0,     0,
+     0,     0,     0,     0,   270,     0,   270,     0,   271,     0,
+     0,     0,   270,   271,     0,   270,     0,   270,   288,   288,
+   288,   288,     0,     0,     0,     0,   288,   288,     0,     0,
+     0,     0,     0,     0,     0,   271,     0,     0,   271,     0,
+   404,     0,     0,   410,     0,     0,   271,     0,     0,     0,
      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-   568,     0,   158,   159,   571,     0,   573,    63,     0,     0,
-     0,   156,   157,     0,     0,     0,   160,     0,     0,     0,
-     0,     0,   161,     0,     0,     0,     0,     0,     0,   162,
-     0,     0,     0,   163,     0,     0,     0,   286,   286,    65,
-   287,     0,    66,    18,     0,   287,   164,   165,     0,   286,
-   166,     0,     0,   158,   159,     0,     0,     0,    63,   168,
-   169,   170,   171,     0,     0,   172,   173,   160,     0,     0,
-     0,     0,     0,   161,     0,     0,   156,   157,     0,     0,
-   162,     0,     0,     0,   163,     0,     0,     0,     0,     0,
+   271,     0,     0,     0,     0,     0,     0,   433,     0,   271,
+     0,   435,     0,     0,   271,     0,     0,   439,   440,     0,
+     0,   271,     0,     0,     0,   404,     0,     0,   271,     0,
+   271,     0,     0,     0,     0,     0,     0,     0,   271,     0,
+   271,   452,   453,     0,     0,     0,   271,     0,     0,   271,
+     0,   271,     0,     0,     0,   466,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,   404,     0,     0,     0,     0,
+   210,     0,     0,     0,     0,     0,   287,   287,   287,   287,
+   287,   287,   287,   287,   287,   287,   287,   287,     0,   287,
+   287,   287,   287,   287,   287,   287,     0,     0,     0,   516,
+     0,   156,   157,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,   288,   288,
+   288,   288,   288,   288,   288,   288,   288,   288,   288,   288,
+     0,   288,   288,   288,   288,   288,   288,   288,     0,     0,
+     0,     0,     0,   158,   159,     0,     0,     0,    63,     0,
+     0,   287,     0,   517,     0,     0,   287,   160,     0,     0,
+     0,     0,     0,   161,     0,     0,     0,   537,     0,     0,
+   162,   156,   157,     0,   163,     0,     0,     0,     0,     0,
     65,     0,     0,    66,    18,     0,     0,   164,   165,     0,
-     0,   166,     0,   167,   302,     0,     0,     0,   303,     0,
-   168,   169,   170,   171,     0,     0,   172,   173,   158,   159,
-     0,     0,     0,    63,     0,   287,   287,     0,     0,     0,
-     0,     0,   160,     0,     0,     0,     0,   287,   161,     0,
-     0,   156,   157,     0,     0,   162,     0,     0,     0,   163,
-     0,     0,     0,     0,     0,    65,     0,     0,    66,    18,
-     0,     0,   164,   165,     0,     0,   166,     0,   167,   478,
-     0,     0,     0,     0,     0,   168,   169,   170,   171,     0,
-     0,   172,   173,   158,   159,     0,     0,     0,    63,     0,
-     0,     0,   156,   157,     0,     0,     0,   160,     0,     0,
-     0,     0,     0,   161,     0,     0,     0,     0,     0,     0,
-   162,     0,     0,     0,   163,     0,     0,     0,     0,     0,
+     0,   166,     0,   288,     0,     0,     0,     0,   288,     0,
+   168,   169,   170,   171,     0,     0,   172,   173,     0,     0,
+     0,     0,     0,   158,   159,     0,     0,     0,    63,     0,
+     0,     0,   571,     0,     0,     0,   574,   160,   576,     0,
+     0,     0,     0,   161,     0,     0,   287,   287,   156,   157,
+   162,     0,     0,     0,   163,     0,     0,     0,   287,     0,
     65,     0,     0,    66,    18,     0,     0,   164,   165,     0,
-     0,   166,     0,   167,   158,   159,     0,     0,     0,    63,
-   168,   169,   170,   171,     0,     0,   172,   173,   160,     0,
-     0,     0,     0,     0,   161,     0,     0,   156,   157,     0,
-     0,   162,     0,     0,     0,   163,     0,     0,     0,     0,
-     0,    65,     0,     0,    66,    18,     0,     0,   164,   165,
-     0,     0,   166,     0,     0,     0,     0,     0,   343,     0,
-     0,   168,   169,   170,   171,     0,     0,   172,   173,   158,
-   159,     0,     0,     0,    63,     0,     0,     0,   156,   157,
-     0,     0,     0,   160,     0,     0,     0,     0,     0,   161,
-     0,     0,     0,     0,     0,     0,   162,     0,     0,     0,
-   163,     0,     0,     0,     0,     0,    65,     0,     0,    66,
-    18,     0,     0,   164,   165,     0,     0,   166,   400,     0,
-   158,   159,     0,     0,     0,    63,   168,   169,   170,   171,
-     0,     0,   172,   173,   160,     0,     0,     0,     0,     0,
+     0,   166,     0,   167,   303,     0,     0,     0,   304,     0,
+   168,   169,   170,   171,     0,     0,   172,   173,   288,   288,
+   158,   159,     0,     0,     0,    63,     0,     0,     0,     0,
+   288,     0,     0,     0,   160,     0,     0,     0,     0,     0,
    161,     0,     0,   156,   157,     0,     0,   162,     0,     0,
      0,   163,     0,     0,     0,     0,     0,    65,     0,     0,
     66,    18,     0,     0,   164,   165,     0,     0,   166,     0,
-     0,     0,     0,   122,     0,     0,     0,   168,   169,   170,
+   167,   479,     0,     0,     0,     0,     0,   168,   169,   170,
    171,     0,     0,   172,   173,   158,   159,     0,     0,     0,
     63,     0,     0,     0,   156,   157,     0,     0,     0,   160,
      0,     0,     0,     0,     0,   161,     0,     0,     0,     0,
      0,     0,   162,     0,     0,     0,   163,     0,     0,     0,
      0,     0,    65,     0,     0,    66,    18,     0,     0,   164,
-   165,     0,     0,   166,     0,     0,   158,   159,     0,   450,
+   165,     0,     0,   166,     0,   167,   158,   159,     0,     0,
      0,    63,   168,   169,   170,   171,     0,     0,   172,   173,
    160,     0,     0,     0,     0,     0,   161,     0,     0,   156,
    157,     0,     0,   162,     0,     0,     0,   163,     0,     0,
      0,     0,     0,    65,     0,     0,    66,    18,     0,     0,
-   164,   165,     0,     0,   166,     0,     0,     0,     0,   464,
-     0,     0,     0,   168,   169,   170,   171,     0,     0,   172,
+   164,   165,     0,     0,   166,     0,     0,     0,     0,     0,
+   344,     0,     0,   168,   169,   170,   171,     0,     0,   172,
    173,   158,   159,     0,     0,     0,    63,     0,     0,     0,
    156,   157,     0,     0,     0,   160,     0,     0,     0,     0,
      0,   161,     0,     0,     0,     0,     0,     0,   162,     0,
      0,     0,   163,     0,     0,     0,     0,     0,    65,     0,
      0,    66,    18,     0,     0,   164,   165,     0,     0,   166,
-   472,     0,   158,   159,     0,     0,     0,    63,   168,   169,
+   401,     0,   158,   159,     0,     0,     0,    63,   168,   169,
    170,   171,     0,     0,   172,   173,   160,     0,     0,     0,
      0,     0,   161,     0,     0,   156,   157,     0,     0,   162,
      0,     0,     0,   163,     0,     0,     0,     0,     0,    65,
      0,     0,    66,    18,     0,     0,   164,   165,     0,     0,
-   166,   485,     0,     0,     0,     0,     0,     0,     0,   168,
+   166,     0,     0,     0,     0,   122,     0,     0,     0,   168,
    169,   170,   171,     0,     0,   172,   173,   158,   159,     0,
      0,     0,    63,     0,     0,     0,   156,   157,     0,     0,
      0,   160,     0,     0,     0,     0,     0,   161,     0,     0,
      0,     0,     0,     0,   162,     0,     0,     0,   163,     0,
      0,     0,     0,     0,    65,     0,     0,    66,    18,     0,
-     0,   164,   165,     0,     0,   166,   507,     0,   158,   159,
-     0,     0,     0,    63,   168,   169,   170,   171,     0,     0,
+     0,   164,   165,     0,     0,   166,     0,     0,   158,   159,
+     0,   451,     0,    63,   168,   169,   170,   171,     0,     0,
    172,   173,   160,     0,     0,     0,     0,     0,   161,     0,
      0,   156,   157,     0,     0,   162,     0,     0,     0,   163,
      0,     0,     0,     0,     0,    65,     0,     0,    66,    18,
-     0,     0,   164,   165,     0,     0,   166,   517,     0,     0,
-     0,     0,     0,     0,     0,   168,   169,   170,   171,     0,
+     0,     0,   164,   165,     0,     0,   166,     0,     0,     0,
+     0,   465,     0,     0,     0,   168,   169,   170,   171,     0,
      0,   172,   173,   158,   159,     0,     0,     0,    63,     0,
      0,     0,   156,   157,     0,     0,     0,   160,     0,     0,
      0,     0,     0,   161,     0,     0,     0,     0,     0,     0,
    162,     0,     0,     0,   163,     0,     0,     0,     0,     0,
     65,     0,     0,    66,    18,     0,     0,   164,   165,     0,
-     0,   166,   543,     0,   158,   159,     0,     0,     0,    63,
+     0,   166,   473,     0,   158,   159,     0,     0,     0,    63,
    168,   169,   170,   171,     0,     0,   172,   173,   160,     0,
      0,     0,     0,     0,   161,     0,     0,   156,   157,     0,
      0,   162,     0,     0,     0,   163,     0,     0,     0,     0,
      0,    65,     0,     0,    66,    18,     0,     0,   164,   165,
-     0,     0,   166,     0,     0,     0,     0,     0,   570,     0,
+     0,     0,   166,   486,     0,     0,     0,     0,     0,     0,
      0,   168,   169,   170,   171,     0,     0,   172,   173,   158,
    159,     0,     0,     0,    63,     0,     0,     0,   156,   157,
      0,     0,     0,   160,     0,     0,     0,     0,     0,   161,
      0,     0,     0,     0,     0,     0,   162,     0,     0,     0,
    163,     0,     0,     0,     0,     0,    65,     0,     0,    66,
-    18,     0,     0,   164,   165,     0,     0,   166,   584,     0,
+    18,     0,     0,   164,   165,     0,     0,   166,   508,     0,
    158,   159,     0,     0,     0,    63,   168,   169,   170,   171,
      0,     0,   172,   173,   160,     0,     0,     0,     0,     0,
-   161,     0,     0,     0,     0,     0,     0,   162,     0,     0,
+   161,     0,     0,   156,   157,     0,     0,   162,     0,     0,
      0,   163,     0,     0,     0,     0,     0,    65,     0,     0,
-    66,    18,     0,     0,   164,   165,     0,     0,   166,     0,
+    66,    18,     0,     0,   164,   165,     0,     0,   166,   518,
      0,     0,     0,     0,     0,     0,     0,   168,   169,   170,
-   171,     0,     0,   172,   173,   214,   158,   159,   554,   215,
-   216,    63,   217,     0,     0,   218,     0,     0,     0,   219,
-   160,     0,     0,   555,     0,     0,   161,   220,     4,   221,
-     0,   222,   223,   162,   224,     0,     0,   163,     0,     0,
+   171,     0,     0,   172,   173,   158,   159,     0,     0,     0,
+    63,     0,     0,     0,   156,   157,     0,     0,     0,   160,
+     0,     0,     0,     0,     0,   161,     0,     0,     0,     0,
+     0,     0,   162,     0,     0,     0,   163,     0,     0,     0,
+     0,     0,    65,     0,     0,    66,    18,     0,     0,   164,
+   165,     0,     0,   166,   544,     0,   158,   159,     0,     0,
+     0,    63,   168,   169,   170,   171,     0,     0,   172,   173,
+   160,     0,     0,     0,     0,     0,   161,     0,     0,   156,
+   157,     0,     0,   162,     0,     0,     0,   163,     0,     0,
      0,     0,     0,    65,     0,     0,    66,    18,     0,     0,
-     0,     0,     0,     0,   225,     0,   128,   578,     0,     0,
-   227,     0,     0,   168,   169,   170,   171,     0,     0,   172,
-   173,   214,   158,   159,   554,   215,   216,    63,   217,     0,
-     0,   218,     0,     0,     0,   219,   160,     0,     0,   555,
-     0,     0,   161,   220,     4,   221,     0,   222,   223,   162,
-   224,     0,     0,   163,     0,     0,     0,     0,     0,    65,
-     0,     0,    66,    18,     0,     0,     0,     0,     0,     0,
-   225,     0,   128,   591,     0,     0,   227,     0,     0,   168,
-   169,   170,   171,     0,     0,   172,   173,   214,   158,   159,
-     0,   215,   216,    63,   217,     0,     0,   218,     0,     0,
-     0,   219,   160,     0,     0,     0,     0,     0,   161,   220,
-     4,   221,     0,   222,   223,   162,   224,     0,     0,   163,
+   164,   165,     0,     0,   166,     0,     0,     0,     0,     0,
+   573,     0,     0,   168,   169,   170,   171,     0,     0,   172,
+   173,   158,   159,     0,     0,     0,    63,     0,     0,     0,
+   156,   157,     0,     0,     0,   160,     0,     0,     0,     0,
+     0,   161,     0,     0,     0,     0,     0,     0,   162,     0,
+     0,     0,   163,     0,     0,     0,     0,     0,    65,     0,
+     0,    66,    18,     0,     0,   164,   165,     0,     0,   166,
+   587,     0,   158,   159,     0,     0,     0,    63,   168,   169,
+   170,   171,     0,     0,   172,   173,   160,     0,     0,     0,
+     0,     0,   161,     0,     0,     0,     0,     0,     0,   162,
+     0,     0,     0,   163,     0,     0,     0,     0,     0,    65,
+     0,     0,    66,    18,     0,     0,   164,   165,     0,     0,
+   166,     0,     0,     0,     0,     0,     0,     0,     0,   168,
+   169,   170,   171,     0,     0,   172,   173,   215,   158,   159,
+   556,   216,   217,    63,   218,     0,     0,   219,     0,     0,
+     0,   220,   160,     0,     0,   557,     0,     0,   161,   221,
+     4,   222,     0,   223,   224,   162,   225,     0,     0,   163,
      0,     0,     0,     0,     0,    65,     0,     0,    66,    18,
-     0,     0,     0,     0,     0,     0,   225,     0,   128,   226,
-     0,     0,   227,     0,     0,   168,   169,   170,   171,     0,
-     0,   172,   173,   214,   158,   159,     0,   215,   216,    63,
-   217,     0,     0,   218,     0,     0,     0,   219,   160,     0,
-     0,     0,     0,     0,   161,   220,     4,   221,     0,   222,
-   223,   162,   224,     0,     0,   163,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,   226,     0,   128,   581,
+     0,     0,   228,     0,     0,   168,   169,   170,   171,     0,
+     0,   172,   173,   215,   158,   159,   556,   216,   217,    63,
+   218,     0,     0,   219,     0,     0,     0,   220,   160,     0,
+     0,   557,     0,     0,   161,   221,     4,   222,     0,   223,
+   224,   162,   225,     0,     0,   163,     0,     0,     0,     0,
      0,    65,     0,     0,    66,    18,     0,     0,     0,     0,
-     0,     0,   225,     0,   128,   356,     0,     0,   227,     0,
-     0,   168,   169,   170,   171,     0,     0,   172,   173,   214,
-   158,   159,     0,   215,   216,    63,   217,     0,     0,   218,
-     0,     0,     0,   219,   160,     0,     0,     0,     0,     0,
-   455,   220,     4,   221,     0,   222,   223,   162,   224,     0,
-     0,   456,     0,     0,     0,     0,     0,    65,     0,     0,
-    66,    18,     0,     0,     0,     0,     0,     0,   225,     0,
-   128,   457,     0,     0,   227,     0,     0,   168,   169,   170,
-   171,     0,     0,   172,   173,   214,   158,   159,     0,   215,
-   216,    63,   217,     0,     0,   218,     0,     0,     0,   219,
-   160,     0,     0,     0,     0,     0,   161,   220,     4,   221,
-     0,   222,   223,   162,   224,     0,     0,   163,     0,     0,
+     0,     0,   226,     0,   128,   594,     0,     0,   228,     0,
+     0,   168,   169,   170,   171,     0,     0,   172,   173,   215,
+   158,   159,     0,   216,   217,    63,   218,     0,     0,   219,
+     0,     0,     0,   220,   160,     0,     0,     0,     0,     0,
+   161,   221,     4,   222,     0,   223,   224,   162,   225,     0,
+     0,   163,     0,     0,     0,     0,     0,    65,     0,     0,
+    66,    18,     0,     0,     0,     0,     0,     0,   226,     0,
+   128,   227,     0,     0,   228,     0,     0,   168,   169,   170,
+   171,     0,     0,   172,   173,   215,   158,   159,     0,   216,
+   217,    63,   218,     0,     0,   219,     0,     0,     0,   220,
+   160,     0,     0,     0,     0,     0,   161,   221,     4,   222,
+     0,   223,   224,   162,   225,     0,     0,   163,     0,     0,
      0,     0,     0,    65,     0,     0,    66,    18,     0,     0,
-     0,     0,     0,     0,   225,     0,   128,   503,     0,     0,
-   227,     0,     0,   168,   169,   170,   171,     0,     0,   172,
-   173,   214,   158,   159,     0,   215,   216,    63,   217,     0,
-     0,   218,     0,     0,     0,   219,   160,     0,     0,     0,
-     0,     0,   161,   220,     4,   221,     0,   222,   223,   162,
-   224,     0,     0,   163,     0,     0,     0,     0,     0,    65,
+     0,     0,     0,     0,   226,     0,   128,   357,     0,     0,
+   228,     0,     0,   168,   169,   170,   171,     0,     0,   172,
+   173,   215,   158,   159,     0,   216,   217,    63,   218,     0,
+     0,   219,     0,     0,     0,   220,   160,     0,     0,     0,
+     0,     0,   456,   221,     4,   222,     0,   223,   224,   162,
+   225,     0,     0,   457,     0,     0,     0,     0,     0,    65,
      0,     0,    66,    18,     0,     0,     0,     0,     0,     0,
-   225,     0,   128,   506,     0,     0,   227,     0,     0,   168,
-   169,   170,   171,     0,     0,   172,   173,   214,   158,   159,
-     0,   215,   216,    63,   217,     0,     0,   218,     0,     0,
-     0,   219,   160,     0,     0,     0,     0,     0,   161,   220,
-     4,   221,     0,   222,   223,   162,   224,     0,     0,   163,
+   226,     0,   128,   458,     0,     0,   228,     0,     0,   168,
+   169,   170,   171,     0,     0,   172,   173,   215,   158,   159,
+     0,   216,   217,    63,   218,     0,     0,   219,     0,     0,
+     0,   220,   160,     0,     0,     0,     0,     0,   161,   221,
+     4,   222,     0,   223,   224,   162,   225,     0,     0,   163,
      0,     0,     0,     0,     0,    65,     0,     0,    66,    18,
-     0,     0,     0,     0,     0,     0,   225,     0,   128,   542,
-     0,     0,   227,     0,     0,   168,   169,   170,   171,     0,
-     0,   172,   173,   214,   158,   159,     0,   215,   216,    63,
-   217,     0,     0,   218,     0,     0,     0,   219,   160,     0,
-     0,     0,     0,     0,   161,   220,     4,   221,     0,   222,
-   223,   162,   224,     0,     0,   163,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,   226,     0,   128,   504,
+     0,     0,   228,     0,     0,   168,   169,   170,   171,     0,
+     0,   172,   173,   215,   158,   159,     0,   216,   217,    63,
+   218,     0,     0,   219,     0,     0,     0,   220,   160,     0,
+     0,     0,     0,     0,   161,   221,     4,   222,     0,   223,
+   224,   162,   225,     0,     0,   163,     0,     0,     0,     0,
      0,    65,     0,     0,    66,    18,     0,     0,     0,     0,
-     0,     0,   225,     0,   128,     0,     0,     0,   227,     0,
-     0,   168,   169,   170,   171,     0,     0,   172,   173,   359,
-   158,   159,     0,   215,   216,    63,   217,     0,     0,   218,
-     0,     0,     0,   219,   160,     0,     0,     0,     0,     0,
-   161,   220,     0,   221,     0,   222,   223,   162,   224,     0,
+     0,     0,   226,     0,   128,   507,     0,     0,   228,     0,
+     0,   168,   169,   170,   171,     0,     0,   172,   173,   215,
+   158,   159,     0,   216,   217,    63,   218,     0,     0,   219,
+     0,     0,     0,   220,   160,     0,     0,     0,     0,     0,
+   161,   221,     4,   222,     0,   223,   224,   162,   225,     0,
      0,   163,     0,     0,     0,     0,     0,    65,     0,     0,
-    66,    18,     0,     0,     0,     0,     0,     0,   225,     0,
-   128,     0,     0,     0,   227,     0,     0,   168,   169,   170,
-   171,     0,     0,   172,   173,   359,   158,   159,     0,   522,
-   216,    63,   217,     0,     0,   218,     0,     0,     0,   219,
-   160,     0,     0,     0,     0,     0,   161,   220,     0,   221,
-     0,   222,   223,   162,   224,     0,     0,   163,     0,     0,
+    66,    18,     0,     0,     0,     0,     0,     0,   226,     0,
+   128,   543,     0,     0,   228,     0,     0,   168,   169,   170,
+   171,     0,     0,   172,   173,   215,   158,   159,     0,   216,
+   217,    63,   218,     0,     0,   219,     0,     0,     0,   220,
+   160,     0,     0,     0,     0,     0,   161,   221,     4,   222,
+     0,   223,   224,   162,   225,     0,     0,   163,     0,     0,
      0,     0,     0,    65,     0,     0,    66,    18,     0,     0,
-     0,     0,     0,     0,   225,     0,   128,     0,     0,     0,
-   227,     0,     0,   168,   169,   170,   171,     0,     0,   172,
-   173,     1,   158,   159,     0,     0,     0,    63,     0,     0,
-     0,     0,     0,     0,     0,     0,   160,     0,     0,     0,
-     0,     0,   161,     0,     0,     0,     0,   158,   159,   162,
-     0,     0,    63,   163,     0,     0,     0,     0,     0,    65,
-     0,   160,    66,    18,     0,     0,     0,   161,     0,     0,
-   225,     0,     0,     0,   162,     0,     0,     0,   163,   168,
-   169,   170,   171,     0,    65,   172,   173,    66,    18,     0,
-     0,     0,     0,    63,     0,   225,     0,     0,     0,     0,
-     0,     0,   160,     0,   168,   169,   170,   171,   161,     0,
-   172,   173,     0,     0,     0,   162,     0,     0,     0,   163,
+     0,     0,     0,     0,   226,     0,   128,     0,     0,     0,
+   228,     0,     0,   168,   169,   170,   171,     0,     0,   172,
+   173,   360,   158,   159,     0,   216,   217,    63,   218,     0,
+     0,   219,     0,     0,     0,   220,   160,     0,     0,     0,
+     0,     0,   161,   221,     0,   222,     0,   223,   224,   162,
+   225,     0,     0,   163,     0,     0,     0,     0,     0,    65,
+     0,     0,    66,    18,     0,     0,     0,     0,     0,     0,
+   226,     0,   128,     0,     0,     0,   228,     0,     0,   168,
+   169,   170,   171,     0,     0,   172,   173,   360,   158,   159,
+     0,   523,   217,    63,   218,     0,     0,   219,     0,     0,
+     0,   220,   160,     0,     0,     0,     0,     0,   161,   221,
+     0,   222,     0,   223,   224,   162,   225,     0,     0,   163,
      0,     0,     0,     0,     0,    65,     0,     0,    66,    18,
-     0,     0,   164,   165,     0,     0,   166,     0,     0,     0,
-     0,     0,     0,     0,     0,   168,   169,   170,   171,     0,
-     0,   172,   173
+     0,     0,     0,     0,     0,     0,   226,     0,   128,     0,
+     0,     0,   228,     0,     0,   168,   169,   170,   171,     0,
+     0,   172,   173,     1,   158,   159,     0,     0,     0,    63,
+     0,     0,     0,     0,     0,     0,     0,     0,   160,     0,
+     0,     0,     0,     0,   161,     0,     0,     0,     0,   158,
+   159,   162,     0,     0,    63,   163,     0,     0,     0,     0,
+     0,    65,     0,   160,    66,    18,     0,     0,     0,   161,
+     0,     0,   226,     0,     0,     0,   162,     0,     0,     0,
+   163,   168,   169,   170,   171,     0,    65,   172,   173,    66,
+    18,     0,     0,     0,     0,    63,     0,   226,     0,     0,
+     0,     0,     0,     0,   160,     0,   168,   169,   170,   171,
+   161,     0,   172,   173,     0,     0,     0,   162,     0,     0,
+     0,   163,     0,     0,     0,     0,     0,    65,     0,     0,
+    66,    18,     0,     0,   164,   165,     0,     0,   166,     0,
+     0,     0,     0,     0,     0,     0,     0,   168,   169,   170,
+   171,     0,     0,   172,   173
 };
 
 static const short yycheck[] = {     3,
-     4,   235,   499,   128,   283,   112,   167,   254,   147,   102,
-     5,   110,     1,    36,     0,   395,    39,    53,    15,   107,
-    51,   107,     8,     9,    10,   389,    86,   107,    32,    33,
-    53,    35,    53,    44,    57,    63,    57,     8,    42,    10,
-    26,   107,    97,    29,    30,   133,   410,   133,    79,    51,
-    61,   131,   138,   133,   140,   162,    67,    43,    29,    47,
-    64,    97,   488,   488,    68,    51,    47,   133,   123,   488,
-   125,    95,    74,   570,    62,    67,   107,    79,    63,     2,
-    72,    62,     5,   106,    76,   106,   100,   142,    99,   112,
-    87,    86,   589,    79,    86,    52,   476,   101,   102,   463,
-   526,   526,   133,   529,   529,   107,    95,   526,    96,   111,
-   529,    44,   116,    36,    94,    96,    39,    50,    92,   483,
-   100,   107,   559,    97,   128,   111,    99,    44,    51,   131,
-    53,   133,    54,     8,    57,   228,   222,    59,    55,   162,
-   577,   505,   281,   147,    61,    94,   148,   133,    97,    82,
-    67,    74,    85,    86,    29,   101,    79,   156,   157,   158,
-   159,   587,   587,    68,    99,   164,   165,    89,   587,   595,
-   595,    72,   598,   598,   600,   600,   595,   284,   182,   598,
-   100,   600,    99,   106,   107,    86,   242,    86,   111,   112,
-    97,   488,    44,   249,   295,   251,   101,   102,   299,   300,
-    99,   565,   449,   450,   526,   128,    86,   529,   131,    61,
-   133,    99,   491,   101,   218,    67,    44,   272,    94,    99,
-   224,    97,    50,    97,   228,   148,   128,   461,    95,   526,
-   232,   235,   529,   156,   157,   158,   159,   398,   242,   162,
-    93,   164,   165,   166,    97,   249,    93,   251,   101,    44,
-    44,   376,   499,    99,    82,   101,    50,    85,    86,    51,
-    55,   284,   355,    98,    94,   587,    61,    97,   254,   271,
-   504,   101,    67,   595,    98,    97,   598,   281,   600,   101,
-    75,   283,    74,   384,    98,   271,   387,    79,    82,   293,
-   587,    85,    86,    94,    91,    92,    94,   283,   595,   100,
-    94,   598,   100,   600,    99,   309,   310,    95,    94,   232,
-   128,    99,   235,    99,   100,   107,   315,   316,   317,   111,
-    97,    96,    98,   570,   101,   100,    44,    18,    19,    20,
-    21,   254,    50,   235,   459,    98,   128,     9,    94,   131,
-   242,   133,   589,    50,   100,   579,    60,   249,   271,   251,
-    64,   355,   254,    94,    26,   441,   148,   128,    30,   100,
-   283,   284,   364,    94,    82,    95,    57,    85,    86,   100,
-   162,    43,   376,   472,   166,    82,    94,    94,    85,    86,
-    95,    94,    99,   100,    94,    93,   485,   100,    99,   100,
-   100,   390,   315,   316,   317,   318,   319,   320,   321,   322,
-   323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
-   333,   334,   384,   512,   500,   387,    65,   235,    67,    94,
-   386,   520,   388,    72,   242,   100,    53,    76,    91,    92,
-    93,   249,   488,   251,    97,   100,   254,    86,   101,    86,
-   232,   364,   101,   235,    91,    92,    93,     5,     6,     7,
-    97,    99,   100,   376,   101,   459,    95,   461,    97,    91,
-    92,    93,   254,   101,   235,    97,   101,   390,   101,   101,
-   526,   242,   395,   529,   376,   561,   475,    97,   249,   271,
-   251,   537,    11,   254,   488,   323,   324,   325,   326,   491,
-    12,   283,   128,    13,   550,    14,    86,    93,   502,    93,
-   504,    91,    92,    93,    93,   491,    93,    97,   564,    91,
-    92,   101,     8,     9,    10,   320,   321,   322,    45,    46,
-     3,     4,   526,    16,    17,   529,    91,    92,    44,   318,
-   319,   587,    93,   537,    50,   327,   459,    88,   461,   595,
-    45,    46,   598,    59,   600,    61,   550,   449,   450,   328,
-   329,    67,   475,   476,    99,   559,    99,   459,   376,   461,
-   564,    45,    46,    99,   487,    99,    82,    93,   491,    85,
-    86,    95,   364,   577,    99,   579,    97,    67,    96,    95,
-    96,   504,    97,   587,   376,    93,   488,    94,    67,    93,
-    99,   595,    94,    99,   598,    66,   600,   499,    99,   235,
-   128,    99,   504,   100,    99,   376,   242,    93,   100,    98,
-    98,    44,    93,   249,    88,   251,    98,    50,   254,    94,
-    98,    94,    44,    93,   526,    94,    93,   529,    50,    94,
-    93,   449,   450,    99,    67,   537,   559,    59,    99,    61,
-    93,   459,    97,   461,    98,    67,    95,    94,   550,    82,
-    93,    56,    85,    86,   577,    56,   579,   559,    99,    94,
-    82,    93,   564,    85,    86,    94,    94,   459,   570,   461,
-   488,    88,    99,    95,    96,   577,    99,   579,   449,   450,
-    99,   499,    94,    99,   128,   587,   504,   589,   459,    88,
-   461,    99,    94,   595,    56,    99,   598,    94,   600,   491,
-     0,     0,   327,    10,    45,    61,   116,   235,   526,   133,
-   131,   529,   504,   373,   242,   271,    44,   488,    79,   537,
-   557,   249,   254,   251,   557,   295,   254,   330,   499,   331,
-   442,   254,   550,   504,   332,   334,   442,   487,   333,    -1,
-   376,   559,    -1,   128,    -1,   338,   564,    -1,    -1,    -1,
-    -1,    -1,   570,    -1,    -1,   526,    -1,    -1,   529,   577,
-    -1,   579,    -1,    -1,    -1,    -1,   537,   559,    -1,   587,
-    -1,   589,    -1,    -1,    -1,    -1,    -1,   595,    -1,   550,
-   598,    -1,   600,    -1,    -1,   577,    -1,   579,   559,    -1,
-   128,   235,    -1,   564,    44,    -1,    -1,    -1,   242,   570,
-    50,    -1,    -1,    -1,    -1,   249,   577,   251,   579,    59,
-   254,    61,    -1,   449,   450,    -1,   587,    67,   589,    -1,
-    -1,    -1,    -1,   459,   595,   461,    -1,   598,    -1,   600,
-     0,    -1,    82,    -1,    -1,    85,    86,    -1,     8,     9,
-    10,    -1,    -1,    -1,    -1,    -1,    96,    -1,   376,    -1,
-   235,    -1,   488,    -1,    -1,    -1,    26,   242,    -1,    29,
-    30,    -1,    -1,   499,   249,    44,   251,    -1,   504,   254,
-    -1,    50,    -1,    43,    -1,    -1,    -1,    44,    -1,    -1,
-    59,    51,    61,    50,    -1,    -1,    -1,    -1,    67,    -1,
-   526,    -1,    59,   529,    61,    -1,    -1,   235,    -1,    -1,
-    67,   537,    -1,    82,   242,    -1,    85,    86,    -1,    79,
-    -1,   249,    -1,   251,   550,    82,   254,    96,    85,    86,
-    -1,   449,   450,   559,    -1,    -1,    -1,    -1,   564,    -1,
-    -1,   459,   376,   461,   570,    -1,    -1,   107,    -1,    -1,
-    -1,   577,    -1,   579,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,   587,    -1,   589,    -1,    -1,    -1,    -1,    -1,   595,
-   488,    -1,   598,   133,   600,    -1,    -1,    -1,    -1,    -1,
-    -1,   499,    -1,    -1,    -1,    -1,   504,    -1,   117,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,   376,    -1,    -1,    -1,    -1,    -1,    -1,   526,    -1,
-    -1,   529,    -1,    -1,    -1,   449,   450,    -1,    -1,   537,
-    -1,    -1,    -1,    -1,    -1,   459,    -1,   461,    -1,    -1,
-    -1,    -1,   550,    -1,    -1,    -1,    -1,   166,   167,    -1,
-    -1,   559,    -1,    -1,    -1,    -1,   564,    -1,   376,    -1,
-    -1,    -1,   570,    -1,   488,    -1,    -1,    -1,    -1,   577,
-    -1,   579,    -1,    -1,    -1,   499,    -1,    -1,    -1,   587,
-   504,   589,    -1,    -1,   449,   450,    -1,   595,    -1,    -1,
-   598,    -1,   600,    -1,   459,    -1,   461,   216,    -1,    -1,
-   219,    -1,   526,    -1,    -1,   529,   225,    -1,    -1,    -1,
-    -1,    -1,    -1,   537,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,   488,    -1,    -1,   550,    -1,    -1,    -1,
-    -1,   449,   450,    -1,   499,   559,    -1,    -1,    -1,   504,
-   564,   459,    -1,   461,    -1,    -1,   570,    -1,   156,   157,
-   158,   159,    -1,   577,    -1,   579,   164,   165,    -1,    -1,
-    -1,   526,    -1,   587,   529,   589,    -1,    -1,    -1,    -1,
-   488,   595,   537,    -1,   598,    -1,   600,    -1,    -1,    -1,
-    -1,   499,    -1,    -1,    -1,   550,   504,    -1,    -1,   308,
-    -1,    -1,   311,    -1,   559,    -1,    -1,    -1,    -1,   564,
-    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,   526,    -1,
-    -1,   529,   577,    -1,   579,    -1,   335,    -1,    -1,   537,
-   339,    -1,   587,    -1,   589,    -1,   345,   346,    -1,    -1,
-   595,    -1,   550,   598,   353,   600,   156,   157,   158,   159,
-    -1,   559,    -1,    -1,   164,   165,   564,    -1,    -1,    -1,
-   369,   370,   570,    -1,    -1,    -1,    -1,    -1,    -1,   577,
-    -1,   579,    -1,    -1,   383,    -1,    -1,    -1,    -1,   587,
-    -1,   589,    -1,    -1,   393,    -1,    -1,   595,    -1,   398,
-   598,    -1,   600,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,   315,   316,   317,
-   318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
-   328,   329,   330,   331,   332,   333,   334,    -1,    -1,    -1,
+     4,   284,   102,   167,   112,    53,   489,   147,   236,   110,
+     1,    54,    51,   500,    94,    15,    59,    97,     2,     5,
+   396,     5,   390,   128,   107,    97,   561,    92,    32,    33,
+   107,    35,    97,   107,    86,    74,   489,    51,    42,    95,
+    79,   255,    47,   411,   527,   580,    89,   530,   131,    97,
+   133,   123,    36,   125,   162,    39,   133,    62,    53,   133,
+    64,   138,    57,   140,    68,    79,    44,    51,   107,    53,
+   142,   296,   111,    57,   527,   300,   301,   530,    50,   100,
+   107,    94,    36,    61,    97,    39,   573,    87,   101,    67,
+    74,    96,   131,   107,   133,    79,   464,   101,   102,    53,
+    86,   477,    47,    57,    95,   592,   133,   590,    44,   148,
+    82,   106,   116,    85,    86,   598,   484,    62,   601,   133,
+   603,    99,   106,   107,   128,    61,    86,   111,   112,   229,
+    94,    67,   156,   157,   158,   159,   100,   590,   506,    99,
+   164,   165,   282,   147,   128,   598,   223,   131,   601,   133,
+   603,    96,   106,   527,    63,    44,   530,    68,   112,    94,
+   385,    50,     8,   388,   148,   100,    52,    18,    19,    20,
+    21,    72,   156,   157,   158,   159,    86,   285,   162,   183,
+   164,   165,   166,    29,    51,    86,    94,    44,    63,    99,
+   101,   102,   100,    82,   233,    99,    85,    86,    55,   567,
+    44,   273,    99,   100,    61,    94,    57,    74,   162,   492,
+    67,    55,    79,   489,    94,   219,   590,    61,    75,    99,
+   100,   225,   101,    67,   598,   229,     8,   601,    10,   603,
+    99,   100,   236,   272,   462,   399,   450,   451,    97,   243,
+   107,     9,    99,    97,   111,   284,   250,    29,   252,   233,
+   100,   527,   236,    94,   530,    99,   356,    94,    26,   100,
+   243,   128,    30,   100,   131,    94,   133,   250,    97,   252,
+   489,   255,   377,    99,    44,    43,    94,   505,   282,   128,
+    50,   148,   100,    93,    93,    97,   500,    97,   272,   101,
+   294,   101,   316,   317,   318,   162,    99,    94,   101,   166,
+   284,   285,    65,   100,    67,    95,   310,   311,   527,    72,
+    95,   530,    82,    76,   590,    85,    86,    95,     5,     6,
+     7,    99,   598,    86,    94,   601,   365,   603,     8,     9,
+    10,   285,   316,   317,   318,   319,   320,   321,   322,   323,
+   324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
+   334,   335,   356,    67,   582,   460,    97,    94,    72,   573,
+   101,    93,    76,   100,    98,   442,   233,   391,    94,   236,
+    94,   590,    86,   377,   100,    99,   100,   385,   592,   598,
+   388,   365,   601,    98,   603,   486,    96,   236,   255,     0,
+   100,    60,    98,   377,   243,    64,    98,     8,     9,    10,
+     0,   250,    99,   252,   101,   272,   255,   391,     8,     9,
+    10,   512,   396,    91,    92,    26,   128,   284,    29,    30,
+   521,    44,    98,    95,   501,    97,    26,    50,    44,    29,
+    30,   387,    43,   389,    50,    95,    59,   100,    61,    53,
+    51,    97,    44,    43,    67,    91,    92,   548,    50,    44,
+   101,    51,   476,   492,   101,    50,   460,   101,   462,    82,
+   101,   328,    85,    86,    11,    67,    82,    12,    79,    85,
+    86,    13,    95,    96,    45,    46,   460,    14,   462,    79,
+    82,     3,     4,    85,    86,   489,   563,    82,    16,    17,
+    85,    86,   476,   477,    91,    92,   107,   128,   365,   503,
+   111,   505,    45,    46,   488,    93,   489,   107,   492,    93,
+   377,    93,    44,   324,   325,   326,   327,    93,    50,   319,
+   320,   505,   133,   527,   236,    93,   530,    59,   377,    61,
+    88,   243,    93,   133,   538,    67,    45,    46,   250,    99,
+   252,   329,   330,   255,   527,    99,    99,   530,   552,    99,
+    82,    99,    67,    85,    86,   538,    95,   561,    93,    97,
+    86,   128,   566,    95,    96,    91,    92,    93,    97,   552,
+    94,    97,    67,    96,    86,   101,   580,   561,   582,    91,
+    92,    93,    93,   566,    94,    97,   590,   100,    66,   101,
+   321,   322,   323,   460,   598,   462,   580,   601,   582,   603,
+    99,   450,   451,    99,    93,   236,    99,   590,    99,    93,
+   100,   460,   243,   462,    99,   598,    98,    98,   601,   250,
+   603,   252,    44,    98,   255,   492,    88,    94,    50,    94,
+    94,    99,    93,    99,    93,    98,    94,    59,   505,    61,
+   489,    93,    93,    97,   255,    67,    95,    91,    92,    93,
+    98,   500,    95,    97,    94,    93,   505,   101,    95,    56,
+    82,   272,    56,    85,    86,   377,    99,    94,   128,   236,
+    94,    94,    93,   284,    96,    88,   243,    88,   527,    99,
+    99,   530,    99,   250,    94,   252,    94,    99,   255,   538,
+    91,    92,    93,    99,   561,    99,    97,    56,    94,     0,
+   101,     0,   328,   552,    10,    45,    61,   133,   272,   116,
+   374,    44,   561,   580,    79,   582,   131,   566,   443,    44,
+   559,   255,   255,   559,   573,    50,   128,   443,   331,   333,
+   296,   580,   488,   582,    59,   334,    61,   335,   450,   451,
+   332,   590,    67,   592,    -1,   339,   377,    -1,   460,   598,
+   462,    -1,   601,    -1,   603,    -1,    -1,    82,    44,    -1,
+    85,    86,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
+    -1,    96,    -1,    59,    -1,    61,   236,   489,    -1,    -1,
+    -1,    67,    -1,   243,    -1,    -1,    -1,    -1,   500,    -1,
+   250,    -1,   252,   505,    -1,   255,    82,    -1,    -1,    85,
+    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+   377,    -1,   128,    -1,    -1,   527,    -1,    -1,   530,   450,
+   451,    -1,    -1,    -1,    -1,    -1,   538,    -1,    -1,   460,
+    -1,   462,    -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,
+   552,   243,    -1,    -1,    -1,    -1,    -1,    -1,   250,   561,
+   252,    -1,    -1,   255,   566,    -1,    -1,    -1,   489,    -1,
+    -1,   573,    -1,    -1,    -1,    -1,    -1,    -1,   580,   500,
+   582,    -1,    -1,    -1,   505,    -1,    -1,    -1,   590,    -1,
+   592,   492,    -1,   450,   451,    -1,   598,    -1,    -1,   601,
+    -1,   603,    -1,   460,    -1,   462,   527,    -1,    -1,   530,
+    -1,    -1,    -1,    -1,    -1,    -1,   128,   538,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,    -1,    -1,
+   236,   552,   489,    -1,    -1,    -1,    -1,   243,    -1,    -1,
+   561,    -1,    -1,   500,   250,   566,   252,    -1,   505,   255,
+    -1,    -1,   573,    -1,    -1,    -1,    -1,    -1,    -1,   580,
+    -1,   582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   590,
+   527,   592,    -1,   530,    -1,    -1,    -1,   598,    -1,    -1,
+   601,   538,   603,    -1,    -1,   377,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,    -1,    -1,
+   450,   451,    -1,    -1,   561,    -1,    -1,    -1,    -1,   566,
+   460,    -1,   462,    -1,    -1,    -1,   573,    -1,    -1,    -1,
+    -1,    -1,    -1,   580,   236,   582,    -1,    -1,    -1,    -1,
+    -1,   243,    -1,   590,    -1,   592,    -1,    -1,   250,   489,
+   252,   598,    -1,   255,   601,    -1,   603,    -1,    -1,    -1,
+   500,    -1,    -1,    -1,    -1,   505,    -1,    -1,   450,   451,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   460,    -1,
+   462,   377,    -1,    -1,    -1,    -1,    -1,   527,    -1,    -1,
+   530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   538,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,
+    -1,    -1,   552,    -1,    -1,    -1,    -1,    -1,   500,    -1,
+    -1,   561,    -1,   505,    -1,    -1,   566,    -1,    -1,    -1,
+    -1,    -1,    -1,   573,    -1,    -1,    -1,    -1,   117,    -1,
+   580,    -1,   582,    -1,    -1,   527,    -1,    -1,   530,    -1,
+   590,    -1,   592,    -1,   450,   451,   538,    -1,   598,    -1,
+    -1,   601,    -1,   603,   460,    -1,   462,    -1,    -1,    -1,
+   552,    -1,    -1,    -1,    -1,   377,    -1,    -1,    -1,   561,
+    -1,    -1,    -1,    -1,   566,    -1,    -1,   166,   167,    -1,
+    -1,   573,    -1,   489,    -1,    -1,    -1,    -1,   580,    -1,
+   582,    -1,    -1,    -1,   500,    -1,    -1,    -1,   590,   505,
+   592,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,
+    -1,   603,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,   527,    -1,    -1,   530,    -1,    -1,    -1,   217,    -1,
+    -1,   220,   538,    -1,    -1,    -1,    -1,   226,   450,   451,
+    -1,    -1,    -1,    -1,    -1,    -1,   552,    -1,   460,    -1,
+   462,    -1,    -1,    -1,    -1,   561,   156,   157,   158,   159,
+   566,    -1,    -1,    -1,   164,   165,    -1,   573,    -1,    -1,
+    -1,    -1,    -1,    -1,   580,    -1,   582,   489,    -1,    -1,
+    -1,    -1,    -1,    -1,   590,    -1,   592,    -1,   500,    -1,
+    -1,    -1,   598,   505,    -1,   601,    -1,   603,   156,   157,
+   158,   159,    -1,    -1,    -1,    -1,   164,   165,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,   527,    -1,    -1,   530,    -1,
+   309,    -1,    -1,   312,    -1,    -1,   538,    -1,    -1,    -1,
     -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,
-    -1,    -1,   390,    -1,    -1,    -1,    -1,   395,     1,    -1,
-     3,     4,    -1,    -1,    -1,   315,   316,   317,   318,   319,
-   320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
-   330,   331,   332,   333,   334,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-   549,    -1,    45,    46,   553,    -1,   555,    50,    -1,    -1,
-    -1,     3,     4,    -1,    -1,    -1,    59,    -1,    -1,    -1,
-    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    72,
-    -1,    -1,    -1,    76,    -1,    -1,    -1,   475,   476,    82,
-   390,    -1,    85,    86,    -1,   395,    89,    90,    -1,   487,
-    93,    -1,    -1,    45,    46,    -1,    -1,    -1,    50,   102,
-   103,   104,   105,    -1,    -1,   108,   109,    59,    -1,    -1,
-    -1,    -1,    -1,    65,    -1,    -1,     3,     4,    -1,    -1,
-    72,    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,
+   552,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,   561,
+    -1,   340,    -1,    -1,   566,    -1,    -1,   346,   347,    -1,
+    -1,   573,    -1,    -1,    -1,   354,    -1,    -1,   580,    -1,
+   582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
+   592,   370,   371,    -1,    -1,    -1,   598,    -1,    -1,   601,
+    -1,   603,    -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,
+   399,    -1,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
+   320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
+   330,   331,   332,   333,   334,   335,    -1,    -1,    -1,     1,
+    -1,     3,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,   317,
+   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
+    -1,   329,   330,   331,   332,   333,   334,   335,    -1,    -1,
+    -1,    -1,    -1,    45,    46,    -1,    -1,    -1,    50,    -1,
+    -1,   391,    -1,   482,    -1,    -1,   396,    59,    -1,    -1,
+    -1,    -1,    -1,    65,    -1,    -1,    -1,   496,    -1,    -1,
+    72,     3,     4,    -1,    76,    -1,    -1,    -1,    -1,    -1,
     82,    -1,    -1,    85,    86,    -1,    -1,    89,    90,    -1,
-    -1,    93,    -1,    95,    96,    -1,    -1,    -1,   100,    -1,
-   102,   103,   104,   105,    -1,    -1,   108,   109,    45,    46,
-    -1,    -1,    -1,    50,    -1,   475,   476,    -1,    -1,    -1,
-    -1,    -1,    59,    -1,    -1,    -1,    -1,   487,    65,    -1,
-    -1,     3,     4,    -1,    -1,    72,    -1,    -1,    -1,    76,
-    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    85,    86,
-    -1,    -1,    89,    90,    -1,    -1,    93,    -1,    95,    96,
-    -1,    -1,    -1,    -1,    -1,   102,   103,   104,   105,    -1,
-    -1,   108,   109,    45,    46,    -1,    -1,    -1,    50,    -1,
-    -1,    -1,     3,     4,    -1,    -1,    -1,    59,    -1,    -1,
-    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,
-    72,    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,
+    -1,    93,    -1,   391,    -1,    -1,    -1,    -1,   396,    -1,
+   102,   103,   104,   105,    -1,    -1,   108,   109,    -1,    -1,
+    -1,    -1,    -1,    45,    46,    -1,    -1,    -1,    50,    -1,
+    -1,    -1,   551,    -1,    -1,    -1,   555,    59,   557,    -1,
+    -1,    -1,    -1,    65,    -1,    -1,   476,   477,     3,     4,
+    72,    -1,    -1,    -1,    76,    -1,    -1,    -1,   488,    -1,
     82,    -1,    -1,    85,    86,    -1,    -1,    89,    90,    -1,
-    -1,    93,    -1,    95,    45,    46,    -1,    -1,    -1,    50,
-   102,   103,   104,   105,    -1,    -1,   108,   109,    59,    -1,
-    -1,    -1,    -1,    -1,    65,    -1,    -1,     3,     4,    -1,
-    -1,    72,    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,
-    -1,    82,    -1,    -1,    85,    86,    -1,    -1,    89,    90,
-    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    99,    -1,
-    -1,   102,   103,   104,   105,    -1,    -1,   108,   109,    45,
-    46,    -1,    -1,    -1,    50,    -1,    -1,    -1,     3,     4,
-    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,
-    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,
-    76,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    85,
-    86,    -1,    -1,    89,    90,    -1,    -1,    93,    94,    -1,
-    45,    46,    -1,    -1,    -1,    50,   102,   103,   104,   105,
-    -1,    -1,   108,   109,    59,    -1,    -1,    -1,    -1,    -1,
+    -1,    93,    -1,    95,    96,    -1,    -1,    -1,   100,    -1,
+   102,   103,   104,   105,    -1,    -1,   108,   109,   476,   477,
+    45,    46,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
+   488,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
     65,    -1,    -1,     3,     4,    -1,    -1,    72,    -1,    -1,
     -1,    76,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,
     85,    86,    -1,    -1,    89,    90,    -1,    -1,    93,    -1,
-    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
+    95,    96,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,
    105,    -1,    -1,   108,   109,    45,    46,    -1,    -1,    -1,
     50,    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,    59,
     -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
     -1,    -1,    72,    -1,    -1,    -1,    76,    -1,    -1,    -1,
     -1,    -1,    82,    -1,    -1,    85,    86,    -1,    -1,    89,
-    90,    -1,    -1,    93,    -1,    -1,    45,    46,    -1,    99,
+    90,    -1,    -1,    93,    -1,    95,    45,    46,    -1,    -1,
     -1,    50,   102,   103,   104,   105,    -1,    -1,   108,   109,
     59,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,     3,
      4,    -1,    -1,    72,    -1,    -1,    -1,    76,    -1,    -1,
     -1,    -1,    -1,    82,    -1,    -1,    85,    86,    -1,    -1,
-    89,    90,    -1,    -1,    93,    -1,    -1,    -1,    -1,    98,
-    -1,    -1,    -1,   102,   103,   104,   105,    -1,    -1,   108,
+    89,    90,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,
+    99,    -1,    -1,   102,   103,   104,   105,    -1,    -1,   108,
    109,    45,    46,    -1,    -1,    -1,    50,    -1,    -1,    -1,
      3,     4,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
     -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,
@@ -1281,19 +1278,19 @@ static const short yycheck[] = {     3,
     -1,    -1,    65,    -1,    -1,     3,     4,    -1,    -1,    72,
     -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,
     -1,    -1,    85,    86,    -1,    -1,    89,    90,    -1,    -1,
-    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
+    93,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
    103,   104,   105,    -1,    -1,   108,   109,    45,    46,    -1,
     -1,    -1,    50,    -1,    -1,    -1,     3,     4,    -1,    -1,
     -1,    59,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
     -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    76,    -1,
     -1,    -1,    -1,    -1,    82,    -1,    -1,    85,    86,    -1,
-    -1,    89,    90,    -1,    -1,    93,    94,    -1,    45,    46,
-    -1,    -1,    -1,    50,   102,   103,   104,   105,    -1,    -1,
+    -1,    89,    90,    -1,    -1,    93,    -1,    -1,    45,    46,
+    -1,    99,    -1,    50,   102,   103,   104,   105,    -1,    -1,
    108,   109,    59,    -1,    -1,    -1,    -1,    -1,    65,    -1,
     -1,     3,     4,    -1,    -1,    72,    -1,    -1,    -1,    76,
     -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    85,    86,
-    -1,    -1,    89,    90,    -1,    -1,    93,    94,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,   102,   103,   104,   105,    -1,
+    -1,    -1,    89,    90,    -1,    -1,    93,    -1,    -1,    -1,
+    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,    -1,
     -1,   108,   109,    45,    46,    -1,    -1,    -1,    50,    -1,
     -1,    -1,     3,     4,    -1,    -1,    -1,    59,    -1,    -1,
     -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,
@@ -1304,7 +1301,7 @@ static const short yycheck[] = {     3,
     -1,    -1,    -1,    -1,    65,    -1,    -1,     3,     4,    -1,
     -1,    72,    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,
     -1,    82,    -1,    -1,    85,    86,    -1,    -1,    89,    90,
-    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    99,    -1,
+    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
     -1,   102,   103,   104,   105,    -1,    -1,   108,   109,    45,
     46,    -1,    -1,    -1,    50,    -1,    -1,    -1,     3,     4,
     -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,
@@ -1313,33 +1310,43 @@ static const short yycheck[] = {     3,
     86,    -1,    -1,    89,    90,    -1,    -1,    93,    94,    -1,
     45,    46,    -1,    -1,    -1,    50,   102,   103,   104,   105,
     -1,    -1,   108,   109,    59,    -1,    -1,    -1,    -1,    -1,
-    65,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,
+    65,    -1,    -1,     3,     4,    -1,    -1,    72,    -1,    -1,
     -1,    76,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,
-    85,    86,    -1,    -1,    89,    90,    -1,    -1,    93,    -1,
+    85,    86,    -1,    -1,    89,    90,    -1,    -1,    93,    94,
     -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,
-   105,    -1,    -1,   108,   109,    44,    45,    46,    47,    48,
-    49,    50,    51,    -1,    -1,    54,    -1,    -1,    -1,    58,
-    59,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,
-    -1,    70,    71,    72,    73,    -1,    -1,    76,    -1,    -1,
+   105,    -1,    -1,   108,   109,    45,    46,    -1,    -1,    -1,
+    50,    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,    59,
+    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
+    -1,    -1,    72,    -1,    -1,    -1,    76,    -1,    -1,    -1,
+    -1,    -1,    82,    -1,    -1,    85,    86,    -1,    -1,    89,
+    90,    -1,    -1,    93,    94,    -1,    45,    46,    -1,    -1,
+    -1,    50,   102,   103,   104,   105,    -1,    -1,   108,   109,
+    59,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,     3,
+     4,    -1,    -1,    72,    -1,    -1,    -1,    76,    -1,    -1,
     -1,    -1,    -1,    82,    -1,    -1,    85,    86,    -1,    -1,
-    -1,    -1,    -1,    -1,    93,    -1,    95,    96,    -1,    -1,
+    89,    90,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,
     99,    -1,    -1,   102,   103,   104,   105,    -1,    -1,   108,
-   109,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
-    -1,    54,    -1,    -1,    -1,    58,    59,    -1,    -1,    62,
-    -1,    -1,    65,    66,    67,    68,    -1,    70,    71,    72,
-    73,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,
-    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
-    93,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,   102,
+   109,    45,    46,    -1,    -1,    -1,    50,    -1,    -1,    -1,
+     3,     4,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
+    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,
+    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,    -1,
+    -1,    85,    86,    -1,    -1,    89,    90,    -1,    -1,    93,
+    94,    -1,    45,    46,    -1,    -1,    -1,    50,   102,   103,
+   104,   105,    -1,    -1,   108,   109,    59,    -1,    -1,    -1,
+    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    72,
+    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,
+    -1,    -1,    85,    86,    -1,    -1,    89,    90,    -1,    -1,
+    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
    103,   104,   105,    -1,    -1,   108,   109,    44,    45,    46,
-    -1,    48,    49,    50,    51,    -1,    -1,    54,    -1,    -1,
-    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,
+    47,    48,    49,    50,    51,    -1,    -1,    54,    -1,    -1,
+    -1,    58,    59,    -1,    -1,    62,    -1,    -1,    65,    66,
     67,    68,    -1,    70,    71,    72,    73,    -1,    -1,    76,
     -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    85,    86,
     -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    95,    96,
     -1,    -1,    99,    -1,    -1,   102,   103,   104,   105,    -1,
-    -1,   108,   109,    44,    45,    46,    -1,    48,    49,    50,
+    -1,   108,   109,    44,    45,    46,    47,    48,    49,    50,
     51,    -1,    -1,    54,    -1,    -1,    -1,    58,    59,    -1,
-    -1,    -1,    -1,    -1,    65,    66,    67,    68,    -1,    70,
+    -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,    70,
     71,    72,    73,    -1,    -1,    76,    -1,    -1,    -1,    -1,
     -1,    82,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
     -1,    -1,    93,    -1,    95,    96,    -1,    -1,    99,    -1,
@@ -1375,35 +1382,48 @@ static const short yycheck[] = {     3,
     -1,    -1,    -1,    -1,    65,    66,    67,    68,    -1,    70,
     71,    72,    73,    -1,    -1,    76,    -1,    -1,    -1,    -1,
     -1,    82,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
-    -1,    -1,    93,    -1,    95,    -1,    -1,    -1,    99,    -1,
+    -1,    -1,    93,    -1,    95,    96,    -1,    -1,    99,    -1,
     -1,   102,   103,   104,   105,    -1,    -1,   108,   109,    44,
     45,    46,    -1,    48,    49,    50,    51,    -1,    -1,    54,
     -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,
-    65,    66,    -1,    68,    -1,    70,    71,    72,    73,    -1,
+    65,    66,    67,    68,    -1,    70,    71,    72,    73,    -1,
     -1,    76,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,
     85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,
-    95,    -1,    -1,    -1,    99,    -1,    -1,   102,   103,   104,
+    95,    96,    -1,    -1,    99,    -1,    -1,   102,   103,   104,
    105,    -1,    -1,   108,   109,    44,    45,    46,    -1,    48,
     49,    50,    51,    -1,    -1,    54,    -1,    -1,    -1,    58,
-    59,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
+    59,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    68,
     -1,    70,    71,    72,    73,    -1,    -1,    76,    -1,    -1,
     -1,    -1,    -1,    82,    -1,    -1,    85,    86,    -1,    -1,
     -1,    -1,    -1,    -1,    93,    -1,    95,    -1,    -1,    -1,
     99,    -1,    -1,   102,   103,   104,   105,    -1,    -1,   108,
-   109,    44,    45,    46,    -1,    -1,    -1,    50,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,
-    -1,    -1,    65,    -1,    -1,    -1,    -1,    45,    46,    72,
-    -1,    -1,    50,    76,    -1,    -1,    -1,    -1,    -1,    82,
-    -1,    59,    85,    86,    -1,    -1,    -1,    65,    -1,    -1,
-    93,    -1,    -1,    -1,    72,    -1,    -1,    -1,    76,   102,
-   103,   104,   105,    -1,    82,   108,   109,    85,    86,    -1,
-    -1,    -1,    -1,    50,    -1,    93,    -1,    -1,    -1,    -1,
-    -1,    -1,    59,    -1,   102,   103,   104,   105,    65,    -1,
-   108,   109,    -1,    -1,    -1,    72,    -1,    -1,    -1,    76,
+   109,    44,    45,    46,    -1,    48,    49,    50,    51,    -1,
+    -1,    54,    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,
+    -1,    -1,    65,    66,    -1,    68,    -1,    70,    71,    72,
+    73,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,
+    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
+    93,    -1,    95,    -1,    -1,    -1,    99,    -1,    -1,   102,
+   103,   104,   105,    -1,    -1,   108,   109,    44,    45,    46,
+    -1,    48,    49,    50,    51,    -1,    -1,    54,    -1,    -1,
+    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,
+    -1,    68,    -1,    70,    71,    72,    73,    -1,    -1,    76,
     -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    85,    86,
-    -1,    -1,    89,    90,    -1,    -1,    93,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,   102,   103,   104,   105,    -1,
-    -1,   108,   109
+    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    95,    -1,
+    -1,    -1,    99,    -1,    -1,   102,   103,   104,   105,    -1,
+    -1,   108,   109,    44,    45,    46,    -1,    -1,    -1,    50,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
+    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    45,
+    46,    72,    -1,    -1,    50,    76,    -1,    -1,    -1,    -1,
+    -1,    82,    -1,    59,    85,    86,    -1,    -1,    -1,    65,
+    -1,    -1,    93,    -1,    -1,    -1,    72,    -1,    -1,    -1,
+    76,   102,   103,   104,   105,    -1,    82,   108,   109,    85,
+    86,    -1,    -1,    -1,    -1,    50,    -1,    93,    -1,    -1,
+    -1,    -1,    -1,    -1,    59,    -1,   102,   103,   104,   105,
+    65,    -1,   108,   109,    -1,    -1,    -1,    72,    -1,    -1,
+    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,
+    85,    86,    -1,    -1,    89,    90,    -1,    -1,    93,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,
+   105,    -1,    -1,   108,   109
 };
 #define YYPURE 1
 
@@ -1951,50 +1971,50 @@ yyreduce:
   switch (yyn) {
 
 case 10:
-#line 203 "./parse-scan.y"
+#line 205 "./parse-scan.y"
 {
 		  /* use preset global here. FIXME */
 		  yyval.node = xstrdup ("int");
 		;
     break;}
 case 11:
-#line 208 "./parse-scan.y"
+#line 210 "./parse-scan.y"
 {
 		  /* use preset global here. FIXME */
 		  yyval.node = xstrdup ("double");
 		;
     break;}
 case 12:
-#line 213 "./parse-scan.y"
+#line 215 "./parse-scan.y"
 {
 		  /* use preset global here. FIXME */
 		  yyval.node = xstrdup ("boolean");
 		;
     break;}
 case 19:
-#line 239 "./parse-scan.y"
+#line 241 "./parse-scan.y"
 {
 		  yyval.node = concat ("[", yyvsp[-2].node, NULL);
 		;
     break;}
 case 20:
-#line 243 "./parse-scan.y"
+#line 245 "./parse-scan.y"
 {	
 		  yyval.node = concat ("[", yyvsp[-2].node, NULL);
 		;
     break;}
 case 24:
-#line 260 "./parse-scan.y"
+#line 262 "./parse-scan.y"
 { 
 		  yyval.node = concat (yyvsp[-2].node, ".", yyvsp[0].node, NULL);
 		;
     break;}
 case 38:
-#line 292 "./parse-scan.y"
+#line 294 "./parse-scan.y"
 { package_name = yyvsp[-1].node; ;
     break;}
 case 46:
-#line 319 "./parse-scan.y"
+#line 321 "./parse-scan.y"
 { 
 		  if (yyvsp[0].value == PUBLIC_TK)
 		    modifier_value++;
@@ -2004,7 +2024,7 @@ case 46:
 		;
     break;}
 case 47:
-#line 327 "./parse-scan.y"
+#line 329 "./parse-scan.y"
 { 
 		  if (yyvsp[0].value == PUBLIC_TK)
 		    modifier_value++;
@@ -2014,65 +2034,65 @@ case 47:
 		;
     break;}
 case 48:
-#line 339 "./parse-scan.y"
+#line 341 "./parse-scan.y"
 { 
 		  report_class_declaration(yyvsp[-2].node);
 		  modifier_value = 0;
                 ;
     break;}
 case 50:
-#line 345 "./parse-scan.y"
+#line 347 "./parse-scan.y"
 { report_class_declaration(yyvsp[-2].node); ;
     break;}
 case 56:
-#line 359 "./parse-scan.y"
+#line 361 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 57:
-#line 361 "./parse-scan.y"
+#line 363 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 58:
-#line 366 "./parse-scan.y"
+#line 368 "./parse-scan.y"
 { pop_class_context (); ;
     break;}
 case 59:
-#line 368 "./parse-scan.y"
+#line 370 "./parse-scan.y"
 { pop_class_context (); ;
     break;}
 case 70:
-#line 393 "./parse-scan.y"
+#line 395 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 71:
-#line 395 "./parse-scan.y"
+#line 397 "./parse-scan.y"
 { modifier_value = 0; ;
     break;}
 case 76:
-#line 411 "./parse-scan.y"
+#line 413 "./parse-scan.y"
 { bracket_count = 0; USE_ABSORBER; ;
     break;}
 case 77:
-#line 413 "./parse-scan.y"
+#line 415 "./parse-scan.y"
 { ++bracket_count; ;
     break;}
 case 81:
-#line 428 "./parse-scan.y"
+#line 430 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 83:
-#line 431 "./parse-scan.y"
+#line 433 "./parse-scan.y"
 { modifier_value = 0; ;
     break;}
 case 84:
-#line 433 "./parse-scan.y"
+#line 435 "./parse-scan.y"
 { 
                   report_main_declaration (yyvsp[-1].declarator);
 		  modifier_value = 0;
 		;
     break;}
 case 85:
-#line 441 "./parse-scan.y"
+#line 443 "./parse-scan.y"
 { 
 		  struct method_declarator *d;
 		  NEW_METHOD_DECLARATOR (d, yyvsp[-2].node, NULL);
@@ -2080,7 +2100,7 @@ case 85:
 		;
     break;}
 case 86:
-#line 447 "./parse-scan.y"
+#line 449 "./parse-scan.y"
 { 
 		  struct method_declarator *d;
 		  NEW_METHOD_DECLARATOR (d, yyvsp[-3].node, yyvsp[-1].node);
@@ -2088,13 +2108,13 @@ case 86:
 		;
     break;}
 case 89:
-#line 458 "./parse-scan.y"
+#line 460 "./parse-scan.y"
 {
 		  yyval.node = concat (yyvsp[-2].node, ",", yyvsp[0].node, NULL);
 		;
     break;}
 case 90:
-#line 465 "./parse-scan.y"
+#line 467 "./parse-scan.y"
 { 
 		  USE_ABSORBER;
 		  if (bracket_count)
@@ -2111,7 +2131,7 @@ case 90:
 		;
     break;}
 case 91:
-#line 480 "./parse-scan.y"
+#line 482 "./parse-scan.y"
 {
 		  if (bracket_count)
 		    {
@@ -2127,115 +2147,123 @@ case 91:
 		;
     break;}
 case 94:
-#line 501 "./parse-scan.y"
+#line 503 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 95:
-#line 503 "./parse-scan.y"
+#line 505 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 101:
-#line 520 "./parse-scan.y"
+#line 522 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 103:
-#line 531 "./parse-scan.y"
+#line 533 "./parse-scan.y"
 { modifier_value = 0; ;
     break;}
 case 105:
-#line 536 "./parse-scan.y"
+#line 538 "./parse-scan.y"
 { modifier_value = 0; ;
     break;}
 case 106:
-#line 543 "./parse-scan.y"
+#line 545 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 107:
-#line 545 "./parse-scan.y"
+#line 547 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 114:
-#line 562 "./parse-scan.y"
+#line 564 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 115:
-#line 564 "./parse-scan.y"
+#line 566 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 118:
-#line 576 "./parse-scan.y"
+#line 578 "./parse-scan.y"
 { report_class_declaration (yyvsp[0].node); modifier_value = 0; ;
     break;}
 case 120:
-#line 579 "./parse-scan.y"
+#line 581 "./parse-scan.y"
 { report_class_declaration (yyvsp[0].node); modifier_value = 0; ;
     break;}
 case 122:
-#line 582 "./parse-scan.y"
+#line 584 "./parse-scan.y"
 { report_class_declaration (yyvsp[-1].node); modifier_value = 0; ;
     break;}
 case 124:
-#line 585 "./parse-scan.y"
+#line 587 "./parse-scan.y"
 { report_class_declaration (yyvsp[-1].node); modifier_value = 0; ;
     break;}
 case 128:
-#line 596 "./parse-scan.y"
+#line 598 "./parse-scan.y"
 { pop_class_context (); ;
     break;}
 case 129:
-#line 598 "./parse-scan.y"
+#line 600 "./parse-scan.y"
 { pop_class_context (); ;
     break;}
 case 152:
-#line 657 "./parse-scan.y"
+#line 659 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 153:
-#line 659 "./parse-scan.y"
+#line 661 "./parse-scan.y"
 { modifier_value = 0; ;
     break;}
 case 177:
-#line 699 "./parse-scan.y"
+#line 701 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 230:
-#line 846 "./parse-scan.y"
+#line 848 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 247:
-#line 886 "./parse-scan.y"
+#line 888 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 248:
-#line 888 "./parse-scan.y"
+#line 890 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 250:
-#line 894 "./parse-scan.y"
+#line 896 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
-case 259:
-#line 916 "./parse-scan.y"
-{ USE_ABSORBER; ;
+case 258:
+#line 911 "./parse-scan.y"
+{ report_class_declaration (NULL); ;
+    break;}
+case 260:
+#line 914 "./parse-scan.y"
+{ report_class_declaration (NULL); ;
     break;}
-case 277:
-#line 958 "./parse-scan.y"
+case 262:
+#line 920 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
-case 278:
-#line 960 "./parse-scan.y"
+case 280:
+#line 962 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
-case 283:
-#line 969 "./parse-scan.y"
+case 281:
+#line 964 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 case 286:
-#line 976 "./parse-scan.y"
+#line 973 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
-case 341:
-#line 1095 "./parse-scan.y"
+case 289:
+#line 980 "./parse-scan.y"
+{ USE_ABSORBER; ;
+    break;}
+case 344:
+#line 1099 "./parse-scan.y"
 { USE_ABSORBER; ;
     break;}
 }
@@ -2460,7 +2488,7 @@ yyerrhandle:
     }
   return 1;
 }
-#line 1113 "./parse-scan.y"
+#line 1117 "./parse-scan.y"
 
 
 /* Create a new parser context */
@@ -2479,29 +2507,61 @@ static void
 push_class_context (name)
     const char *name;
 {
-  size_t name_length = strlen (name);
-  inner_qualifier = xrealloc (inner_qualifier, 
-                             inner_qualifier_length + name_length+2);
-  memcpy (inner_qualifier+inner_qualifier_length, name, name_length);
-  inner_qualifier_length += name_length;
-  inner_qualifier [inner_qualifier_length] = '$';
-  inner_qualifier [++inner_qualifier_length] = '\0';
+  /* If we already have CURRENT_CLASS set, we're in an inter
+     class. Mangle its name. */
+  if (current_class)
+    {
+      const char *p;
+      char anonymous [3];
+      int additional_length;
+      
+      /* NAME set to NULL indicates an anonymous class, which are named by
+	 numbering them. */
+      if (!name)
+	{
+	  sprintf (anonymous, "%d", ++anonymous_count);
+	  p = anonymous;
+	}
+      else
+	p = name;
+      
+      additional_length = strlen (p)+1; /* +1 for `$' */
+      current_class = xrealloc (current_class, 
+				current_class_length + additional_length + 1);
+      current_class [current_class_length] = '$';
+      strcpy (&current_class [current_class_length+1], p);
+      current_class_length += additional_length;
+    }
+  else
+    {
+      if (!name)
+	return;
+      current_class_length = strlen (name);
+      current_class = xmalloc (current_class_length+1);
+      strcpy (current_class, name);
+    }
 }
 
 static void
 pop_class_context ()
 {
-  while (--inner_qualifier_length > 0
-        && inner_qualifier [inner_qualifier_length-1] != '$')
+  /* Go back to the last `$' and cut. */
+  while (--current_class_length > 0
+        && current_class [current_class_length] != '$')
     ;
-  inner_qualifier = xrealloc (inner_qualifier, inner_qualifier_length+1);
-  if (inner_qualifier_length == -1)
-    inner_qualifier_length = 0;
-  inner_qualifier [inner_qualifier_length] = '\0';
+  if (current_class_length)
+    {
+      current_class = xrealloc (current_class, current_class_length+1);
+      current_class [current_class_length] = '\0';
+    }
+  else
+    {
+      current_class = NULL;
+      anonymous_count = 0;
+    }
 }
 
 /* Actions defined here */
-#define INNER_QUALIFIER (inner_qualifier ? inner_qualifier : "")
 
 static void
 report_class_declaration (name)
@@ -2509,6 +2569,7 @@ report_class_declaration (name)
 {
   extern int flag_dump_class, flag_list_filename;
 
+  push_class_context (name);
   if (flag_dump_class)
     {
       if (!previous_output)
@@ -2519,13 +2580,10 @@ report_class_declaration (name)
 	}
 	
       if (package_name)
-	fprintf (out, "%s.%s%s ", package_name, INNER_QUALIFIER, name);
+	fprintf (out, "%s.%s ", package_name, current_class);
       else
-	fprintf (out, "%s%s ", INNER_QUALIFIER, name);
+	fprintf (out, "%s ", current_class);
     }
-
-  push_class_context (name);
-  current_class = name;
 }
 
 static void
@@ -2559,7 +2617,8 @@ report_main_declaration (declarator)
 void reset_report ()
 {
   previous_output = 0;
-  current_class = package_name = NULL;
+  package_name = NULL;
+  current_class = NULL;
 }
 
 void
--- gcc/objc/objc-parse.c.jj	Thu Jul 27 15:46:10 2000
+++ gcc/objc/objc-parse.c	Tue Aug  5 15:58:09 2003
@@ -2300,7 +2300,7 @@ yyreduce:
 case 1:
 #line 262 "objc-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids an empty source file");
+		    pedwarn ("ISO C forbids an empty source file");
 		  finish_file ();
 		;
     break;}
@@ -2320,7 +2320,7 @@ case 3:
     break;}
 case 5:
 #line 282 "objc-parse.y"
-{yyval.ttype = NULL_TREE; ;
+{yyval.ttype = NULL_TREE; ggc_collect(); ;
     break;}
 case 10:
 #line 290 "objc-parse.y"
@@ -2339,7 +2339,7 @@ case 11:
 case 12:
 #line 303 "objc-parse.y"
 { if (pedantic)
-		    error ("ANSI C forbids data definition with no type or storage class");
+		    error ("ISO C forbids data definition with no type or storage class");
 		  else if (!flag_traditional)
 		    warning ("data definition has no type or storage class"); 
 
@@ -2370,7 +2370,7 @@ case 16:
 case 19:
 #line 326 "objc-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C does not allow extra `;' outside of a function"); ;
+		    pedwarn ("ISO C does not allow extra `;' outside of a function"); ;
     break;}
 case 20:
 #line 332 "objc-parse.y"
@@ -2507,7 +2507,7 @@ case 52:
 #line 435 "objc-parse.y"
 { tree label = lookup_label (yyvsp[0].ttype);
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids `&&'");
+		    pedwarn ("ISO C forbids `&&'");
 		  if (label == 0)
 		    yyval.ttype = null_pointer_node;
 		  else
@@ -2580,7 +2580,7 @@ case 65:
 		  finish_init ();
 
 		  if (pedantic && ! flag_isoc99)
-		    pedwarn ("ANSI C forbids constructor expressions");
+		    pedwarn ("ISO C89 forbids constructor expressions");
 		  if (TYPE_NAME (type) != 0)
 		    {
 		      if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)
@@ -2685,7 +2685,7 @@ case 85:
 case 86:
 #line 577 "objc-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids omitting the middle term of a ?: expression");
+		    pedwarn ("ISO C forbids omitting the middle term of a ?: expression");
 		  /* Make sure first operand is calculated only once.  */
 		  yyvsp[0].ttype = save_expr (yyvsp[-1].ttype);
 		  yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[0].ttype));
@@ -2745,7 +2745,7 @@ case 95:
 #line 624 "objc-parse.y"
 { tree rtl_exp;
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids braced-groups within expressions");
+		    pedwarn ("ISO C forbids braced-groups within expressions");
 		  pop_iterator_stack ();
 		  pop_label_level ();
 		  rtl_exp = expand_end_stmt_expr (yyvsp[-2].ttype);
@@ -2857,7 +2857,7 @@ case 114:
 #line 723 "objc-parse.y"
 { c_mark_varargs ();
 		  if (pedantic)
-		    pedwarn ("ANSI C does not permit use of `varargs.h'"); ;
+		    pedwarn ("ISO C does not permit use of `varargs.h'"); ;
     break;}
 case 115:
 #line 733 "objc-parse.y"
@@ -3176,7 +3176,7 @@ case 203:
 case 204:
 #line 1065 "objc-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids empty initializer braces"); ;
+		    pedwarn ("ISO C forbids empty initializer braces"); ;
     break;}
 case 210:
 #line 1081 "objc-parse.y"
@@ -3201,7 +3201,7 @@ case 219:
 case 220:
 #line 1111 "objc-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids nested functions");
+		    pedwarn ("ISO C forbids nested functions");
 
 		  push_function_context ();
 		  if (! start_function (current_declspecs, yyvsp[0].ttype,
@@ -3224,7 +3224,7 @@ case 222:
 case 223:
 #line 1137 "objc-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids nested functions");
+		    pedwarn ("ISO C forbids nested functions");
 
 		  push_function_context ();
 		  if (! start_function (current_declspecs, yyvsp[0].ttype,
@@ -3452,7 +3452,7 @@ case 279:
 		     structs or unions (which is [a] useful and [b] supports 
 		     MS P-SDK).  */
 		  if (pedantic)
-		    pedwarn ("ANSI C doesn't support unnamed structs/unions");
+		    pedwarn ("ISO C doesn't support unnamed structs/unions");
 
 		  yyval.ttype = grokfield(yyvsp[-2].filename, yyvsp[-1].lineno, NULL, current_declspecs, NULL_TREE);
 		  current_declspecs = TREE_VALUE (declspec_stack);
@@ -3470,7 +3470,7 @@ case 280:
 case 281:
 #line 1385 "objc-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids member declarations with no members");
+		    pedwarn ("ISO C forbids member declarations with no members");
 		  shadow_tag(yyvsp[0].ttype);
 		  yyval.ttype = NULL_TREE; ;
     break;}
@@ -3593,7 +3593,7 @@ case 312:
 #line 1498 "objc-parse.y"
 {
 		  if (pedantic && yyvsp[0].ends_in_label)
-		    pedwarn ("ANSI C forbids label at end of compound statement");
+		    pedwarn ("ISO C forbids label at end of compound statement");
 		;
     break;}
 case 314:
@@ -3617,7 +3617,7 @@ case 319:
 case 321:
 #line 1535 "objc-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids label declarations"); ;
+		    pedwarn ("ISO C forbids label declarations"); ;
     break;}
 case 324:
 #line 1546 "objc-parse.y"
@@ -3950,7 +3950,7 @@ case 372:
 case 373:
 #line 1846 "objc-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids `goto *expr;'");
+		    pedwarn ("ISO C forbids `goto *expr;'");
 		  stmt_count++;
 		  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);
 		  expand_computed_goto (convert (ptr_type_node, yyvsp[-1].ttype)); ;
@@ -4070,7 +4070,7 @@ case 396:
 #line 1998 "objc-parse.y"
 { tree parm;
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids forward parameter declarations");
+		    pedwarn ("ISO C forbids forward parameter declarations");
 		  /* Mark the forward decls as such.  */
 		  for (parm = getdecls (); parm; parm = TREE_CHAIN (parm))
 		    TREE_ASM_WRITTEN (parm) = 1;
@@ -4097,7 +4097,7 @@ case 400:
 		     it caused problems with the code in expand_builtin which
 		     tries to verify that BUILT_IN_NEXT_ARG is being used
 		     correctly.  */
-		  error ("ANSI C requires a named argument before `...'");
+		  error ("ISO C requires a named argument before `...'");
 		;
     break;}
 case 401:
--- gcc/objc/objc-parse.y.jj	Thu Jul 27 15:46:09 2000
+++ gcc/objc/objc-parse.y	Tue Aug  5 15:58:05 2003
@@ -260,7 +260,7 @@ c_parse_init ()
 %%
 program: /* empty */
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids an empty source file");
+		    pedwarn ("ISO C forbids an empty source file");
 		  finish_file ();
 		}
 	| extdefs
@@ -279,7 +279,7 @@ program: /* empty */
 
 extdefs:
 	{$<ttype>$ = NULL_TREE; } extdef
-	| extdefs {$<ttype>$ = NULL_TREE; } extdef
+	| extdefs {$<ttype>$ = NULL_TREE; ggc_collect(); } extdef
 	;
 
 extdef:
@@ -301,7 +301,7 @@ extdef:
 datadef:
 	  setspecs notype_initdecls ';'
 		{ if (pedantic)
-		    error ("ANSI C forbids data definition with no type or storage class");
+		    error ("ISO C forbids data definition with no type or storage class");
 		  else if (!flag_traditional)
 		    warning ("data definition has no type or storage class"); 
 
@@ -324,7 +324,7 @@ datadef:
 	| error '}'
 	| ';'
 		{ if (pedantic)
-		    pedwarn ("ANSI C does not allow extra `;' outside of a function"); }
+		    pedwarn ("ISO C does not allow extra `;' outside of a function"); }
 	;
 
 fndef:
@@ -434,7 +434,7 @@ unary_expr:
 	| ANDAND identifier
 		{ tree label = lookup_label ($2);
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids `&&'");
+		    pedwarn ("ISO C forbids `&&'");
 		  if (label == 0)
 		    $$ = null_pointer_node;
 		  else
@@ -454,7 +454,7 @@ unary_expr:
 		  else
 		    {
 		      if (pedantic)
-			pedwarn ("ANSI C forbids `&...'");
+			pedwarn ("ISO C forbids `&...'");
 		      $$ = tree_last (DECL_ARGUMENTS (current_function_decl));
 		      $$ = build_unary_op (ADDR_EXPR, $$, 0);
 		    } }
@@ -506,7 +506,7 @@ cast_expr:
 		  finish_init ();
 
 		  if (pedantic && ! flag_isoc99)
-		    pedwarn ("ANSI C forbids constructor expressions");
+		    pedwarn ("ISO C89 forbids constructor expressions");
 		  if (TYPE_NAME (type) != 0)
 		    {
 		      if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)
@@ -575,7 +575,7 @@ expr_no_commas:
 		  $$ = build_conditional_expr ($1, $4, $7); }
 	| expr_no_commas '?'
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids omitting the middle term of a ?: expression");
+		    pedwarn ("ISO C forbids omitting the middle term of a ?: expression");
 		  /* Make sure first operand is calculated only once.  */
 		  $<ttype>2 = save_expr ($1);
 		  $1 = truthvalue_conversion (default_conversion ($<ttype>2));
@@ -623,7 +623,7 @@ primary:
 	| compstmt_primary_start compstmt_nostart ')'
 		{ tree rtl_exp;
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids braced-groups within expressions");
+		    pedwarn ("ISO C forbids braced-groups within expressions");
 		  pop_iterator_stack ();
 		  pop_label_level ();
 		  rtl_exp = expand_end_stmt_expr ($1);
@@ -722,7 +722,7 @@ old_style_parm_decls:
 		/* ... is used here to indicate a varargs function.  */
 		{ c_mark_varargs ();
 		  if (pedantic)
-		    pedwarn ("ANSI C does not permit use of `varargs.h'"); }
+		    pedwarn ("ISO C does not permit use of `varargs.h'"); }
 	;
 
 /* The following are analogous to lineno_decl, decls and decl
@@ -1063,7 +1063,7 @@ init:
 initlist_maybe_comma:
 	  /* empty */
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids empty initializer braces"); }
+		    pedwarn ("ISO C forbids empty initializer braces"); }
 	| initlist1 maybecomma
 	;
 
@@ -1109,7 +1109,7 @@ designator:
 nested_function:
 	  declarator
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids nested functions");
+		    pedwarn ("ISO C forbids nested functions");
 
 		  push_function_context ();
 		  if (! start_function (current_declspecs, $1,
@@ -1135,7 +1135,7 @@ nested_function:
 notype_nested_function:
 	  notype_declarator
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids nested functions");
+		    pedwarn ("ISO C forbids nested functions");
 
 		  push_function_context ();
 		  if (! start_function (current_declspecs, $1,
@@ -1369,7 +1369,7 @@ component_decl:
 		     structs or unions (which is [a] useful and [b] supports 
 		     MS P-SDK).  */
 		  if (pedantic)
-		    pedwarn ("ANSI C doesn't support unnamed structs/unions");
+		    pedwarn ("ISO C doesn't support unnamed structs/unions");
 
 		  $$ = grokfield($3, $4, NULL, current_declspecs, NULL_TREE);
 		  current_declspecs = TREE_VALUE (declspec_stack);
@@ -1383,7 +1383,7 @@ component_decl:
 		  declspec_stack = TREE_CHAIN (declspec_stack); }
 	| nonempty_type_quals
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids member declarations with no members");
+		    pedwarn ("ISO C forbids member declarations with no members");
 		  shadow_tag($1);
 		  $$ = NULL_TREE; }
 	| error
@@ -1497,7 +1497,7 @@ stmts:
 	lineno_stmt_or_labels
 		{
 		  if (pedantic && $1)
-		    pedwarn ("ANSI C forbids label at end of compound statement");
+		    pedwarn ("ISO C forbids label at end of compound statement");
 		}
 	;
 
@@ -1533,7 +1533,7 @@ maybe_label_decls:
 	  /* empty */
 	| label_decls
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids label declarations"); }
+		    pedwarn ("ISO C forbids label declarations"); }
 	;
 
 label_decls:
@@ -1844,7 +1844,7 @@ stmt:
 		}
 	| GOTO '*' expr ';'
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids `goto *expr;'");
+		    pedwarn ("ISO C forbids `goto *expr;'");
 		  stmt_count++;
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  expand_computed_goto (convert (ptr_type_node, $3)); }
@@ -1997,7 +1997,7 @@ parmlist_1:
 	| parms ';'
 		{ tree parm;
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids forward parameter declarations");
+		    pedwarn ("ISO C forbids forward parameter declarations");
 		  /* Mark the forward decls as such.  */
 		  for (parm = getdecls (); parm; parm = TREE_CHAIN (parm))
 		    TREE_ASM_WRITTEN (parm) = 1;
@@ -2020,7 +2020,7 @@ parmlist_2:  /* empty */
 		     it caused problems with the code in expand_builtin which
 		     tries to verify that BUILT_IN_NEXT_ARG is being used
 		     correctly.  */
-		  error ("ANSI C requires a named argument before `...'");
+		  error ("ISO C requires a named argument before `...'");
 		}
 	| parms
 		{ $$ = get_parm_info (1); }
--- gcc/c-parse.c.jj	Thu Jul 27 15:46:11 2000
+++ gcc/c-parse.c	Tue Aug  5 15:58:09 2003
@@ -1816,7 +1816,7 @@ yyreduce:
 case 1:
 #line 234 "c-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids an empty source file");
+		    pedwarn ("ISO C forbids an empty source file");
 		  finish_file ();
 		;
     break;}
@@ -1836,7 +1836,7 @@ case 3:
     break;}
 case 5:
 #line 254 "c-parse.y"
-{yyval.ttype = NULL_TREE; ;
+{yyval.ttype = NULL_TREE; ggc_collect(); ;
     break;}
 case 9:
 #line 261 "c-parse.y"
@@ -1855,7 +1855,7 @@ case 10:
 case 11:
 #line 274 "c-parse.y"
 { if (pedantic)
-		    error ("ANSI C forbids data definition with no type or storage class");
+		    error ("ISO C forbids data definition with no type or storage class");
 		  else if (!flag_traditional)
 		    warning ("data definition has no type or storage class"); 
 
@@ -1886,7 +1886,7 @@ case 15:
 case 18:
 #line 297 "c-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C does not allow extra `;' outside of a function"); ;
+		    pedwarn ("ISO C does not allow extra `;' outside of a function"); ;
     break;}
 case 19:
 #line 303 "c-parse.y"
@@ -2025,7 +2025,7 @@ case 49:
 #line 406 "c-parse.y"
 { tree label = lookup_label (yyvsp[0].ttype);
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids `&&'");
+		    pedwarn ("ISO C forbids `&&'");
 		  if (label == 0)
 		    yyval.ttype = null_pointer_node;
 		  else
@@ -2098,7 +2098,7 @@ case 62:
 		  finish_init ();
 
 		  if (pedantic && ! flag_isoc99)
-		    pedwarn ("ANSI C forbids constructor expressions");
+		    pedwarn ("ISO C89 forbids constructor expressions");
 		  if (TYPE_NAME (type) != 0)
 		    {
 		      if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)
@@ -2203,7 +2203,7 @@ case 82:
 case 83:
 #line 548 "c-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids omitting the middle term of a ?: expression");
+		    pedwarn ("ISO C forbids omitting the middle term of a ?: expression");
 		  /* Make sure first operand is calculated only once.  */
 		  yyvsp[0].ttype = save_expr (yyvsp[-1].ttype);
 		  yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[0].ttype));
@@ -2263,7 +2263,7 @@ case 92:
 #line 595 "c-parse.y"
 { tree rtl_exp;
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids braced-groups within expressions");
+		    pedwarn ("ISO C forbids braced-groups within expressions");
 		  pop_iterator_stack ();
 		  pop_label_level ();
 		  rtl_exp = expand_end_stmt_expr (yyvsp[-2].ttype);
@@ -2345,7 +2345,7 @@ case 104:
 #line 671 "c-parse.y"
 { c_mark_varargs ();
 		  if (pedantic)
-		    pedwarn ("ANSI C does not permit use of `varargs.h'"); ;
+		    pedwarn ("ISO C does not permit use of `varargs.h'"); ;
     break;}
 case 105:
 #line 681 "c-parse.y"
@@ -2652,7 +2652,7 @@ case 190:
 case 191:
 #line 1004 "c-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids empty initializer braces"); ;
+		    pedwarn ("ISO C forbids empty initializer braces"); ;
     break;}
 case 197:
 #line 1020 "c-parse.y"
@@ -2685,7 +2685,7 @@ case 208:
 case 209:
 #line 1054 "c-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids nested functions");
+		    pedwarn ("ISO C forbids nested functions");
 
 		  push_function_context ();
 		  if (! start_function (current_declspecs, yyvsp[0].ttype,
@@ -2708,7 +2708,7 @@ case 211:
 case 212:
 #line 1080 "c-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids nested functions");
+		    pedwarn ("ISO C forbids nested functions");
 
 		  push_function_context ();
 		  if (! start_function (current_declspecs, yyvsp[0].ttype,
@@ -2935,7 +2935,7 @@ case 268:
 		     structs or unions (which is [a] useful and [b] supports 
 		     MS P-SDK).  */
 		  if (pedantic)
-		    pedwarn ("ANSI C doesn't support unnamed structs/unions");
+		    pedwarn ("ISO C doesn't support unnamed structs/unions");
 
 		  yyval.ttype = grokfield(yyvsp[-2].filename, yyvsp[-1].lineno, NULL, current_declspecs, NULL_TREE);
 		  current_declspecs = TREE_VALUE (declspec_stack);
@@ -2953,7 +2953,7 @@ case 269:
 case 270:
 #line 1323 "c-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids member declarations with no members");
+		    pedwarn ("ISO C forbids member declarations with no members");
 		  shadow_tag(yyvsp[0].ttype);
 		  yyval.ttype = NULL_TREE; ;
     break;}
@@ -3076,7 +3076,7 @@ case 301:
 #line 1436 "c-parse.y"
 {
 		  if (pedantic && yyvsp[0].ends_in_label)
-		    pedwarn ("ANSI C forbids label at end of compound statement");
+		    pedwarn ("ISO C forbids label at end of compound statement");
 		;
     break;}
 case 303:
@@ -3098,7 +3098,7 @@ case 308:
 case 310:
 #line 1471 "c-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids label declarations"); ;
+		    pedwarn ("ISO C forbids label declarations"); ;
     break;}
 case 313:
 #line 1482 "c-parse.y"
@@ -3431,7 +3431,7 @@ case 361:
 case 362:
 #line 1782 "c-parse.y"
 { if (pedantic)
-		    pedwarn ("ANSI C forbids `goto *expr;'");
+		    pedwarn ("ISO C forbids `goto *expr;'");
 		  stmt_count++;
 		  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);
 		  expand_computed_goto (convert (ptr_type_node, yyvsp[-1].ttype)); ;
@@ -3551,7 +3551,7 @@ case 385:
 #line 1934 "c-parse.y"
 { tree parm;
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids forward parameter declarations");
+		    pedwarn ("ISO C forbids forward parameter declarations");
 		  /* Mark the forward decls as such.  */
 		  for (parm = getdecls (); parm; parm = TREE_CHAIN (parm))
 		    TREE_ASM_WRITTEN (parm) = 1;
@@ -3578,7 +3578,7 @@ case 389:
 		     it caused problems with the code in expand_builtin which
 		     tries to verify that BUILT_IN_NEXT_ARG is being used
 		     correctly.  */
-		  error ("ANSI C requires a named argument before `...'");
+		  error ("ISO C requires a named argument before `...'");
 		;
     break;}
 case 390:
--- gcc/c-parse.y.jj	Thu Jul 27 15:46:10 2000
+++ gcc/c-parse.y	Tue Aug  5 15:58:05 2003
@@ -232,7 +232,7 @@ c_parse_init ()
 %%
 program: /* empty */
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids an empty source file");
+		    pedwarn ("ISO C forbids an empty source file");
 		  finish_file ();
 		}
 	| extdefs
@@ -251,7 +251,7 @@ program: /* empty */
 
 extdefs:
 	{$<ttype>$ = NULL_TREE; } extdef
-	| extdefs {$<ttype>$ = NULL_TREE; } extdef
+	| extdefs {$<ttype>$ = NULL_TREE; ggc_collect(); } extdef
 	;
 
 extdef:
@@ -272,7 +272,7 @@ extdef:
 datadef:
 	  setspecs notype_initdecls ';'
 		{ if (pedantic)
-		    error ("ANSI C forbids data definition with no type or storage class");
+		    error ("ISO C forbids data definition with no type or storage class");
 		  else if (!flag_traditional)
 		    warning ("data definition has no type or storage class"); 
 
@@ -295,7 +295,7 @@ datadef:
 	| error '}'
 	| ';'
 		{ if (pedantic)
-		    pedwarn ("ANSI C does not allow extra `;' outside of a function"); }
+		    pedwarn ("ISO C does not allow extra `;' outside of a function"); }
 	;
 
 fndef:
@@ -405,7 +405,7 @@ unary_expr:
 	| ANDAND identifier
 		{ tree label = lookup_label ($2);
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids `&&'");
+		    pedwarn ("ISO C forbids `&&'");
 		  if (label == 0)
 		    $$ = null_pointer_node;
 		  else
@@ -425,7 +425,7 @@ unary_expr:
 		  else
 		    {
 		      if (pedantic)
-			pedwarn ("ANSI C forbids `&...'");
+			pedwarn ("ISO C forbids `&...'");
 		      $$ = tree_last (DECL_ARGUMENTS (current_function_decl));
 		      $$ = build_unary_op (ADDR_EXPR, $$, 0);
 		    } }
@@ -477,7 +477,7 @@ cast_expr:
 		  finish_init ();
 
 		  if (pedantic && ! flag_isoc99)
-		    pedwarn ("ANSI C forbids constructor expressions");
+		    pedwarn ("ISO C89 forbids constructor expressions");
 		  if (TYPE_NAME (type) != 0)
 		    {
 		      if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)
@@ -546,7 +546,7 @@ expr_no_commas:
 		  $$ = build_conditional_expr ($1, $4, $7); }
 	| expr_no_commas '?'
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids omitting the middle term of a ?: expression");
+		    pedwarn ("ISO C forbids omitting the middle term of a ?: expression");
 		  /* Make sure first operand is calculated only once.  */
 		  $<ttype>2 = save_expr ($1);
 		  $1 = truthvalue_conversion (default_conversion ($<ttype>2));
@@ -594,7 +594,7 @@ primary:
 	| compstmt_primary_start compstmt_nostart ')'
 		{ tree rtl_exp;
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids braced-groups within expressions");
+		    pedwarn ("ISO C forbids braced-groups within expressions");
 		  pop_iterator_stack ();
 		  pop_label_level ();
 		  rtl_exp = expand_end_stmt_expr ($1);
@@ -670,7 +670,7 @@ old_style_parm_decls:
 		/* ... is used here to indicate a varargs function.  */
 		{ c_mark_varargs ();
 		  if (pedantic)
-		    pedwarn ("ANSI C does not permit use of `varargs.h'"); }
+		    pedwarn ("ISO C does not permit use of `varargs.h'"); }
 	;
 
 /* The following are analogous to lineno_decl, decls and decl
@@ -1002,7 +1002,7 @@ init:
 initlist_maybe_comma:
 	  /* empty */
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids empty initializer braces"); }
+		    pedwarn ("ISO C forbids empty initializer braces"); }
 	| initlist1 maybecomma
 	;
 
@@ -1052,7 +1052,7 @@ designator:
 nested_function:
 	  declarator
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids nested functions");
+		    pedwarn ("ISO C forbids nested functions");
 
 		  push_function_context ();
 		  if (! start_function (current_declspecs, $1,
@@ -1078,7 +1078,7 @@ nested_function:
 notype_nested_function:
 	  notype_declarator
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids nested functions");
+		    pedwarn ("ISO C forbids nested functions");
 
 		  push_function_context ();
 		  if (! start_function (current_declspecs, $1,
@@ -1307,7 +1307,7 @@ component_decl:
 		     structs or unions (which is [a] useful and [b] supports 
 		     MS P-SDK).  */
 		  if (pedantic)
-		    pedwarn ("ANSI C doesn't support unnamed structs/unions");
+		    pedwarn ("ISO C doesn't support unnamed structs/unions");
 
 		  $$ = grokfield($3, $4, NULL, current_declspecs, NULL_TREE);
 		  current_declspecs = TREE_VALUE (declspec_stack);
@@ -1321,7 +1321,7 @@ component_decl:
 		  declspec_stack = TREE_CHAIN (declspec_stack); }
 	| nonempty_type_quals
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids member declarations with no members");
+		    pedwarn ("ISO C forbids member declarations with no members");
 		  shadow_tag($1);
 		  $$ = NULL_TREE; }
 	| error
@@ -1435,7 +1435,7 @@ stmts:
 	lineno_stmt_or_labels
 		{
 		  if (pedantic && $1)
-		    pedwarn ("ANSI C forbids label at end of compound statement");
+		    pedwarn ("ISO C forbids label at end of compound statement");
 		}
 	;
 
@@ -1469,7 +1469,7 @@ maybe_label_decls:
 	  /* empty */
 	| label_decls
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids label declarations"); }
+		    pedwarn ("ISO C forbids label declarations"); }
 	;
 
 label_decls:
@@ -1780,7 +1780,7 @@ stmt:
 		}
 	| GOTO '*' expr ';'
 		{ if (pedantic)
-		    pedwarn ("ANSI C forbids `goto *expr;'");
+		    pedwarn ("ISO C forbids `goto *expr;'");
 		  stmt_count++;
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  expand_computed_goto (convert (ptr_type_node, $3)); }
@@ -1933,7 +1933,7 @@ parmlist_1:
 	| parms ';'
 		{ tree parm;
 		  if (pedantic)
-		    pedwarn ("ANSI C forbids forward parameter declarations");
+		    pedwarn ("ISO C forbids forward parameter declarations");
 		  /* Mark the forward decls as such.  */
 		  for (parm = getdecls (); parm; parm = TREE_CHAIN (parm))
 		    TREE_ASM_WRITTEN (parm) = 1;
@@ -1956,7 +1956,7 @@ parmlist_2:  /* empty */
 		     it caused problems with the code in expand_builtin which
 		     tries to verify that BUILT_IN_NEXT_ARG is being used
 		     correctly.  */
-		  error ("ANSI C requires a named argument before `...'");
+		  error ("ISO C requires a named argument before `...'");
 		}
 	| parms
 		{ $$ = get_parm_info (1); }
--- gcc/objc/Make-lang.in.jj	2000-07-31 20:02:22.000000000 +0200
+++ gcc/objc/Make-lang.in	2004-11-24 10:30:18.849517846 +0100
@@ -73,9 +73,9 @@ objc-parse.o : $(srcdir)/objc/objc-parse
 	-c $(srcdir)/objc/objc-parse.c
 
 $(INTL_TARGETS): $(srcdir)/objc/objc-parse.c
-$(srcdir)/objc/objc-parse.c : $(srcdir)/objc/objc-parse.y
-	cd $(srcdir)/objc; \
-	$(BISON) $(BISONFLAGS) -o objc-parse.c objc-parse.y
+#$(srcdir)/objc/objc-parse.c : $(srcdir)/objc/objc-parse.y
+#	cd $(srcdir)/objc; \
+#	$(BISON) $(BISONFLAGS) -o objc-parse.c objc-parse.y
 
 $(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in
 	echo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y
--- gcc/Makefile.in.jj	2004-08-01 15:22:29.000000000 +0200
+++ gcc/Makefile.in	2004-11-24 10:30:02.640413921 +0100
@@ -1075,9 +1075,9 @@ c-parse.o : $(srcdir)/c-parse.c $(CONFIG
     $(srcdir)/c-parse.h c-tree.h c-common.h input.h flags.h system.h \
     toplev.h output.h
 	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/c-parse.c
-$(srcdir)/c-parse.h: $(srcdir)/c-parse.c
-$(srcdir)/c-parse.c: $(srcdir)/c-parse.y
-	cd $(srcdir); $(BISON) $(BISONFLAGS) -d -o c-parse.c c-parse.y
+#$(srcdir)/c-parse.h: $(srcdir)/c-parse.c
+#$(srcdir)/c-parse.c: $(srcdir)/c-parse.y
+#	cd $(srcdir); $(BISON) $(BISONFLAGS) -d -o c-parse.c c-parse.y
 $(srcdir)/c-parse.y: c-parse.in
 	echo '/*WARNING: This file is automatically generated!*/' >tmp-c-parse.y
 	sed -e "/^ifobjc$$/,/^end ifobjc$$/d" \
@@ -1831,8 +1831,8 @@ tradcpp0$(exeext): tradcpp.o tradcif.o m
 tradcpp.o: tradcpp.c $(CONFIG_H) system.h version.h cppdefault.h
 tradcif.o: $(srcdir)/tradcif.c $(CONFIG_H) system.h
 
-$(srcdir)/tradcif.c: $(srcdir)/tradcif.y
-	cd $(srcdir); $(BISON) $(BISONFLAGS) -o tradcif.c tradcif.y
+#$(srcdir)/tradcif.c: $(srcdir)/tradcif.y
+#	cd $(srcdir); $(BISON) $(BISONFLAGS) -o tradcif.c tradcif.y
 
 # Note for the stamp targets, we run the program `true' instead of
 # having an empty command (nothing following the semicolon).
--- gcc/java/Makefile.in.jj	2004-08-01 15:22:30.000000000 +0200
+++ gcc/java/Makefile.in	2004-11-23 23:08:51.000000000 +0100
@@ -238,14 +238,14 @@ PARSE_C = $(PARSE_DIR)/parse.c
 PARSE_SCAN_C = $(PARSE_DIR)/parse-scan.c
 PARSE_H = $(srcdir)/parse.h
 
-$(PARSE_C):  $(srcdir)/parse.y
-	$(SET_BISON); \
-	cd $(PARSE_DIR) && $$bison -t $(BISONFLAGS) $(JAVABISONFLAGS) \
-	    -o parse.c $(PARSE_RELDIR)/parse.y
-$(PARSE_SCAN_C):  $(srcdir)/parse-scan.y
-	$(SET_BISON); \
-	cd $(PARSE_DIR) && $$bison -t $(BISONFLAGS) -o parse-scan.c \
-	    $(PARSE_RELDIR)/parse-scan.y
+#$(PARSE_C):  $(srcdir)/parse.y
+#	$(SET_BISON); \
+#	cd $(PARSE_DIR) && $$bison -t $(BISONFLAGS) $(JAVABISONFLAGS) \
+#	    -o parse.c $(PARSE_RELDIR)/parse.y
+#$(PARSE_SCAN_C):  $(srcdir)/parse-scan.y
+#	$(SET_BISON); \
+#	cd $(PARSE_DIR) && $$bison -t $(BISONFLAGS) -o parse-scan.c \
+#	    $(PARSE_RELDIR)/parse-scan.y
 
 lex.c: keyword.h lex.h
 
--- gcc/java/Make-lang.in.jj	2004-08-01 15:22:30.000000000 +0200
+++ gcc/java/Make-lang.in	2004-11-23 23:08:23.000000000 +0100
@@ -131,14 +131,14 @@ SET_BISON = here=`pwd`; sdir=`cd $(srcdi
 BISONFLAGS =
 JAVABISONFLAGS = --name-prefix=java_
 
-$(PARSE_C):  $(srcdir)/java/parse.y
-	$(SET_BISON); \
-	cd $(PARSE_DIR) && $$bison -t $(BISONFLAGS) $(JAVABISONFLAGS) \
-	    -o parse.c $(PARSE_RELDIR)/parse.y
-$(PARSE_SCAN_C):  $(srcdir)/java/parse-scan.y
-	$(SET_BISON); \
-	cd $(PARSE_DIR) && $$bison -t $(BISONFLAGS) -o parse-scan.c \
-	    $(PARSE_RELDIR)/parse-scan.y
+#$(PARSE_C):  $(srcdir)/java/parse.y
+#	$(SET_BISON); \
+#	cd $(PARSE_DIR) && $$bison -t $(BISONFLAGS) $(JAVABISONFLAGS) \
+#	    -o parse.c $(PARSE_RELDIR)/parse.y
+#$(PARSE_SCAN_C):  $(srcdir)/java/parse-scan.y
+#	$(SET_BISON); \
+#	cd $(PARSE_DIR) && $$bison -t $(BISONFLAGS) -o parse-scan.c \
+#	    $(PARSE_RELDIR)/parse-scan.y
 
 # This must be kept in sync with dependencies in Makefile.in.
 JV_SCAN_SOURCES = $(srcdir)/java/parse-scan.y $(srcdir)/java/lex.c \
