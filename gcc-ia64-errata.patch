2000-12-21  Bernd Schmidt  <bernds@redhat.com>

	* config/ia64/ia64.c (ia64_safe_type): New static function.

2001-02-08  Jakub Jelinek  <jakub@redhat.com>

	* config/ia64/ia64.c (last_group): Only 2 entries are needed.
	(emit_group_barrier_after): Remove group_idx handling.
	(errata_find_address_regs): load_group has only 2 entries.
	(errata_emit_nops): Likewise.  Clear last_group if nop was emitted.
	(fixup_errata): New static function.
	(emit_insn_group_barriers): Remove errata handling.
	(ia64_reorg): Call fixup_errata.

--- gcc/config/ia64/ia64.c.jj	Mon Feb  5 10:43:05 2001
+++ gcc/config/ia64/ia64.c	Thu Feb  8 17:41:58 2001
@@ -3498,6 +3498,18 @@ ia64_override_options ()
   ia64_add_gc_roots ();
 }
 
+static enum attr_type ia64_safe_type PARAMS((rtx));
+
+static enum attr_type
+ia64_safe_type (insn)
+     rtx insn;
+{
+  if (recog_memoized (insn) >= 0)
+    return get_attr_type (insn);
+  else
+    return TYPE_UNKNOWN;
+}
+
 /* The following collection of routines emit instruction group stop bits as
    necessary to avoid dependencies.  */
 
@@ -4063,7 +4075,7 @@ static struct group
 {
   HARD_REG_SET p_reg_set;
   HARD_REG_SET gr_reg_conditionally_set;
-} last_group[3];
+} last_group[2];
 
 /* Index into the last_group array.  */
 static int group_idx;
@@ -4071,6 +4083,7 @@ static int group_idx;
 static void emit_group_barrier_after PARAMS ((rtx));
 static int errata_find_address_regs PARAMS ((rtx *, void *));
 static void errata_emit_nops PARAMS ((rtx));
+static void fixup_errata PARAMS ((rtx));
 
 /* Create a new group barrier, emit it after AFTER, and advance group_idx.  */
 static void
@@ -4078,8 +4091,6 @@ emit_group_barrier_after (after)
      rtx after;
 {
   emit_insn_after (gen_insn_group_barrier (), after);
-  group_idx = (group_idx + 1) % 3;
-  memset (last_group + group_idx, 0, sizeof last_group[group_idx]);
 }
 
 /* Called through for_each_rtx; determines if a hard register that was
@@ -4098,7 +4109,7 @@ errata_find_address_regs (xp, data)
     x = XEXP (x, 0);
   if (GET_CODE (x) == REG)
     {
-      struct group *prev_group = last_group + (group_idx + 2) % 3;
+      struct group *prev_group = last_group + (group_idx ^ 1);
       if (TEST_HARD_REG_BIT (prev_group->gr_reg_conditionally_set,
 			     REGNO (x)))
 	return 1;
@@ -4115,7 +4126,7 @@ errata_emit_nops (insn)
      rtx insn;
 {
   struct group *this_group = last_group + group_idx;
-  struct group *prev_group = last_group + (group_idx + 2) % 3;
+  struct group *prev_group = last_group + (group_idx ^ 1);
   rtx pat = PATTERN (insn);
   rtx cond = GET_CODE (pat) == COND_EXEC ? COND_EXEC_TEST (pat) : 0;
   rtx real_pat = cond ? COND_EXEC_CODE (pat) : pat;
@@ -4175,6 +4186,34 @@ errata_emit_nops (insn)
       emit_insn_before (gen_insn_group_barrier (), insn);
       emit_insn_before (gen_nop (), insn);
       emit_insn_before (gen_insn_group_barrier (), insn);
+      group_idx = 0;
+      memset (last_group, 0, sizeof last_group);
+    }
+}
+
+static void
+fixup_errata (insns)
+     rtx insns;
+{
+  rtx insn;
+
+  if (!(TARGET_B_STEP || TARGET_A_STEP))
+    return;
+
+  group_idx = 0;
+  memset (last_group, 0, sizeof last_group);
+
+  for (insn = insns; insn; insn = NEXT_INSN (insn))
+    {
+      if (!INSN_P (insn))
+	continue;
+      if (ia64_safe_type (insn) == TYPE_S)
+	{
+	  group_idx ^= 1;
+	  memset (last_group + group_idx, 0, sizeof last_group[group_idx]);
+	}
+      else
+	errata_emit_nops (insn);
     }
 }
 
@@ -4189,18 +4228,12 @@ emit_insn_group_barriers (insns)
 
   memset (rws_sum, 0, sizeof (rws_sum));
 
-  group_idx = 0;
-  memset (last_group, 0, sizeof last_group);
-
   prev_insn = 0;
   for (insn = insns; insn; insn = NEXT_INSN (insn))
     {
       int need_barrier = 0;
       struct reg_flags flags;
 
-      if ((TARGET_B_STEP || TARGET_A_STEP) && INSN_P (insn))
-	errata_emit_nops (insn);
-
       memset (&flags, 0, sizeof (flags));
       switch (GET_CODE (insn))
 	{
@@ -4452,6 +4485,7 @@ ia64_reorg (insns)
 
   emit_predicate_relation_info (insns);
   emit_insn_group_barriers (insns);
+  fixup_errata (insns);
 }
 
 /* Return true if REGNO is used by the epilogue.  */
