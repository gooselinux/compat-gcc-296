2001-05-02  Jakub Jelinek  <jakub@redhat.com>

	* calls.c (expand_call): If expanding the tail or normal call insns
	creates any new catch clauses, signal a sibcall failure and for the
	tail call chain remove the clauses.
	* Makefile.in (calls.o): Add except.h dependency.

	* g++.old-deja/g++.eh/catch13.C: New test.

--- gcc/calls.c.jj	Fri Apr 27 13:39:50 2001
+++ gcc/calls.c	Wed May  2 13:24:00 2001
@@ -24,6 +24,7 @@ Boston, MA 02111-1307, USA.  */
 #include "rtl.h"
 #include "tree.h"
 #include "flags.h"
+#include "except.h"
 #include "expr.h"
 #include "function.h"
 #include "regs.h"
@@ -2611,6 +2612,7 @@ expand_call (exp, target, ignore)
       int save_stack_pointer_delta = 0;
       rtx insns;
       rtx before_call, next_arg_reg;
+      rtx last_catch_clauses = catch_clauses_last;
 
       if (pass == 0)
 	{
@@ -3189,6 +3191,26 @@ expand_call (exp, target, ignore)
 	      && REGNO (target) < FIRST_PSEUDO_REGISTER)
 	    target = 0;
 	  sibcall_failure = 1;
+	}
+
+      /* If there were any catch clauses created when expanding
+	 the call, we cannot produce a tail call, since there would be
+	 jumps to non-existant instructions from the other call chain.
+	 If expanding the tail call chain, we need even to remove
+	 the added catch clauses.  */
+      if (catch_clauses_last != last_catch_clauses)
+	{
+	  sibcall_failure = 1;
+	  if (pass == 0)
+	    {
+	      if (last_catch_clauses)
+		{
+		  NEXT_INSN (last_catch_clauses) = NULL_RTX;
+		  catch_clauses_last = last_catch_clauses;
+		}
+	      else
+		catch_clauses = catch_clauses_last = NULL_RTX;
+	    }
 	}
 
       if (TYPE_MODE (TREE_TYPE (exp)) == VOIDmode
--- gcc/Makefile.in.jj	Fri Apr 27 13:40:00 2001
+++ gcc/Makefile.in	Wed May  2 13:32:33 2001
@@ -1275,7 +1275,7 @@ builtins.o : builtins.c $(CONFIG_H) syst
    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \
    except.h
 calls.o : calls.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h $(EXPR_H) \
-   insn-flags.h $(REGS_H) toplev.h output.h function.h $(TIMEVAR_H)
+   insn-flags.h $(REGS_H) toplev.h output.h function.h except.h $(TIMEVAR_H)
 expmed.o : expmed.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h  \
    insn-flags.h insn-config.h insn-codes.h $(EXPR_H) $(RECOG_H) real.h toplev.h
 explow.o : explow.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \
--- gcc/testsuite/g++.old-deja/g++.eh/catch13.C.jj	Wed May  2 13:26:47 2001
+++ gcc/testsuite/g++.old-deja/g++.eh/catch13.C	Wed May  2 13:30:23 2001
@@ -0,0 +1,19 @@
+// Copyright (C) 2001 Free Software Foundation, Inc.
+// Contributed by Jakub Jelinek 2 May 2001 <jakub@redhat.com>
+
+// Build don't link:
+// Special g++ Options: -O2
+
+struct A;
+
+A *foo();
+
+struct A {
+  A *a() { try { return foo(); } catch (...) {} }
+  void b();
+  void c();
+};
+
+void A::b() {
+  a()->c();
+}
