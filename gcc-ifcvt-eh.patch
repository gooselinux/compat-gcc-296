2001-02-18  Richard Henderson  <rth@redhat.com>

	* ifcvt.c (dead_or_predicable): Don't move code if eh regions
	would be disrupted.

2001-08-20  Jakub Jelinek  <jakub@redhat.com>

	* g++.old-deja/g++.other/eh3.C: New test.

--- gcc/ifcvt.c	2000/12/27 18:22:51	1.37
+++ gcc/ifcvt.c	2001/02/18 20:06:51	1.38
@@ -1855,6 +1855,15 @@ dead_or_predicable (test_bb, merge_bb, o
 {
   rtx head, end, jump, earliest, old_dest;
 
+  /* No code movement can occur if we'd be scrogging EH regions.
+     Within MERGE_BB, ensure that we've not got stray EH_BEG or EH_END
+     notes within the block.  Between the blocks, checking that the end
+     region numbers match ensures that we won't disrupt the nesting
+     between regions.  */
+  if (merge_bb->eh_beg != merge_bb->eh_end
+      || merge_bb->eh_end != test_bb->eh_end)
+    return FALSE;
+
   jump = test_bb->end;
 
   /* Find the extent of the real code in the merge block.  */
--- gcc/testsuite/g++.old-deja/g++.other/eh3.C.jj	Mon Aug 20 20:35:23 2001
+++ gcc/testsuite/g++.old-deja/g++.other/eh3.C	Mon Aug 20 20:35:39 2001
@@ -0,0 +1,34 @@
+// Build don't link:
+// Special g++ Options: -O2
+
+struct X {};
+
+struct Y
+{
+  Y();
+  virtual ~Y();
+};
+
+struct Z
+{
+  int f (const int *x);
+  int g;
+};
+
+inline int
+operator<< (Z &os, int x)
+{
+  os.f (&x);
+  return os.g;
+}
+
+void foo (Z &a, X *b, X &c)
+{
+  X *d = b;
+  int e = 0;
+  Z &f = a;
+  if (!(f << e))
+    do { do { } while (&c == 0); throw Y(); } while (0);
+  do { } while (&d == 0);
+  do { } while (&c == 0);
+}
