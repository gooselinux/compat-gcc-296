2001-09-03  Jakub Jelinek  <jakub@redhat.com>

	* sstream (std::stringbuf::seekoff): New.
	(std::stringbuf::seekpos): New.
	(std::istringstream::seekg): New.
	(std::istringstream::tellg): New.
	(std::ostringstream::seekp): New.
	(std::ostringstream::tellp): New.
	(std::stringstream::seekg): New.
	(std::stringstream::tellg): New.
	(std::stringstream::seekp): New.
	(std::stringstream::tellp): New.

--- libstdc++/sstream.jj	Mon Aug 20 22:27:08 2001
+++ libstdc++/sstream	Mon Sep  3 12:54:02 2001
@@ -80,6 +80,8 @@ namespace std
 	}
       rpos = (mode & ios::ate ? s.size() : 0);
     }
+    inline streampos seekoff(streamoff o, _seek_dir d, int mode=ios::in|ios::out);
+    inline streampos seekpos(streampos pos, int mode = ios::in|ios::out);
 
   protected:
     inline virtual int sync();
@@ -134,6 +136,15 @@ namespace std
     istringstream(const std::string& s, int which=ios::in) :
       stringstreambase(s, which)
     { }
+
+    istringstream& seekg(streampos pos)
+    { pos = __my_sb.seekpos(pos, ios::in); if (pos == streampos(EOF)) set(ios::badbit); return *this; }
+
+    istringstream& seekg(streamoff off, _seek_dir dir)
+    { off = __my_sb.seekoff(off, dir, ios::in); if (off == streamoff(EOF)) set(ios::badbit); return *this; }
+
+    streampos tellg()
+    { streampos pos = __my_sb.seekoff(0, ios::cur, ios::in); if (pos == streampos(EOF)) set(ios::badbit); return pos; }
   };
     
   class ostringstream : public stringstreambase, public ostream {
@@ -145,6 +156,15 @@ namespace std
     ostringstream(const std::string& s, int which=ios::out) :
       stringstreambase(s, which)
     { }
+
+    ostringstream& seekp(streampos pos)
+    { pos = __my_sb.seekpos(pos, ios::out); if (pos == streampos(EOF)) set(ios::badbit); return *this; }
+
+    ostringstream& seekp(streamoff off, _seek_dir dir)
+    { off = __my_sb.seekoff(off, dir, ios::out); if (off == streamoff(EOF)) set(ios::badbit); return *this; }
+
+    streampos tellp()
+    { streampos pos = __my_sb.seekoff(0, ios::cur, ios::out); if (pos == streampos(EOF)) set(ios::badbit); return pos; }
   };
     
   class stringstream : public stringstreambase, public iostream {
@@ -156,6 +176,24 @@ namespace std
     stringstream(const std::string &s, int which=ios::in|ios::out) :
       stringstreambase(s, which)
     { }
+
+    stringstream& seekg(streampos pos)
+    { pos = __my_sb.seekpos(pos, ios::in); if (pos == streampos(EOF)) set(ios::badbit); return *this; }
+
+    stringstream& seekg(streamoff off, _seek_dir dir)
+    { off = __my_sb.seekoff(off, dir, ios::in); if (off == streamoff(EOF)) set(ios::badbit); return *this; }
+
+    streampos tellg()
+    { streampos pos = __my_sb.seekoff(0, ios::cur, ios::in); if (pos == streampos(EOF)) set(ios::badbit); return pos; }
+
+    stringstream& seekp(streampos pos)
+    { pos = __my_sb.seekpos(pos, ios::out); if (pos == streampos(EOF)) set(ios::badbit); return *this; }
+
+    stringstream& seekp(streamoff off, _seek_dir dir)
+    { off = __my_sb.seekoff(off, dir, ios::out); if (off == streamoff(EOF)) set(ios::badbit); return *this; }
+
+    streampos tellp()
+    { streampos pos = __my_sb.seekoff(0, ios::cur, ios::out); if (pos == streampos(EOF)) set(ios::badbit); return pos; }
   };
 }
 
@@ -189,11 +227,7 @@ inline int std::stringbuf::overflow(int 
 
   if(ch != EOF)
     {
-      std::string::size_type oldSize = buf.size();
-      
       buf.replace(rpos, std::string::npos, ch);
-      if(buf.size() - oldSize != 1)
-	return EOF;
       ++rpos;
     }
   return 0;
@@ -222,4 +256,27 @@ inline int std::stringbuf::underflow()
   return res;
 }
 
+inline streampos std::stringbuf::seekoff(streamoff o, _seek_dir d, int mode=ios::in|ios::out)
+{
+  sync();
+  streamoff newpos = rpos;
+  switch (d)
+    {
+    case ios::beg: newpos = o; break;
+    case ios::cur: if ((mode & (ios::in|ios::out)) == (ios::in|ios::out))
+		     return streampos(EOF);
+		   newpos += o; break;
+    case ios::end: newpos = buf.size() + o; break;
+    }
+  if (newpos < 0 || newpos > buf.size())
+    return streampos(EOF);
+  rpos = newpos;
+  return newpos;
+}
+
+inline streampos std::stringbuf::seekpos(streampos pos, int mode = ios::in|ios::out)
+{
+  return seekoff(pos, ios::beg, mode);
+}
+
 #endif /* not __STRSTREAM__ */
