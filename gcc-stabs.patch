2000-12-30  Richard Henderson  <rth@redhat.com>

	* dbxout.c (dbxout_block): Invert logic on eliding LBRAC/RBRAC.
	Initialize variables properly for DBX_LBRAC_FIRST.

*** gcc/dbxout.c	2000/12/02 00:18:46	1.69
--- gcc/dbxout.c	2000/12/30 18:48:20
*************** dbxout_block (block, depth, args)
*** 2641,2647 ****
       tree args;
  {
    int blocknum = -1;
-   int ignored;
  
  #if DBX_BLOCKS_FUNCTION_RELATIVE
    const char *begin_label; 
--- 2641,2646 ----
*************** dbxout_block (block, depth, args)
*** 2656,2667 ****
        /* Ignore blocks never expanded or otherwise marked as real.  */
        if (TREE_USED (block) && TREE_ASM_WRITTEN (block))
  	{
! #ifndef DBX_LBRAC_FIRST
  	  /* In dbx format, the syms of a block come before the N_LBRAC.
  	     If nothing is output, we don't need the N_LBRAC, either. */
! 	  ignored = 1;
  	  if (debug_info_level != DINFO_LEVEL_TERSE || depth == 0)
! 	    ignored = dbxout_syms (BLOCK_VARS (block));
  	  if (args)
  	    dbxout_reg_parms (args);
  #endif
--- 2655,2670 ----
        /* Ignore blocks never expanded or otherwise marked as real.  */
        if (TREE_USED (block) && TREE_ASM_WRITTEN (block))
  	{
! 	  int did_output;
! 
! #ifdef DBX_LBRAC_FIRST
! 	  did_output = 1;
! #else
  	  /* In dbx format, the syms of a block come before the N_LBRAC.
  	     If nothing is output, we don't need the N_LBRAC, either. */
! 	  did_output = 0;
  	  if (debug_info_level != DINFO_LEVEL_TERSE || depth == 0)
! 	    did_output = dbxout_syms (BLOCK_VARS (block));
  	  if (args)
  	    dbxout_reg_parms (args);
  #endif
*************** dbxout_block (block, depth, args)
*** 2670,2676 ****
  	     the block.  Use the block's tree-walk order to generate
  	     the assembler symbols LBBn and LBEn
  	     that final will define around the code in this block.  */
! 	  if (depth > 0 && !ignored)
  	    {
  	      char buf[20];
  	      blocknum = BLOCK_NUMBER (block);
--- 2673,2679 ----
  	     the block.  Use the block's tree-walk order to generate
  	     the assembler symbols LBBn and LBEn
  	     that final will define around the code in this block.  */
! 	  if (depth > 0 && did_output)
  	    {
  	      char buf[20];
  	      blocknum = BLOCK_NUMBER (block);
*************** dbxout_block (block, depth, args)
*** 2720,2726 ****
  	  dbxout_block (BLOCK_SUBBLOCKS (block), depth + 1, NULL_TREE);
  
  	  /* Refer to the marker for the end of the block.  */
! 	  if (depth > 0 && !ignored)
  	    {
  	      char buf[20];
  	      ASM_GENERATE_INTERNAL_LABEL (buf, "LBE", blocknum);
--- 2723,2729 ----
  	  dbxout_block (BLOCK_SUBBLOCKS (block), depth + 1, NULL_TREE);
  
  	  /* Refer to the marker for the end of the block.  */
! 	  if (depth > 0 && did_output)
  	    {
  	      char buf[20];
  	      ASM_GENERATE_INTERNAL_LABEL (buf, "LBE", blocknum);

