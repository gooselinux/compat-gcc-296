2001-02-06  Neil Booth  <neil@daikokuya.demon.co.uk>

        * cppmacro.c (cpp_get_token): Avoid pasting after a builtin.

	* gcc.dg/cpp/avoidpaste1.c: Update.

--- gcc/cppmacro.c	2001/02/04 08:29:46	1.43
+++ gcc/cppmacro.c	2001/02/06 19:07:27	1.44
@@ -965,6 +965,7 @@ cpp_get_token (pfile, token)
 	  if (node->flags & NODE_BUILTIN)
 	    {
 	      builtin_macro (pfile, token);
+	      pfile->buffer->saved_flags = AVOID_LPASTE;
 	      break;
 	    }
 
--- gcc/testsuite/gcc.dg/cpp/avoidpaste1.c	2001/01/31 07:50:11	1.3
+++ gcc/testsuite/gcc.dg/cpp/avoidpaste1.c	2001/02/06 19:09:39	1.4
@@ -15,19 +15,19 @@
 /* This should preprocess as
 
 :: : : : : :^: 1.0e- 1
-: : : .. . 0
+: : : .. . 0 0 .
 
 It relies on the fact that even when preprocessing C we bother to separate
 the colons of C++'s :: operator.  If we confine this behaviour to C++
 in future, this test needs to change.  */
 
 :: :g: :f(): :f(^): tricky
-:f(:): .. .__INCLUDE_LEVEL__	/* Check builtins, too.  */
+:f(:): .. .__INCLUDE_LEVEL__ __INCLUDE_LEVEL__. /* Check builtins, too.  */
 
 /*
    { dg-final { if ![file exists avoidpaste1.i] { return }                } }
    { dg-final { if { [grep avoidpaste1.i ":: : : : : :\\^: 1.0e- 1"] != "" } \{   } }
-   { dg-final { if { [grep avoidpaste1.i ": : : \\\.\\\. \\\. 0"] != "" } \{  } }
+   { dg-final { if { [grep avoidpaste1.i ": : : \\\.\\\. \\\. 0 0 \\\."] != "" } \{  } }
    { dg-final { return \} \}                                              } }
    { dg-final { fail "avoidpaste1.c: paste avoidance"                     } }
 */
