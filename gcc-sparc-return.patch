2001-12-07  Stephane Carrez  <Stephane.Carrez@sun.com>

        * config/sparc/sparc.c (epilogue_renumber): Do not replace %fp
        with %sp because it can cause the delayed instruction to load
        below the stack.

        * gcc.dg/sparc-ret.c: New file, test return corruption bug for
        ultrasparc.

--- gcc/config/sparc/sparc.c	2001/12/06 12:05:44	1.169
+++ gcc/config/sparc/sparc.c	2001/12/07 21:47:53	1.170
@@ -5427,6 +5427,30 @@ epilogue_renumber (where, test)
     case CONST_DOUBLE:
       return 0;
 
+      /* Do not replace the frame pointer with the stack pointer because
+	 it can cause the delayed instruction to load below the stack.
+	 This occurs when instructions like:
+
+	 (set (reg/i:SI 24 %i0)
+	     (mem/f:SI (plus:SI (reg/f:SI 30 %fp)
+                       (const_int -20 [0xffffffec])) 0))
+
+	 are in the return delayed slot.  */
+    case PLUS:
+      if (GET_CODE (XEXP (*where, 0)) == REG
+	  && REGNO (XEXP (*where, 0)) == FRAME_POINTER_REGNUM
+	  && (GET_CODE (XEXP (*where, 1)) != CONST_INT
+	      || INTVAL (XEXP (*where, 1)) < SPARC_STACK_BIAS))
+	return 1;
+      break;
+
+    case MEM:
+      if (SPARC_STACK_BIAS
+	  && GET_CODE (XEXP (*where, 0)) == REG
+	  && REGNO (XEXP (*where, 0)) == FRAME_POINTER_REGNUM)
+	return 1;
+      break;
+
     default:
       break;
     }
--- gcc/testsuite/gcc.dg/sparc-ret.c	Thu Aug 30 22:30:55 2001
+++ gcc/testsuite/gcc.dg/sparc-ret.c	Fri Dec  7 22:51:04 2001
@@ -0,0 +1,27 @@
+/* Copyright (C) 2001  Free Software Foundation.
+
+   Making sure that Ultrasparc return instructions do not read
+   below the stack.  */
+
+/* { dg-do compile { target sparc*-*-* } } */
+/* { dg-options "-mcpu=ultrasparc -O -m32" } */
+
+
+int bar (int a, int b, int c, int d, int e, int f, int g, int h)
+{
+  int res;
+
+  toto (&res);
+  return h;
+}
+/* { dg-final { scan-assembler "return\[ \t\]*%i7\\+8\n\[^\n\]*ld\[ \t\]*\\\[%sp\\+96\\\]" } } */
+
+int bar2 ()
+{
+  int res;
+
+  toto (&res);
+  return res;
+}
+/* { dg-final { scan-assembler "return\[ \t\]*%i7\\+8\n\[^\n\]*nop" } } */
+
