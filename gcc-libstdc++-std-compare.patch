2003-11-26  Jason Merrill  <jason@redhat.com>

	* std/bastring.h (basic_string::compare): Add standard-compliant
	overloads.

--- libstdc++/std/bastring.h.jj	Thu Dec  4 10:32:22 2003
+++ libstdc++/std/bastring.h	Thu Dec  4 11:54:18 2003
@@ -416,12 +416,23 @@ public:
   basic_string substr (size_type pos = 0, size_type n = npos) const
     { return basic_string (*this, pos, n); }
 
+  // Obsolete compare overloads, retained for backward compatibility.
   int compare (const basic_string& str, size_type pos = 0, size_type n = npos) const;
-  // There is no 'strncmp' equivalent for charT pointers.
   int compare (const charT* s, size_type pos, size_type n) const;
   int compare (const charT* s, size_type pos = 0) const
     { return compare (s, pos, traits::length (s)); }
 
+  // Standard-compliant compare overloads.
+  int compare (size_type pos, size_type n, const basic_string& str) const
+    { return compare (str, pos, n); }
+  int compare (size_type pos, size_type n, const basic_string& str,
+	       size_type pos2, size_type n2) const
+    { return compare (basic_string (str, pos2, n2), pos, n); }
+  int compare (size_type pos, size_type n, const charT* s) const
+    { return compare (basic_string (s), pos, n); }
+  int compare (size_type pos, size_type n, const charT* s, size_type n2) const
+    { return compare (basic_string (s, n2), pos, n); }
+
   iterator begin () { selfish (); return &(*this)[0]; }
   iterator end () { selfish (); return &(*this)[length ()]; }
 
