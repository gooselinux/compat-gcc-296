2001-08-30  Jakub Jelinek  <jakub@redhat.com>

	* config/ia64/fde-glibc.c: New.
	* config/ia64/frame-ia64.c: Use _Unwind_FindTableEntry to implement
	find_fde, provide dummy register/deregister functions for backwards
	compatibility.
	* config/ia64/unwind-ia64.h: New.
	* config/ia64/ia64.h (ASM_OUTPUT_XDATA_CHAR, ASM_OUTPUT_XDATA_SHORT,
	ASM_OUTPUT_XDATA_INT, ASM_OUTPUT_XDATA_DOUBLE_INT): Rename SECTION
	argument to PREFIX.
	(IA64_OUTPUT_EH_SECTION): New helper macro.
	(ASM_OUTPUT_EH_CHAR, ASM_OUTPUT_EH_SHORT, ASM_OUTPUT_EH_INT,
	ASM_OUTPUT_EH_DOUBLE_INT): Use it.

--- gcc/config/ia64/fde-glibc.c.jj	Tue Aug 28 11:12:01 2001
+++ gcc/config/ia64/fde-glibc.c	Thu Aug  9 18:38:43 2001
@@ -0,0 +1,162 @@
+/* Copyright (C) 2000, 2001 Free Software Foundation, Inc.
+   Contributed by Richard Henderson <rth@cygnus.com>.
+
+   This file is part of GNU CC.
+
+   GNU CC is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   GNU CC is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with GNU CC; see the file COPYING.  If not, write to
+   the Free Software Foundation, 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* As a special exception, if you link this library with other files,
+   some of which are compiled with GCC, to produce an executable,
+   this library does not by itself cause the resulting executable
+   to be covered by the GNU General Public License.
+   This exception does not however invalidate any other reasons why
+   the executable file might be covered by the GNU General Public License.  */
+
+/* Locate the FDE entry for a given address, using glibc ld.so routines
+   to avoid register/deregister calls at DSO load/unload.  */
+
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE
+#endif
+#include "config.h"
+#include <stddef.h>
+#include <stdlib.h>
+#include <link.h>
+#include "unwind-ia64.h"
+
+#if __GLIBC__ < 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ < 2) \
+    || (__GLIBC__ == 2 && __GLIBC_MINOR__ == 2 && !defined(DT_CONFIG))
+# error You need GLIBC 2.2.4 or later on IA-64 Linux
+#endif
+
+struct unw_ia64_callback_data
+{
+  Elf64_Addr pc;
+  unsigned long *segment_base;
+  unsigned long *gp;
+  struct unw_table_entry *ret;
+};
+
+static int
+_Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)
+{
+  struct unw_ia64_callback_data *data = (struct unw_ia64_callback_data *) ptr;
+  const Elf64_Phdr *phdr, *p_unwind, *p_dynamic;
+  long n, match;
+  Elf64_Addr load_base, seg_base;
+  struct unw_table_entry *f_base, *f;
+  size_t lo, hi;
+
+  /* Make sure struct dl_phdr_info is at least as big as we need.  */
+  if (size < offsetof (struct dl_phdr_info, dlpi_phnum)
+	     + sizeof (info->dlpi_phnum))
+    return -1;
+
+  match = 0;
+  phdr = info->dlpi_phdr;
+  load_base = info->dlpi_addr;
+  p_unwind = NULL;
+  p_dynamic = NULL;
+  seg_base = ~(Elf64_Addr) 0;
+
+  /* See if PC falls into one of the loaded segments.  Find the unwind
+     segment at the same time.  */
+  for (n = info->dlpi_phnum; --n >= 0; phdr++)
+    {
+      if (phdr->p_type == PT_LOAD)
+	{
+	  Elf64_Addr vaddr = phdr->p_vaddr + load_base;
+	  if (data->pc >= vaddr && data->pc < vaddr + phdr->p_memsz)
+	    match = 1;
+	  if (vaddr < seg_base)
+	    seg_base = vaddr;
+	}
+      else if (phdr->p_type == PT_IA_64_UNWIND)
+	p_unwind = phdr;
+      else if (phdr->p_type == PT_DYNAMIC)
+	p_dynamic = phdr;
+    }
+  if (!match || !p_unwind)
+    return 0;
+
+  /* Search for the FDE within the unwind segment.  */
+
+  f_base = (struct unw_table_entry *) (p_unwind->p_vaddr + load_base);
+  lo = 0;
+  hi = p_unwind->p_memsz / sizeof (struct unw_table_entry);
+
+  while (lo < hi)
+    {
+      size_t mid = (lo + hi) / 2;
+
+      f = f_base + mid;
+      if (data->pc < f->start_offset + seg_base)
+	hi = mid;
+      else if (data->pc >= f->end_offset + seg_base)
+	lo = mid + 1;
+      else
+        goto found;
+    }
+  return 0;
+
+ found:
+  *data->segment_base = seg_base;
+  *data->gp = 0;
+  data->ret = f;
+
+  if (p_dynamic)
+    {
+      /* For dynamicly linked executables and shared libraries,
+	 DT_PLTGOT is the gp value for that object.  */
+      Elf64_Dyn *dyn = (Elf64_Dyn *)(p_dynamic->p_vaddr + load_base);
+      for (; dyn->d_tag != DT_NULL ; dyn++)
+	if (dyn->d_tag == DT_PLTGOT)
+	  {
+	    /* On IA-64, _DYNAMIC is writable and GLIBC has relocated it.  */
+	    *data->gp = dyn->d_un.d_ptr;
+	    break;
+	  }
+    }
+  else
+    {
+      /* Otherwise this is a static executable with no _DYNAMIC.
+	 The gp is constant program-wide.  */
+      register unsigned long gp __asm__("gp");
+      *data->gp = gp;
+    }
+
+  return 1;
+}
+
+/* Return a pointer to the unwind table entry for the function
+   containing PC.  */
+
+struct unw_table_entry *
+_Unwind_FindTableEntry (void *pc, unsigned long *segment_base,
+                        unsigned long *gp)
+{
+  struct unw_ia64_callback_data data;
+
+  data.pc = (Elf64_Addr) pc;
+  data.segment_base = segment_base;
+  data.gp = gp;
+  data.ret = NULL;
+
+  if (dl_iterate_phdr (_Unwind_IteratePhdrCallback, &data) < 0)
+    return NULL;
+
+  return data.ret;
+}
--- gcc/config/ia64/frame-ia64.c.jj	Fri Aug 24 17:34:19 2001
+++ gcc/config/ia64/frame-ia64.c	Tue Aug 28 11:48:30 2001
@@ -55,14 +55,6 @@ extern void free (void *);
 #endif
 
 #include "defaults.h"
-#include "gthr.h"
-
-/* Define a mutex for frame information modification. */
-#ifdef __GTHREAD_MUTEX_INIT
-static __gthread_mutex_t object_mutex = __GTHREAD_MUTEX_INIT;
-#else
-static __gthread_mutex_t object_mutex;
-#endif
 
 /* This is undefined below if we need it to be an actual function.  */
 #define init_object_mutex_once()
@@ -77,137 +69,69 @@ typedef unsigned char ubyte;
 
 static void bad_record (unsigned char*, int) __attribute__ ((__noreturn__));
 
-#if __GTHREADS
-#ifdef __GTHREAD_MUTEX_INIT_FUNCTION
+/* This structure represents a single unwind table entry.  We lie and say
+   its the dwarf_fde structure to use the common object in frame.h */
+#include "config/ia64/unwind-ia64.h"
+
+typedef struct unw_table_entry fde;
 
-/* Helper for init_object_mutex_once.  */
+#include "frame.h"
 
-static void
-init_object_mutex (void)
+/* Called from crtbegin.o to register the unwind info for an object.  */
+void
+__register_frame_info (void *begin ATTRIBUTE_UNUSED, struct object *ob ATTRIBUTE_UNUSED)
 {
-  __GTHREAD_MUTEX_INIT_FUNCTION (&object_mutex);
 }
 
-/* Call this to arrange to initialize the object mutex.  */
-
-#undef init_object_mutex_once
-static void
-init_object_mutex_once (void)
+void
+__register_frame (void *begin ATTRIBUTE_UNUSED)
 {
-  static __gthread_once_t once = __GTHREAD_ONCE_INIT;
-  __gthread_once (&once, init_object_mutex);
 }
 
-#endif /* __GTHREAD_MUTEX_INIT_FUNCTION */
-#endif /* __GTHREADS */
+/* Similar, but BEGIN is actually a pointer to a table of unwind entries
+   for different translation units.  Called from the file generated by
+   collect2.  */
 
-/* This structure represents a single unwind table entry.  We lie and say
-   its the dwarf_fde structure to use the common object in frame.h */
+void
+__register_frame_info_table (void *begin ATTRIBUTE_UNUSED, struct object *ob ATTRIBUTE_UNUSED)
+{
+}
 
-typedef struct dwarf_fde
+void
+__register_frame_table (void *begin ATTRIBUTE_UNUSED)
 {
-  long start_offset;
-  long end_offset;
-  long unwind_offset;
-} unwind_table_entry;
-  
-/* Defining dwarf_fde allows us to use the common object registration.  */
-typedef unwind_table_entry dwarf_fde;
-typedef unwind_table_entry fde;
+}
 
-#include "frame.h" 
+/* Called from crtbegin.o to deregister the unwind info for an object.  */
 
-static struct object *objects = NULL;
+void *
+__deregister_frame_info (void *begin ATTRIBUTE_UNUSED)
+{
+  return 0;
+}
 
-static inline saddr
-fde_compare (fde *x, fde *y)
+void
+__deregister_frame (void *begin ATTRIBUTE_UNUSED)
 {
-  return (saddr)x->start_offset - (saddr)y->start_offset;
 }
 
-#include "frame.c"
 
 /* called from crtend.o to register the end of the unwind info for an
    object.  */
+void __register_frame_info_aux (struct unw_table_entry *);
+
 void
-__register_frame_info_aux (struct dwarf_fde *end)
+__register_frame_info_aux (struct unw_table_entry *end ATTRIBUTE_UNUSED)
 {
-  objects->fde_end = end;
 }
   
-static void
-frame_init (struct object *ob)
-{
-  int count = 0;  /* reserve one for the dummy last entry.  */
-  fde_accumulator accu;
-  unwind_table_entry *ptr = ob->fde_begin;
-
-  if (ptr == 0)
-    return;
-
-  /* Count the number of entries objects.  */
-  for ( ; ptr < ob->fde_end; ptr++)
-    count++;
-
-  ob->pc_begin = (void *)(uaddr) - 1;
-  ob->pc_end = 0;
-
-  start_fde_sort (&accu, count);
-  for (ptr = ob->fde_begin; ptr < ob->fde_end; ptr++)
-  {
-    if (ob->pc_base + ptr->start_offset < ob->pc_begin)
-      ob->pc_begin = ob->pc_base + ptr->start_offset;
-    if (ob->pc_base + ptr->end_offset > ob->pc_end)
-      ob->pc_end = ob->pc_base + ptr->end_offset;
-    fde_insert (&accu, (fde *)ptr);
-  }
-
-  ob->fde_array = end_fde_sort (&accu, count);
-  ob->count = count;
-}
-
 /* Return a pointer to the FDE for the function containing PC.  */
 
 static fde *
 find_fde (void *pc, void **pc_base)
 {
-  struct object *ob;
-  size_t lo, hi;
-
-  *pc_base = NULL;
-
-  init_object_mutex_once ();
-  __gthread_mutex_lock (&object_mutex);
-
-  for (ob = objects; ob; ob = ob->next)
-    {
-      if (ob->pc_begin == 0)
-	frame_init (ob);
-      if (pc >= ob->pc_begin && pc < ob->pc_end)
-	break;
-    }
-
-  __gthread_mutex_unlock (&object_mutex);
-
-  if (ob == 0)
-    return 0;
-
-  *pc_base = ob->pc_base;
-  /* Standard binary search algorithm.  */
-  for (lo = 0, hi = ob->count; lo < hi; )
-    {
-      size_t i = (lo + hi) / 2;
-      fde *f = ob->fde_array[i];
-
-      if (pc - ob->pc_base < f->start_offset)
-	hi = i;
-      else if (pc - ob->pc_base >= f->end_offset)
-	lo = i + 1;
-      else
-	return f;
-    }
-
-  return 0;
+  unsigned long gp;
+  return (fde *) _Unwind_FindTableEntry (pc, (unsigned long *) pc_base, &gp);
 }
 
 /* Decode the unsigned LEB128 constant at BUF and return it. The value at
@@ -1334,7 +1258,7 @@ __build_ia64_frame_state (pc, frame, bsp
   int region_offset = 0;
   int last_region_size = 0;
   void *addr, *end;
-  unwind_table_entry *entry;
+  struct unw_table_entry *entry;
   unsigned char *start_pc;
   void *pc_base;
   int pc_offset;
@@ -1345,7 +1269,7 @@ __build_ia64_frame_state (pc, frame, bsp
     return 0;
 
   start_pc = pc_base + entry->start_offset;
-  unw_info_ptr = ((struct unwind_info_ptr *)(pc_base + entry->unwind_offset));
+  unw_info_ptr = ((struct unwind_info_ptr *)(pc_base + entry->info_offset));
   addr = unw_info_ptr->unwind_descriptors;
   end = addr + IA64_UNW_HDR_LENGTH (unw_info_ptr->header) * 8;
   pc_offset = (pc - start_pc) / 16 * 3;
--- gcc/config/ia64/unwind-ia64.h.jj	Tue Aug 28 11:12:58 2001
+++ gcc/config/ia64/unwind-ia64.h	Sat May 12 08:03:20 2001
@@ -0,0 +1,31 @@
+/* Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.
+   Contributed by Andrew MacLeod  <amacleod@cygnus.com>
+                  Andrew Haley  <aph@cygnus.com>
+
+   This file is part of GNU CC.
+
+   GNU CC is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   GNU CC is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with GNU CC; see the file COPYING.  If not, write to
+   the Free Software Foundation, 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+struct unw_table_entry
+{
+  unsigned long start_offset;
+  unsigned long end_offset;
+  unsigned long info_offset;
+};
+
+extern struct unw_table_entry *
+_Unwind_FindTableEntry (void *pc, unsigned long *segment_base,
+			unsigned long *gp);
--- gcc/config/ia64/t-ia64.jj	Fri Aug 24 17:34:19 2001
+++ gcc/config/ia64/t-ia64	Tue Aug 28 11:35:30 2001
@@ -39,5 +39,5 @@ crtendS.o: $(srcdir)/config/ia64/crtend.
 	$(GCC_FOR_TARGET) -DSHARED -c -o crtendS.o -x assembler-with-cpp $(srcdir)/config/ia64/crtend.asm
 
 EXTRA_HEADERS = $(srcdir)/config/ia64/ia64intrin.h
-LIB2ADDEH = $(srcdir)/config/ia64/frame-ia64.c
+LIB2ADDEH = $(srcdir)/config/ia64/frame-ia64.c $(srcdir)/config/ia64/fde-glibc.c
 
--- gcc/config/ia64/ia64.h.jj	Fri Aug 24 17:34:25 2001
+++ gcc/config/ia64/ia64.h	Wed Aug 29 17:06:44 2001
@@ -2088,9 +2088,9 @@ do {									\
 /* This is how to output an assembler line defining a `char' constant
    to an xdata segment.  */
 
-#define ASM_OUTPUT_XDATA_CHAR(FILE, SECTION, SUFFIX, VALUE)		\
+#define ASM_OUTPUT_XDATA_CHAR(FILE, PREFIX, SUFFIX, VALUE)		\
 do {									\
-  fprintf (FILE, "\t.xdata1\t\"%s%s\", ", SECTION, SUFFIX);		\
+  fprintf (FILE, "\t.xdata1\t\"%s%s\", ", PREFIX, SUFFIX);		\
   output_addr_const (FILE, (VALUE));					\
   fprintf (FILE, "\n");							\
 } while (0)
@@ -2098,9 +2098,9 @@ do {									\
 /* This is how to output an assembler line defining a `short' constant
    to an xdata segment.  */
 
-#define ASM_OUTPUT_XDATA_SHORT(FILE, SECTION, SUFFIX, VALUE)		\
+#define ASM_OUTPUT_XDATA_SHORT(FILE, PREFIX, SUFFIX, VALUE)		\
 do {									\
-  fprintf (FILE, "\t.xdata2\t\"%s%s\", ", SECTION, SUFFIX);		\
+  fprintf (FILE, "\t.xdata2\t\"%s%s\", ", PREFIX, SUFFIX);		\
   output_addr_const (FILE, (VALUE));					\
   fprintf (FILE, "\n");							\
 } while (0)
@@ -2110,9 +2110,9 @@ do {									\
 
 /* ??? For ILP32, also need to handle function addresses here.  */
 
-#define ASM_OUTPUT_XDATA_INT(FILE, SECTION, SUFFIX, VALUE)		\
+#define ASM_OUTPUT_XDATA_INT(FILE, PREFIX, SUFFIX, VALUE)		\
 do {									\
-  fprintf (FILE, "\t.xdata4\t\"%s%s\", ", SECTION, SUFFIX);		\
+  fprintf (FILE, "\t.xdata4\t\"%s%s\", ", PREFIX, SUFFIX);		\
   output_addr_const (FILE, (VALUE));					\
   fprintf (FILE, "\n");							\
 } while (0)
@@ -2120,10 +2120,10 @@ do {									\
 /* This is how to output an assembler line defining a `long' constant
    to an xdata segment.  We also handle symbol output here.  */
 
-#define ASM_OUTPUT_XDATA_DOUBLE_INT(FILE, SECTION, SUFFIX, VALUE)	\
+#define ASM_OUTPUT_XDATA_DOUBLE_INT(FILE, PREFIX, SUFFIX, VALUE)	\
 do {									\
   int need_closing_paren = 0;						\
-  fprintf (FILE, "\t.xdata8\t\"%s%s\", ", SECTION, SUFFIX);		\
+  fprintf (FILE, "\t.xdata8\t\"%s%s\", ", PREFIX, SUFFIX);		\
   if (!(TARGET_NO_PIC || TARGET_AUTO_PIC)				\
       && GET_CODE (VALUE) == SYMBOL_REF)				\
     {									\
@@ -2137,22 +2137,34 @@ do {									\
 } while (0)
 
 
+#define IA64_OUTPUT_EH_SECTION(OUTPUT, FILE, VALUE)			\
+do {									\
+  const char *eh_prefix = ".IA_64.unwind_info", *eh_suffix = "";	\
+  if (in_section == in_named)						\
+    {									\
+      eh_suffix = in_named_name;					\
+      if (strncmp (in_named_name, ".gnu.linkonce.t.",			\
+		   sizeof (".gnu.linkonce.t.") - 1) == 0)		\
+	{								\
+	  eh_prefix = ".gnu.linkonce.ia64unwi.";			\
+	  eh_suffix += sizeof (".gnu.linkonce.t.") - 1;			\
+	}								\
+    }									\
+  OUTPUT (FILE, eh_prefix, eh_suffix, VALUE);				\
+} while (0)  
+
 /* Output EH data to the unwind segment. */
 #define ASM_OUTPUT_EH_CHAR(FILE, VALUE)					\
-		ASM_OUTPUT_XDATA_CHAR(FILE, ".IA_64.unwind_info",	\
-		in_section == in_named ? in_named_name : "", VALUE)
+  IA64_OUTPUT_EH_SECTION(ASM_OUTPUT_XDATA_CHAR, FILE, VALUE)
 
 #define ASM_OUTPUT_EH_SHORT(FILE, VALUE)				\
-		ASM_OUTPUT_XDATA_SHORT(FILE, ".IA_64.unwind_info",	\
-		in_section == in_named ? in_named_name : "", VALUE)
+  IA64_OUTPUT_EH_SECTION(ASM_OUTPUT_XDATA_SHORT, FILE, VALUE)
 
 #define ASM_OUTPUT_EH_INT(FILE, VALUE)					\
-		ASM_OUTPUT_XDATA_INT(FILE, ".IA_64.unwind_info",	\
-		in_section == in_named ? in_named_name : "", VALUE)
+  IA64_OUTPUT_EH_SECTION(ASM_OUTPUT_XDATA_INT, FILE, VALUE)
 
 #define ASM_OUTPUT_EH_DOUBLE_INT(FILE, VALUE)				\
-		ASM_OUTPUT_XDATA_DOUBLE_INT(FILE, ".IA_64.unwind_info",	\
-		in_section == in_named ? in_named_name : "", VALUE)
+  IA64_OUTPUT_EH_SECTION(ASM_OUTPUT_XDATA_DOUBLE_INT, FILE, VALUE)
 
 /* A C statement to output to the stdio stream STREAM an assembler instruction
    to assemble a single byte containing the number VALUE.  */
