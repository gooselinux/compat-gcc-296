2001-01-31  Neil Booth  <neil@daikokuya.demon.co.uk>

	* cpphash.h (struct cpp_reader): New saved_flags.
	* cppmacro.c (cpp_get_token): Use saved_flags to remember
	to avoid a paste after a pasted token.

	* gcc.dg/cpp/avoidpaste1.c: Update.
	* gcc.dg/cpp/paste4.c: Update.

--- gcc/cpphash.h	2001/01/13 18:39:25	1.92
+++ gcc/cpphash.h	2001/01/31 07:44:54
@@ -331,6 +331,9 @@ struct cpp_reader
   /* We're printed a warning recommending against using #import.  */
   unsigned char import_warning;
 
+  /* Used to flag the token after a paste AVOID_LPASTE.  */
+  unsigned char saved_flags;
+
   /* True after cpp_start_read completes.  Used to inhibit some
      warnings while parsing the command line.  */
   unsigned char done_initializing;
--- gcc/cppmacro.c	2001/01/28 11:22:22	1.40
+++ gcc/cppmacro.c	2001/01/31 07:44:55
@@ -906,8 +906,10 @@ cpp_get_token (pfile, token)
      cpp_reader *pfile;
      cpp_token *token;
 {
-  unsigned char flags = 0;
+  unsigned char flags = pfile->saved_flags;
 
+  pfile->saved_flags = 0;
+
   for (;;)
     {
       cpp_context *context = pfile->context;
@@ -922,7 +924,10 @@ cpp_get_token (pfile, token)
 	  *token = *context->list.first++;
 	  /* PASTE_LEFT tokens can only appear in macro expansions.  */
 	  if (token->flags & PASTE_LEFT)
-	    paste_all_tokens (pfile, token);
+	    {
+	      paste_all_tokens (pfile, token);
+	      pfile->saved_flags = AVOID_LPASTE;
+	    }
 	}
       else
 	{
--- gcc/testsuite/gcc.dg/cpp/avoidpaste1.c	2001/01/29 18:58:38	1.2
+++ gcc/testsuite/gcc.dg/cpp/avoidpaste1.c	2001/01/31 07:44:55
@@ -10,22 +10,23 @@
 
 #define f(x) x
 #define g
+#define tricky 1.0e ## -1
 
 /* This should preprocess as
 
-:: : : : : :^:
+:: : : : : :^: 1.0e- 1
 : : : .. . 0
 
 It relies on the fact that even when preprocessing C we bother to separate
 the colons of C++'s :: operator.  If we confine this behaviour to C++
 in future, this test needs to change.  */
 
-:: :g: :f(): :f(^):
+:: :g: :f(): :f(^): tricky
 :f(:): .. .__INCLUDE_LEVEL__	/* Check builtins, too.  */
 
 /*
    { dg-final { if ![file exists avoidpaste1.i] { return }                } }
-   { dg-final { if { [grep avoidpaste1.i ":: : : : : :\\^:"] != "" } \{   } }
+   { dg-final { if { [grep avoidpaste1.i ":: : : : : :\\^: 1.0e- 1"] != "" } \{   } }
    { dg-final { if { [grep avoidpaste1.i ": : : \\\.\\\. \\\. 0"] != "" } \{  } }
    { dg-final { return \} \}                                              } }
    { dg-final { fail "avoidpaste1.c: paste avoidance"                     } }
