2001-01-09  Mark Elbrecht  <snowball3@bigfoot.com>

	* gcc.c (process_command): Set switches[n_switches].ordering to 0.

2000-12-14  Neil Booth  <neil@daikokuya.demon.co.uk>

	* gcc.c (cpp_options): Update to use '&'.
	(struct switchstr): Change type of validated to save space.
	New member 'ordering'.
	(handle_braces, validate_switches): Update to handle '&'.

--- gcc/gcc.c.jj	Thu Feb 14 22:42:47 2002
+++ gcc/gcc.c	Wed Feb 27 14:09:27 2002
@@ -376,6 +376,10 @@ or with constant text in a single argume
 	name starts with `o'.  %{o*} would substitute this text,
 	including the space; thus, two arguments would be generated.
  %{^S*} likewise, but don't put a blank between a switch and any args.
+ %{S*&T*} likewise, but preserve order of S and T options (the order
+ 	of S and T in the spec is not significant).  Can be any number
+ 	of ampersand-separated variables; for each the wild card is
+ 	optional.  Useful for CPP as %{D*&U*&A*}.
  %{S*:X} substitutes X if one or more switches whose names start with -S are
 	specified to CC.  Note that the tail part of the -S option
 	(i.e. the part matched by the `*') will be substituted for each
@@ -563,7 +567,7 @@ static const char *trad_capable_cpp =
 static const char *cpp_options =
 "%{C:%{!E:%eGNU C does not support -C without using -E}}\
  %{std*} %{nostdinc*}\
- %{C} %{v} %{A*} %{I*} %{P} %{$} %I\
+ %{C} %{v} %{I*} %{P} %{$} %I\
  %{MD:-M -MF %W{!o: %b.d}%W{o*:%.d%*}}\
  %{MMD:-MM -MF %W{!o: %b.d}%W{o*:%.d%*}}\
  %{M} %{MM} %W{MF*} %{MG} %{MP} %{MQ*} %{MT*} %{M|MD|MM|MMD:%{o*:-MQ %*}}\
@@ -575,7 +579,7 @@ static const char *cpp_options =
  %{fshow-column} %{fno-show-column}\
  %{fleading-underscore} %{fno-leading-underscore}\
  %{foperator-names} %{fno-operator-names} %{ftabstop=*} %{remap}\
- %{g3:-dD} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z %i\
+ %{g3:-dD} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*&U*&A*} %{i*} %Z %i\
  %{E:%{!M*:%W{o*}}}";
 
 static const char *cc1_options =
@@ -2661,7 +2665,8 @@ struct switchstr
   const char *part1;
   const char **args;
   int live_cond;
-  int validated;
+  unsigned char validated;
+  unsigned char ordering;
 };
 
 static struct switchstr *switches;
@@ -3618,6 +3623,7 @@ process_command (argc, argv)
 
 	  switches[n_switches].live_cond = SWITCH_OK;
 	  switches[n_switches].validated = 0;
+	  switches[n_switches].ordering = 0;
 	  /* This is always valid, since gcc.c itself understands it.  */
 	  if (!strcmp (p, "save-temps"))
 	    switches[n_switches].validated = 1;
@@ -4684,6 +4690,7 @@ handle_braces (p)
   int suffix;
   int include_blanks = 1;
   int elide_switch = 0;
+  int ordered = 0;
 
   if (*p == '^')
     {
@@ -4734,20 +4741,23 @@ next_member:
       abort ();
     }
 
+ next_ampersand:
   filter = p;
-  while (*p != ':' && *p != '}' && *p != '|') p++;
+  while (*p != ':' && *p != '}' && *p != '|' && *p != '&')
+	p++;
 
-  if (*p == '|' && pipe_p)
+  if (*p == '|' && (pipe_p || ordered))
     abort ();
 
   if (!body)
     {
-      if (*p != '}')
+      if (*p != '}' && *p != '&')
         {
 	  register int count = 1;
 	  register const char *q = p;
 
-	  while (*q++ != ':') continue;
+	  while (*q++ != ':')
+		continue;
 	  body = q;
 	  
 	  while (count > 0)
@@ -4763,13 +4773,13 @@ next_member:
 	  endbody = q;
 	}
       else
-	body = p, endbody = p+1;
+	body = p, endbody = p + 1;
     }
 
   if (suffix)
     {
       int found = (input_suffix != 0
-		   && (long) strlen (input_suffix) == (long)(p - filter)
+		   && (long) strlen (input_suffix) == (long) (p - filter)
 		   && strncmp (input_suffix, filter, p - filter) == 0);
 
       if (body[0] == '}')
@@ -4779,15 +4789,23 @@ next_member:
 	  && do_spec_1 (save_string (body, endbody-body-1), 0, NULL_PTR) < 0)
 	return 0;
     }
-  else if (p[-1] == '*' && p[0] == '}')
+  else if (p[-1] == '*' && (p[0] == '}' || p[0] == '&'))
     {
       /* Substitute all matching switches as separate args.  */
       register int i;
-      --p;
+
       for (i = 0; i < n_switches; i++)
-	if (!strncmp (switches[i].part1, filter, p - filter)
-	    && check_live_switch (i, p - filter))
-	  give_switch (i, 0, include_blanks);
+	if (!strncmp (switches[i].part1, filter, p - 1 - filter)
+	    && check_live_switch (i, p - 1 - filter))
+	  {
+		if (elide_switch)
+		  {
+			switches[i].live_cond = SWITCH_IGNORE;
+			switches[i].validated = 1;
+		  }
+		else
+		  ordered = 1, switches[i].ordering = 1;
+	  }
     }
   else
     {
@@ -4878,10 +4896,10 @@ next_member:
 	      switches[i].live_cond = SWITCH_IGNORE;
 	      switches[i].validated = 1;
 	    }
+	  else if (ordered || *p == '&')
+		ordered = 1, switches[i].ordering = 1;
 	  else if (*p == '}')
-	    {
-	      give_switch (i, 0, include_blanks);
-	    }
+		give_switch (i, 0, include_blanks);
 	  else
 	    /* Even if many alternatives are matched, only output once.  */
 	    true_once = 1;
@@ -4899,8 +4917,26 @@ next_member:
   if (*p++ == '|')
     goto next_member;
 
+  if (p[-1] == '&')
+    {
+      body = 0;
+      goto next_ampersand;
+    }
+
+  if (ordered)
+    {
+      int i;
+      /* Doing this set of switches later preserves their command-line
+	 ordering.  This is needed for e.g. -U, -D and -A.  */
+      for (i = 0; i < n_switches; i++)
+	if (switches[i].ordering == 1)
+	  {
+	    switches[i].ordering = 0;
+	    give_switch (i, 0, include_blanks);
+	  }
+    }
   /* Process the spec just once, regardless of match count.  */
-  if (true_once)
+  else if (true_once)
     {
       if (do_spec_1 (save_string (body, endbody - body - 1),
 		     0, NULL_PTR) < 0)
@@ -5935,7 +5971,8 @@ next_member:
     suffix = 1, ++p;
 
   filter = p;
-  while (*p != ':' && *p != '}' && *p != '|') p++;
+  while (*p != ':' && *p != '}' && *p != '|' && *p != '&')
+	p++;
 
   if (suffix)
     ;
@@ -5957,7 +5994,7 @@ next_member:
 	}
     }
 
-  if (*p++ == '|')
+  if (*p++ == '|' || p[-1] == '&')
     goto next_member;
 }
 
